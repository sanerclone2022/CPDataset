[{"authorTime":"2006-06-08 23:35:56","codes":[{"authorDate":"2006-06-08 23:35:56","commitOrder":1,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getKey();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[9];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable()) {\n                    writer.print(MessageFormat.format(\n                        STARTED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2006-06-08 23:35:56","endLine":458,"groupId":"3947","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ad/84bb278ef7c1cea723c9fc06f754bccafa2f98.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getKey();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[9];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable()) {\n                    writer.print(MessageFormat.format(\n                        STARTED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"B"},{"authorDate":"2006-06-08 23:35:56","commitOrder":1,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap sortedHostNamesMap = new TreeMap();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator iterator = sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = hostName;\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                }\n\n                args[1] = buf.toString();\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" + hostName);\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" + hostName);\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" + hostName);\n                args[5] = hostsRemove;\n                args[6] = hostName;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2006-06-08 23:35:56","endLine":366,"groupId":"11046","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c3/77e8054cddc63fdbef51538612426011bd292f.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap sortedHostNamesMap = new TreeMap();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator iterator = sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = hostName;\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                }\n\n                args[1] = buf.toString();\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" + hostName);\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" + hostName);\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" + hostName);\n                args[5] = hostsRemove;\n                args[6] = hostName;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"B"}],"commitId":"f1911d8c5f0dc3774fe731ae27d4a9a9b39197c3","commitMessage":"@@@- Add the manager classes and a package renamed fileupload.\n- I think there should be basic multipart handling in the core.  although maybe the manager doesn't\n  belong here (so I would remove it later on).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@412780 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-06-08 23:35:56","modifiedFileCount":"0","status":"B","submitter":"Remy Maucherat"},{"authorTime":"2006-06-08 23:35:56","codes":[{"authorDate":"2006-09-21 10:21:19","commitOrder":2,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getKey();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[9];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2006-09-21 10:21:19","endLine":472,"groupId":"3947","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e5/3396fef09b61a3dfbdcf965d5f8c1f2f9548f4.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getKey();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[9];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable()) {\n                    writer.print(MessageFormat.format(\n                        STARTED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"},{"authorDate":"2006-06-08 23:35:56","commitOrder":2,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap sortedHostNamesMap = new TreeMap();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator iterator = sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = hostName;\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                }\n\n                args[1] = buf.toString();\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" + hostName);\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" + hostName);\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" + hostName);\n                args[5] = hostsRemove;\n                args[6] = hostName;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2006-06-08 23:35:56","endLine":366,"groupId":"11046","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c3/77e8054cddc63fdbef51538612426011bd292f.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap sortedHostNamesMap = new TreeMap();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator iterator = sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = hostName;\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                }\n\n                args[1] = buf.toString();\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" + hostName);\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" + hostName);\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" + hostName);\n                args[5] = hostsRemove;\n                args[6] = hostName;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"}],"commitId":"9dd8a239bf634dcf8e5160ddbdfcf1c493681729","commitMessage":"@@@Port fix for bug 34399 - disable the undeploy option if the webapp has not been 'deployed'\nThis occurs.  for example.  if the webapp is defined in server.xml\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@448434 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-09-21 10:21:19","modifiedFileCount":"3","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2006-06-08 23:35:56","codes":[{"authorDate":"2007-04-26 03:56:25","commitOrder":3,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getKey();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + displayPath);\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                args[11] = new Integer(context.getManager().getMaxInactiveInterval()/60);\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2007-04-26 03:56:25","endLine":505,"groupId":"16073","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9b/fbd928677ecea59d89be789aec1476abd32946.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getKey();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[9];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"},{"authorDate":"2006-06-08 23:35:56","commitOrder":3,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap sortedHostNamesMap = new TreeMap();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator iterator = sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = hostName;\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                }\n\n                args[1] = buf.toString();\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" + hostName);\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" + hostName);\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" + hostName);\n                args[5] = hostsRemove;\n                args[6] = hostName;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2006-06-08 23:35:56","endLine":366,"groupId":"11046","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c3/77e8054cddc63fdbef51538612426011bd292f.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap sortedHostNamesMap = new TreeMap();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator iterator = sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = hostName;\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                }\n\n                args[1] = buf.toString();\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" + hostName);\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" + hostName);\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" + hostName);\n                args[5] = hostsRemove;\n                args[6] = hostName;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"}],"commitId":"3efeb100b5b614b178500c074fc0064b35f82638","commitMessage":"@@@- Session expiration and statistics tools.\n- Submitted by Rainer Jung.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@532461 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2007-04-26 03:56:25","modifiedFileCount":"2","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2007-07-21 06:36:07","codes":[{"authorDate":"2007-04-26 03:56:25","commitOrder":4,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getKey();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + displayPath);\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                args[11] = new Integer(context.getManager().getMaxInactiveInterval()/60);\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2007-04-26 03:56:25","endLine":505,"groupId":"16073","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9b/fbd928677ecea59d89be789aec1476abd32946.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getKey();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + displayPath);\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                args[11] = new Integer(context.getManager().getMaxInactiveInterval()/60);\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"N"},{"authorDate":"2007-07-21 06:36:07","commitOrder":4,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" + hostName);\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" + hostName);\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" + hostName);\n                args[5] = hostsRemove;\n                args[6] = hostName;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2007-07-21 06:36:07","endLine":371,"groupId":"7306","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e6/a8ee5d3dc285e2664ea611471f89c6bab5f247.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap sortedHostNamesMap = new TreeMap();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator iterator = sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = hostName;\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                }\n\n                args[1] = buf.toString();\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" + hostName);\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" + hostName);\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" + hostName);\n                args[5] = hostsRemove;\n                args[6] = hostName;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"78485ff2b12c098a907ff94f2a4dfaf6bb7d5d2b","commitMessage":"@@@upsync from 6.0\nhttp://svn.apache.org/viewvc?view=rev&rev=557454\nhttp://svn.apache.org/viewvc?view=rev&rev=557467 \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@558182 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2007-07-21 06:36:07","modifiedFileCount":"2","status":"M","submitter":"Filip Hanik"},{"authorTime":"2007-11-10 05:00:38","codes":[{"authorDate":"2007-11-10 05:00:38","commitOrder":5,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getKey();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + displayPath);\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                args[11] = new Integer(context.getManager().getMaxInactiveInterval()/60);\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2007-11-10 05:00:38","endLine":508,"groupId":"16073","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/49/afafecc7e78a4fe99bb683a6361ee89887c0ad.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getKey();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + displayPath);\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                args[11] = new Integer(context.getManager().getMaxInactiveInterval()/60);\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"},{"authorDate":"2007-11-10 05:00:38","commitOrder":5,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" + hostName);\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" + hostName);\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" + hostName);\n                args[5] = hostsRemove;\n                args[6] = hostName;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2007-11-10 05:00:38","endLine":376,"groupId":"7306","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c1/1afe1a0822067cb7dd48542d355526bcb7ea44.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        args[1] = (message == null || message.length() == 0) ? \"OK\" : message;\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" + hostName);\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" + hostName);\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" + hostName);\n                args[5] = hostsRemove;\n                args[6] = hostName;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"d32efb84e69a972334cf568c0a7ec82c51ad8573","commitMessage":"@@@Create C-T-R development branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@593649 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2007-11-10 05:00:38","modifiedFileCount":"158","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2007-11-10 05:00:38","codes":[{"authorDate":"2008-01-17 07:40:53","commitOrder":6,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getKey();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + displayPath);\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2008-01-17 07:40:53","endLine":521,"groupId":"0","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/79/ef115c94349fcb88da53d51df63b313f8a5ca5.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getKey();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + displayPath);\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                args[11] = new Integer(context.getManager().getMaxInactiveInterval()/60);\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"},{"authorDate":"2007-11-10 05:00:38","commitOrder":6,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" + hostName);\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" + hostName);\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" + hostName);\n                args[5] = hostsRemove;\n                args[6] = hostName;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2007-11-10 05:00:38","endLine":376,"groupId":"7306","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c1/1afe1a0822067cb7dd48542d355526bcb7ea44.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" + hostName);\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" + hostName);\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" + hostName);\n                args[5] = hostsRemove;\n                args[6] = hostName;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"N"}],"commitId":"e14afee1ba5934c1dd6544032d6ca1b3e19eb879","commitMessage":"@@@Fix bug 43468. Prevent NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@612632 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-01-17 07:40:53","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2007-11-10 05:00:38","codes":[{"authorDate":"2008-01-17 07:42:37","commitOrder":7,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + displayPath);\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2008-01-17 07:42:37","endLine":521,"groupId":"16073","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a1/dd6db1b601d148dadb7719de2335da02056a1b.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getKey();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + displayPath);\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"},{"authorDate":"2007-11-10 05:00:38","commitOrder":7,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" + hostName);\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" + hostName);\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" + hostName);\n                args[5] = hostsRemove;\n                args[6] = hostName;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2007-11-10 05:00:38","endLine":376,"groupId":"7306","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c1/1afe1a0822067cb7dd48542d355526bcb7ea44.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" + hostName);\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" + hostName);\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" + hostName);\n                args[5] = hostsRemove;\n                args[6] = hostName;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"N"}],"commitId":"8d61a5089e4956bcdd32e9ad3c7e8ed8c70fd325","commitMessage":"@@@Fix 43315. Display value rather than key.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@612636 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-01-17 07:42:37","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2008-06-03 05:41:28","codes":[{"authorDate":"2008-01-17 07:42:37","commitOrder":8,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + displayPath);\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2008-01-17 07:42:37","endLine":521,"groupId":"16073","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a1/dd6db1b601d148dadb7719de2335da02056a1b.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + displayPath);\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"N"},{"authorDate":"2008-06-03 05:41:28","commitOrder":8,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = RequestUtil.filter(hostName);\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2008-06-03 05:41:28","endLine":380,"groupId":"16124","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/cf/1afa292686edb7ab8d8c04a7ec5ae4a3223485.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" + hostName);\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" + hostName);\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" + hostName);\n                args[5] = hostsRemove;\n                args[6] = hostName;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"49c71fc59c1b8f8da77aea9eb53e61db168aebab","commitMessage":"@@@Fix potential XSS in host-manager.\nThis is CVE-2008-1947.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@662582 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-06-03 05:41:28","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2008-06-03 05:41:28","codes":[{"authorDate":"2008-12-27 07:50:26","commitOrder":9,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2008-12-27 07:50:26","endLine":529,"groupId":"16073","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f9/91406b86c1cfb03cca9bdcf336a63855752c68.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n\n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[6];\n                args[0] = displayPath;\n                args[1] = context.getDisplayName();\n                if (args[1] == null) {\n                    args[1] = \"&nbsp;\";\n                }\n                args[2] = new Boolean(context.getAvailable());\n                args[3] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + displayPath);\n                if (context.getManager() != null) {\n                    args[4] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[4] = new Integer(0);\n                }\n\n                args[5] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + displayPath);\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + displayPath);\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + displayPath);\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + displayPath);\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + displayPath);\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"},{"authorDate":"2008-06-03 05:41:28","commitOrder":9,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = RequestUtil.filter(hostName);\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2008-06-03 05:41:28","endLine":380,"groupId":"16124","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/cf/1afa292686edb7ab8d8c04a7ec5ae4a3223485.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = RequestUtil.filter(hostName);\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"N"}],"commitId":"85fc30c1bfa5869971ca7513248c4bc67e1f33e4","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=46261\n%2F in context paths should be treated literally.  not as / - that is what '#' is for.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@729571 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-12-27 07:50:26","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2008-12-27 21:39:41","codes":[{"authorDate":"2008-12-27 21:39:41","commitOrder":10,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2008-12-27 21:39:41","endLine":531,"groupId":"3073","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/da/10eb2f04c1600962664b8b73f669fea96b49f3.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap sortedContextPathsMap = new TreeMap();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator iterator = sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry entry = (Map.Entry) iterator.next();\n            String displayPath = (String) entry.getKey();\n            String contextPath = (String) entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"},{"authorDate":"2008-12-27 21:39:41","commitOrder":10,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = RequestUtil.filter(hostName);\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2008-12-27 21:39:41","endLine":380,"groupId":"16124","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/2f/9c1cb100d54662d3bcbaa1d65ee01115f29967.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = (String) entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = RequestUtil.filter(hostName);\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"2b6b1a887c0137eb52a5a2fed127112fb238885f","commitMessage":"@@@Generics for o.a.c.manager\nFix various Eclipse warnings (unused code.  etc)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@729633 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-12-27 21:39:41","modifiedFileCount":"11","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2008-12-27 21:39:41","codes":[{"authorDate":"2009-10-11 07:11:30","commitOrder":11,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[15];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                args[14] = newNonce;\n                \n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[7] = newNonce;\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[4] = newNonce;\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2009-10-11 07:11:30","endLine":622,"groupId":"418","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/508a83324e788b316bef8da2efb49b4bacdf34.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                \n                args[13] = highlightColor;\n\n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"},{"authorDate":"2008-12-27 21:39:41","commitOrder":11,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = RequestUtil.filter(hostName);\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2008-12-27 21:39:41","endLine":380,"groupId":"16124","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/2f/9c1cb100d54662d3bcbaa1d65ee01115f29967.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = RequestUtil.filter(hostName);\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"N"}],"commitId":"4cf35556f7254f6890a6f6a04fcacf3033334c9e","commitMessage":"@@@Use a nonce to provide CSRF protection\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@823975 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-10-11 07:11:30","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2009-10-18 03:27:12","codes":[{"authorDate":"2009-10-11 07:11:30","commitOrder":12,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[15];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                args[14] = newNonce;\n                \n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[7] = newNonce;\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[4] = newNonce;\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2009-10-11 07:11:30","endLine":622,"groupId":"418","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/508a83324e788b316bef8da2efb49b4bacdf34.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[15];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                args[14] = newNonce;\n                \n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[7] = newNonce;\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[4] = newNonce;\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"N"},{"authorDate":"2009-10-18 03:27:12","commitOrder":12,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = newNonce;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        args[6] = newNonce;\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2009-10-18 03:27:12","endLine":483,"groupId":"7280","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/4a/eb0d8075a0861c4c3e596d4d1a39e0bd6e7006.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = RequestUtil.filter(hostName);\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"}],"commitId":"97fea6ac1a522b8c40dbf2a2824146ef34784621","commitMessage":"@@@Part 2 of CSRF protection for the host manager. Use POST and require valid nonce.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@826295 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-10-18 03:27:12","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2009-11-03 02:32:07","codes":[{"authorDate":"2009-10-11 07:11:30","commitOrder":13,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[15];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                args[14] = newNonce;\n                \n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[7] = newNonce;\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[4] = newNonce;\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2009-10-11 07:11:30","endLine":622,"groupId":"418","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/508a83324e788b316bef8da2efb49b4bacdf34.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[15];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                args[14] = newNonce;\n                \n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[7] = newNonce;\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[4] = newNonce;\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"N"},{"authorDate":"2009-11-03 02:32:07","commitOrder":13,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = newNonce;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        args[6] = newNonce;\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2009-11-03 02:32:07","endLine":483,"groupId":"7280","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/dc/4756840c3014d8f68942b6e1231ce5996fe948.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuffer buf = new StringBuffer();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = newNonce;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        args[6] = newNonce;\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"}],"commitId":"8d82cdf025e62962af93bf6d7a8fc470413341b7","commitMessage":"@@@StringBuffer -> StringBuilder for o.a.c.manager\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@832013 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-11-03 02:32:07","modifiedFileCount":"6","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-01-13 01:57:55","codes":[{"authorDate":"2009-10-11 07:11:30","commitOrder":14,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[15];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                args[14] = newNonce;\n                \n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[7] = newNonce;\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[4] = newNonce;\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2009-10-11 07:11:30","endLine":622,"groupId":"418","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/508a83324e788b316bef8da2efb49b4bacdf34.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[15];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                args[14] = newNonce;\n                \n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[7] = newNonce;\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[4] = newNonce;\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"N"},{"authorDate":"2010-01-13 01:57:55","commitOrder":14,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = newNonce;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        args[6] = newNonce;\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-01-13 01:57:55","endLine":484,"groupId":"7280","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e8/8fc65a7b5cfe11a250ea4f5f86c1f0b6b764b9.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = newNonce;\n                if (host == this.host) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        args[6] = newNonce;\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"M"}],"commitId":"d178a69f3b903f7038a5270b8528aeaf643791f6","commitMessage":"@@@Fix the Eclipse warnings for the host-manager\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@898443 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-01-13 01:57:55","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-01-13 02:27:33","codes":[{"authorDate":"2009-10-11 07:11:30","commitOrder":15,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[15];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                args[14] = newNonce;\n                \n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[7] = newNonce;\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[4] = newNonce;\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2009-10-11 07:11:30","endLine":622,"groupId":"418","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/508a83324e788b316bef8da2efb49b4bacdf34.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[15];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                args[14] = newNonce;\n                \n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[7] = newNonce;\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[4] = newNonce;\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"N"},{"authorDate":"2010-01-13 02:27:33","commitOrder":15,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = newNonce;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        args[6] = newNonce;\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-01-13 02:27:33","endLine":488,"groupId":"7280","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/36/2b5d44ce5c59d0b6a2168f6f2f81570354c2a4.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = newNonce;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        args[6] = newNonce;\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"M"}],"commitId":"21639c00911f85474464868ec8311caa297cdf39","commitMessage":"@@@Make logging consistent for HTML and text interfaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@898457 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-01-13 02:27:33","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-01-13 02:27:33","codes":[{"authorDate":"2010-02-13 01:51:06","commitOrder":16,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[15];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                args[14] = newNonce;\n                \n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[7] = newNonce;\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[4] = newNonce;\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = newNonce;\n        args[4] = sm.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[5] = sm.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-02-13 01:51:06","endLine":660,"groupId":"418","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/93/de53d816b18e248be51dd0544d9f70fbeae633.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[15];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                args[14] = newNonce;\n                \n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[7] = newNonce;\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[4] = newNonce;\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"},{"authorDate":"2010-01-13 02:27:33","commitOrder":16,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = newNonce;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        args[6] = newNonce;\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-01-13 02:27:33","endLine":488,"groupId":"7280","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/36/2b5d44ce5c59d0b6a2168f6f2f81570354c2a4.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = newNonce;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        args[6] = newNonce;\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"N"}],"commitId":"13f53fbe1990fb7699d6e02a68951dd543d6d39b","commitMessage":"@@@Add a find leaks option - with a suitable warning to the manager app (html & text)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@909528 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-02-13 01:51:06","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-01-13 02:27:33","codes":[{"authorDate":"2010-06-24 17:57:02","commitOrder":17,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (ctxt.getManager() != null) {\n                    args[5] = new Integer\n                        (ctxt.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = ctxt.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = sm.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = sm.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-06-24 17:57:02","endLine":631,"groupId":"3073","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e7/2651d6cbfdff3e49c94be18282ec9bf8b2822c.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context context = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (context != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = context.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(context.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (context.getManager() != null) {\n                    args[5] = new Integer\n                        (context.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[15];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = context.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            context.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                args[14] = newNonce;\n                \n                if (context.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (context.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!context.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[7] = newNonce;\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        args[4] = newNonce;\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = newNonce;\n        args[4] = sm.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[5] = sm.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"M"},{"authorDate":"2010-01-13 02:27:33","commitOrder":17,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = newNonce;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        args[6] = newNonce;\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-01-13 02:27:33","endLine":488,"groupId":"7280","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/36/2b5d44ce5c59d0b6a2168f6f2f81570354c2a4.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = newNonce;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        args[6] = newNonce;\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"N"}],"commitId":"a0159a34201e21ebc60ed6acffe7343fe26a7b65","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49476\nCSRF protection was preventing access to session expiration features\nAlso:\n- Switch Manager app to generic CSRF protection\n- Add support for multiple nonces to CSRF filter\n- Improve 403 page\n- Don't open JSP pages in session expiration in a new window - makes CSRF prevention a real pain\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@957478 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-06-24 17:57:02","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-06-25 15:47:31","codes":[{"authorDate":"2010-06-24 17:57:02","commitOrder":18,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (ctxt.getManager() != null) {\n                    args[5] = new Integer\n                        (ctxt.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = ctxt.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = sm.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = sm.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-06-24 17:57:02","endLine":631,"groupId":"3073","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e7/2651d6cbfdff3e49c94be18282ec9bf8b2822c.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (ctxt.getManager() != null) {\n                    args[5] = new Integer\n                        (ctxt.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = ctxt.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = sm.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = sm.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"N"},{"authorDate":"2010-06-25 15:47:31","commitOrder":18,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-06-25 15:47:31","endLine":427,"groupId":"16124","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d2/09d791994ed3f1d8ade7a4c87222879e6d9567.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        String newNonce = generateNonce();\n        request.getSession().setAttribute(NONCE_SESSION, newNonce);\n        \n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[7];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[1] = hostsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[5] = hostsRemove;\n                args[6] = newNonce;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        args[6] = newNonce;\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"}],"commitId":"7f6a10d8a6b98ac17beebb05b2bf6e246404c352","commitMessage":"@@@Switch the Host Manager app to the generic CSRF protection\nDon't allow starting of hosts that are started\nDon't allow stopping of hosts that are stopped\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@957828 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-06-25 15:47:31","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-06-25 15:47:31","codes":[{"authorDate":"2010-07-30 04:53:26","commitOrder":19,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof BackupManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((BackupManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = sm.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = sm.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-07-30 04:53:26","endLine":639,"groupId":"7814","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/67/055b21665e06288a719e92ef784897bb593922.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                if (ctxt.getManager() != null) {\n                    args[5] = new Integer\n                        (ctxt.getManager().getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                Manager manager = ctxt.getManager();\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = sm.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = sm.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"},{"authorDate":"2010-06-25 15:47:31","commitOrder":19,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-06-25 15:47:31","endLine":427,"groupId":"16124","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d2/09d791994ed3f1d8ade7a4c87222879e6d9567.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"N"}],"commitId":"5214601ac10e379ca4a63f7a0d3110e6ab7351c2","commitMessage":"@@@Add optional support to the HTML Manager application to display Proxy sessions. It is disabled by default.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@980567 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-07-30 04:53:26","modifiedFileCount":"4","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-09-08 13:57:44","codes":[{"authorDate":"2010-07-30 04:53:26","commitOrder":20,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof BackupManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((BackupManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = sm.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = sm.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-07-30 04:53:26","endLine":639,"groupId":"7814","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/67/055b21665e06288a719e92ef784897bb593922.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof BackupManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((BackupManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = sm.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = sm.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"N"},{"authorDate":"2010-09-08 13:57:44","commitOrder":20,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-09-08 13:57:44","endLine":418,"groupId":"16124","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f5/1529f28984d10e76eecdd9634440826b05824d.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlNamespaceAware\");\n        args[1] = \"xmlNamespaceAware\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addXmlValidation\");\n        args[1] = \"xmlValidation\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"050c55a49982c7a2142caa0ffb3e4b748f14fde2","commitMessage":"@@@Remove unused attributes. This all moved to Context.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@993616 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-09-08 13:57:44","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-09-08 13:57:44","codes":[{"authorDate":"2010-10-17 03:31:37","commitOrder":21,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof BackupManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((BackupManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-10-17 03:31:37","endLine":648,"groupId":"13418","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f4/91451176438313b3d670a83af9bf4ec270a986.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = sm.getString(\"htmlManagerServlet.appsName\");\n        args[3] = sm.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = sm.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = sm.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = sm.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = sm.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = sm.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = sm.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = sm.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof BackupManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((BackupManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = sm.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = sm.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = sm.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = sm.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = sm.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = sm.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = sm.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = sm.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"M"},{"authorDate":"2010-09-08 13:57:44","commitOrder":21,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-09-08 13:57:44","endLine":418,"groupId":"16124","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f5/1529f28984d10e76eecdd9634440826b05824d.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"N"}],"commitId":"73578675b8ded44bd98cbc5ad9a3a596029889f3","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49426\nMessages displayed to the user in the Manager (text and HTML) should be based on the Locale of the user.  not the server\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1023361 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-10-17 03:31:37","modifiedFileCount":"3","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-10-17 03:54:44","codes":[{"authorDate":"2010-10-17 03:31:37","commitOrder":22,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof BackupManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((BackupManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-10-17 03:31:37","endLine":648,"groupId":"13418","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f4/91451176438313b3d670a83af9bf4ec270a986.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof BackupManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((BackupManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"N"},{"authorDate":"2010-10-17 03:54:44","commitOrder":22,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-10-17 03:54:44","endLine":429,"groupId":"11086","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/16/238e2b75576d96f4915283fe3a52e33d7fa766.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = sm.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = sm.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = sm.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             sm.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = sm.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = sm.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart = sm.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = sm.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = sm.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = sm.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = sm.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = sm.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = sm.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = sm.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = sm.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = sm.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = sm.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = sm.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = sm.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"cbd5869bdc178705a058ba7b4a2b5b6b040ab8db","commitMessage":"@@@Messages displayed to the user in the Host Manager (text and HTML) should be based on the Locale of the user.  not the server\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1023366 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-10-17 03:54:44","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-10-17 03:54:44","codes":[{"authorDate":"2010-11-01 10:04:53","commitOrder":23,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof BackupManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((BackupManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-11-01 10:04:53","endLine":644,"groupId":"14009","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b0/5ba4ca23ebbf9a8bf6b16ed966c055b4bd73dd.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof BackupManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((BackupManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getPath().equals(this.context.getPath())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"M"},{"authorDate":"2010-10-17 03:54:44","commitOrder":23,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-10-17 03:54:44","endLine":429,"groupId":"11086","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/16/238e2b75576d96f4915283fe3a52e33d7fa766.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"N"}],"commitId":"40f87363ea4f5353c0e00e29015363af6a27cb37","commitMessage":"@@@Parallel deployment\n- More work separating Context.name & Context.path\n- Review use of Context.getName() and Context.getPath() and use the correct one\n- Start to add webappVersion property to Context (many components not version aware - e.g. Manager app)\n- Set version when deploying apps if version is specified\n- Include version in Context.name if version is specified\n- New ContextName util class to handle all path/name/version etc translations\n\nIn most cases the behaviour is unchanged if the version is not specified. The one exception is JMX ObjectNames that used to contain a key value pair \"path=...\". Since context path is no longer unique when using versions.  this has been changed to \"context=...\" and the context name used which is unique.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1029527 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-11-01 10:04:53","modifiedFileCount":"22","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-10-17 03:54:44","codes":[{"authorDate":"2010-11-12 06:10:25","commitOrder":24,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-11-12 06:10:25","endLine":644,"groupId":"14009","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/dd/a96b2ae0316481a6b431789e80da167110cb73.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof BackupManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((BackupManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"M"},{"authorDate":"2010-10-17 03:54:44","commitOrder":24,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-10-17 03:54:44","endLine":429,"groupId":"11086","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/16/238e2b75576d96f4915283fe3a52e33d7fa766.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"N"}],"commitId":"96020cb11d1d9964dcfd377978b8c51e58c47d45","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50230\nAdd new DistributedManager interface that is implemented by the Backup Manager to remove circular dependency between tomcat-catalina-ha and tomcat-catalina modules. Also allows third-party distributed Manager implementations to report full session information through the HTML Manager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1034174 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-11-12 06:10:25","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-10-17 03:54:44","codes":[{"authorDate":"2010-11-16 01:29:45","commitOrder":25,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + displayPath + \"\\\">\" +\n                        URL_ENCODER.encode(displayPath) + \"</a>\";\n                args[1] = ctxt.getWebappVersion();\n                if (\"\".equals(args[1])) {\n                    args[1]= noVersion;\n                }\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-11-16 01:29:45","endLine":643,"groupId":"10479","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/25/8fbda1e016c1070b6966bdb435138db7ace152.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextPaths[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextPaths[i] = children[i].getName();\n\n        TreeMap<String,String> sortedContextPathsMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < contextPaths.length; i++) {\n            String displayPath = contextPaths[i];\n            sortedContextPathsMap.put(displayPath, contextPaths[i]);\n        }\n \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy = smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedContextPathsMap.entrySet().iterator();\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        while (iterator.hasNext()) {\n            \r\n            isHighlighted = !isHighlighted;\n            if(isHighlighted) {\n                highlightColor = \"#C3F3C3\";\n            } else {\n                highlightColor = \"#FFFFFF\";\n            }\n\n            Map.Entry<String,String> entry = iterator.next();\n            String displayPath = entry.getKey();\n            String contextPath = entry.getValue();\n            Context ctxt = (Context) host.findChild(contextPath);\n            if (displayPath.equals(\"\")) {\n                displayPath = \"/\";\n            }\n\n            if (ctxt != null ) {\n                try {\n                    isDeployed = isDeployed(contextPath);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = URL_ENCODER.encode(displayPath);\n                args[1] = displayPath;\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"M"},{"authorDate":"2010-10-17 03:54:44","commitOrder":25,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-10-17 03:54:44","endLine":429,"groupId":"11086","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/16/238e2b75576d96f4915283fe3a52e33d7fa766.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"N"}],"commitId":"edd924182f9c12792082dc9543f57d622583a468","commitMessage":"@@@Parallel deployment\nAdd a version column to the HTML Manager output.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1035360 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-11-16 01:29:45","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-10-17 03:54:44","codes":[{"authorDate":"2010-11-16 01:35:56","commitOrder":26,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath) +\n                        \"\\\">\" + displayPath + \"</a>\";\n                args[1] = ctxt.getWebappVersion();\n                if (\"\".equals(args[1])) {\n                    args[1]= noVersion;\n                }\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-11-16 01:35:56","endLine":643,"groupId":"10479","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e6/1a8fe589c16b35dfa130b5137cbe551530a8db.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + displayPath + \"\\\">\" +\n                        URL_ENCODER.encode(displayPath) + \"</a>\";\n                args[1] = ctxt.getWebappVersion();\n                if (\"\".equals(args[1])) {\n                    args[1]= noVersion;\n                }\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"M"},{"authorDate":"2010-10-17 03:54:44","commitOrder":26,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-10-17 03:54:44","endLine":429,"groupId":"11086","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/16/238e2b75576d96f4915283fe3a52e33d7fa766.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"N"}],"commitId":"0cf131fdb7b983958761b5ee91246a59bf6bfd5d","commitMessage":"@@@Opps. Encoded display text rather than link.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1035366 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-11-16 01:35:56","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-10-17 03:54:44","codes":[{"authorDate":"2010-11-16 01:52:18","commitOrder":27,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath) +\n                        \"\\\">\" + displayPath + \"</a>\";\n                args[1] = ctxt.getWebappVersion();\n                if (\"\".equals(args[1])) {\n                    args[1]= noVersion;\n                }\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-11-16 01:52:18","endLine":643,"groupId":"10479","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e2/1972381f711cb82f7bc6400df6d5577f7525a4.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath) +\n                        \"\\\">\" + displayPath + \"</a>\";\n                args[1] = ctxt.getWebappVersion();\n                if (\"\".equals(args[1])) {\n                    args[1]= noVersion;\n                }\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"M"},{"authorDate":"2010-10-17 03:54:44","commitOrder":27,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-10-17 03:54:44","endLine":429,"groupId":"11086","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/16/238e2b75576d96f4915283fe3a52e33d7fa766.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"N"}],"commitId":"22fde16fedd17ad1194ca0880b4b607ebe011665","commitMessage":"@@@Remove unused methods\nReduce visibility of methods where possible\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1035371 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-11-16 01:52:18","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-10-17 03:54:44","codes":[{"authorDate":"2010-11-19 20:55:27","commitOrder":28,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath) +\n                        \"\\\">\" + displayPath + \"</a>\";\n                args[1] = ctxt.getWebappVersion();\n                if (\"\".equals(args[1])) {\n                    args[1]= noVersion;\n                }\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion);\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL(request.getContextPath() +\n                        \"/html/start?\" + pathVersion);\n                args[1] = appsStart;\n                args[2] = response.encodeURL(request.getContextPath() +\n                        \"/html/stop?\" + pathVersion);\n                args[3] = appsStop;\n                args[4] = response.encodeURL(request.getContextPath() +\n                     \"/html/reload?\" + pathVersion);\n                args[5] = appsReload;\n                args[6] = response.encodeURL(request.getContextPath() +\n                     \"/html/undeploy?\" + pathVersion);\n                args[7] = appsUndeploy;\n                args[8] = response.encodeURL(request.getContextPath() +\n                     \"/html/expire?\" + pathVersion);\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-11-19 20:55:27","endLine":658,"groupId":"10110","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/65/d523d33ddd4e5ae24ddf522695db162d2ce2b3.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath) +\n                        \"\\\">\" + displayPath + \"</a>\";\n                args[1] = ctxt.getWebappVersion();\n                if (\"\".equals(args[1])) {\n                    args[1]= noVersion;\n                }\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/sessions?path=\" + URL_ENCODER.encode(displayPath));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/start?path=\" + URL_ENCODER.encode(displayPath));\n                args[1] = appsStart;\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?path=\" + URL_ENCODER.encode(displayPath));\n                args[3] = appsStop;\n                args[4] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/reload?path=\" + URL_ENCODER.encode(displayPath));\n                args[5] = appsReload;\n                args[6] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/undeploy?path=\" + URL_ENCODER.encode(displayPath));\n                args[7] = appsUndeploy;\n                \n                args[8] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/expire?path=\" + URL_ENCODER.encode(displayPath));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"M"},{"authorDate":"2010-10-17 03:54:44","commitOrder":28,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-10-17 03:54:44","endLine":429,"groupId":"11086","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/16/238e2b75576d96f4915283fe3a52e33d7fa766.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"N"}],"commitId":"291875a9af83f5e5ad8eeaafc2e83291cc5e9a3c","commitMessage":"@@@Changes to Manager and HTML Manager to support parallel deployment\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1036828 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-11-19 20:55:27","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-10-17 03:54:44","codes":[{"authorDate":"2010-12-03 02:17:55","commitOrder":29,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath) +\n                        \"\\\">\" + displayPath + \"</a>\";\n                args[1] = ctxt.getWebappVersion();\n                if (\"\".equals(args[1])) {\n                    args[1]= noVersion;\n                }\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = Boolean.valueOf(ctxt.getAvailable());\n                args[4] = response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion);\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL(request.getContextPath() +\n                        \"/html/start?\" + pathVersion);\n                args[1] = appsStart;\n                args[2] = response.encodeURL(request.getContextPath() +\n                        \"/html/stop?\" + pathVersion);\n                args[3] = appsStop;\n                args[4] = response.encodeURL(request.getContextPath() +\n                     \"/html/reload?\" + pathVersion);\n                args[5] = appsReload;\n                args[6] = response.encodeURL(request.getContextPath() +\n                     \"/html/undeploy?\" + pathVersion);\n                args[7] = appsUndeploy;\n                args[8] = response.encodeURL(request.getContextPath() +\n                     \"/html/expire?\" + pathVersion);\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-12-03 02:17:55","endLine":658,"groupId":"14008","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/89/fadc2a254df1ae4186ae99fa228129947360a3.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath) +\n                        \"\\\">\" + displayPath + \"</a>\";\n                args[1] = ctxt.getWebappVersion();\n                if (\"\".equals(args[1])) {\n                    args[1]= noVersion;\n                }\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = new Boolean(ctxt.getAvailable());\n                args[4] = response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion);\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = new Integer(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = new Integer(manager.getActiveSessions());\n                } else {\n                    args[5] = new Integer(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL(request.getContextPath() +\n                        \"/html/start?\" + pathVersion);\n                args[1] = appsStart;\n                args[2] = response.encodeURL(request.getContextPath() +\n                        \"/html/stop?\" + pathVersion);\n                args[3] = appsStop;\n                args[4] = response.encodeURL(request.getContextPath() +\n                     \"/html/reload?\" + pathVersion);\n                args[5] = appsReload;\n                args[6] = response.encodeURL(request.getContextPath() +\n                     \"/html/undeploy?\" + pathVersion);\n                args[7] = appsUndeploy;\n                args[8] = response.encodeURL(request.getContextPath() +\n                     \"/html/expire?\" + pathVersion);\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = new Integer(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"M"},{"authorDate":"2010-10-17 03:54:44","commitOrder":29,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-10-17 03:54:44","endLine":429,"groupId":"11086","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/16/238e2b75576d96f4915283fe3a52e33d7fa766.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"N"}],"commitId":"39aff2a99b6fb58d97b2f9ca33ed7f4cbbb763f4","commitMessage":"@@@Replace use of inefficient constructors\nReported by FindBugs. Not all fixed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1041511 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-12-03 02:17:55","modifiedFileCount":"39","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-10-17 03:54:44","codes":[{"authorDate":"2011-01-11 00:58:10","commitOrder":30,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath)\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2011-01-11 00:58:10","endLine":660,"groupId":"12636","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/93/d51fc90e19f21512eed120b8c7b5dd75814266.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath) +\n                        \"\\\">\" + displayPath + \"</a>\";\n                args[1] = ctxt.getWebappVersion();\n                if (\"\".equals(args[1])) {\n                    args[1]= noVersion;\n                }\n                args[2] = ctxt.getDisplayName();\n                if (args[2] == null) {\n                    args[2] = \"&nbsp;\";\n                }\n                args[3] = Boolean.valueOf(ctxt.getAvailable());\n                args[4] = response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion);\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = response.encodeURL(request.getContextPath() +\n                        \"/html/start?\" + pathVersion);\n                args[1] = appsStart;\n                args[2] = response.encodeURL(request.getContextPath() +\n                        \"/html/stop?\" + pathVersion);\n                args[3] = appsStop;\n                args[4] = response.encodeURL(request.getContextPath() +\n                     \"/html/reload?\" + pathVersion);\n                args[5] = appsReload;\n                args[6] = response.encodeURL(request.getContextPath() +\n                     \"/html/undeploy?\" + pathVersion);\n                args[7] = appsUndeploy;\n                args[8] = response.encodeURL(request.getContextPath() +\n                     \"/html/expire?\" + pathVersion);\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"M"},{"authorDate":"2010-10-17 03:54:44","commitOrder":30,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2010-10-17 03:54:44","endLine":429,"groupId":"11086","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/16/238e2b75576d96f4915283fe3a52e33d7fa766.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"N"}],"commitId":"58223c5ecc0751c3642c810f291b8f033d33b97f","commitMessage":"@@@Prevent XSS in Manager application\nThis addresses CVE-2011-0013\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1057279 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-01-11 00:58:10","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-03-30 23:41:02","codes":[{"authorDate":"2011-01-11 00:58:10","commitOrder":31,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath)\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2011-01-11 00:58:10","endLine":660,"groupId":"12636","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/93/d51fc90e19f21512eed120b8c7b5dd75814266.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath)\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"N"},{"authorDate":"2011-03-30 23:41:02","commitOrder":31,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2011-03-30 23:41:02","endLine":429,"groupId":"11086","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9f/8cd103d39060b884fb70b3f09796f500ed4c85.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"b12358ef473f5f43a85c0cdd0170196755618007","commitMessage":"@@@Fix Eclipse/FindBugs warnings apart from those that trigger bug 50984\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1086992 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-03-30 23:41:02","modifiedFileCount":"7","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-03-30 23:41:02","codes":[{"authorDate":"2011-06-16 05:58:00","commitOrder":32,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath)\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2011-06-16 05:58:00","endLine":672,"groupId":"12636","id":63,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d1/5dbf1a9b433ca1c90dd3fd246e565b74a047f0.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath)\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"},{"authorDate":"2011-03-30 23:41:02","commitOrder":32,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2011-03-30 23:41:02","endLine":429,"groupId":"11086","id":64,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9f/8cd103d39060b884fb70b3f09796f500ed4c85.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n \n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        \n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"N"}],"commitId":"2b8e6cf8856d7263831b6eb551246338a4dcf573","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=43538\nAdd host name and IP address to the HTML Manager application.\nPatch by Dennis Lundberg.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1136216 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-06-16 05:58:00","modifiedFileCount":"3","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-07-16 02:53:13","codes":[{"authorDate":"2011-06-16 05:58:00","commitOrder":33,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath)\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2011-06-16 05:58:00","endLine":672,"groupId":"12636","id":65,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d1/5dbf1a9b433ca1c90dd3fd246e565b74a047f0.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n        \n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n            \n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n                \n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath)\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager(); \n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n                \n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"N"},{"authorDate":"2012-07-16 02:53:13","commitOrder":33,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2012-07-16 02:53:13","endLine":428,"groupId":"10909","id":66,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/34/130fc3651422020373a7626b1556834e6970b2.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap =\n            new TreeMap<String,String>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"fe8f1f35e98fa5509775589df36de22d4b55b125","commitMessage":"@@@Code clean-up for o.a.catalina.manager\n - Add final prompted by UCDetector\n - Java 7 use of <>\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1361753 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-07-16 02:53:13","modifiedFileCount":"8","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-07-16 02:53:13","codes":[{"authorDate":"2012-08-29 06:03:33","commitOrder":34,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2012-08-29 06:03:33","endLine":639,"groupId":"12636","id":67,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ce/fdf59ff68c292e85d1284ac99abbfff4064c57.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(displayPath)\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"M"},{"authorDate":"2012-07-16 02:53:13","commitOrder":34,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2012-07-16 02:53:13","endLine":428,"groupId":"10909","id":68,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/34/130fc3651422020373a7626b1556834e6970b2.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"N"}],"commitId":"fcc3d65055704be703f52b2b59a61427cb510e45","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53793\nChange webapp links in Manager to point to /appname/ instead of /appname\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1378361 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-08-29 06:03:33","modifiedFileCount":"1","status":"M","submitter":"Konstantin Kolinko"},{"authorTime":"2012-07-16 02:53:13","codes":[{"authorDate":"2012-09-16 06:18:08","commitOrder":35,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2012-09-16 06:18:08","endLine":650,"groupId":"12636","id":69,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/07/31f83a1e8ce822ca8b4f2a4f92949b6aa585fd.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"},{"authorDate":"2012-07-16 02:53:13","commitOrder":35,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2012-07-16 02:53:13","endLine":428,"groupId":"10909","id":70,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/34/130fc3651422020373a7626b1556834e6970b2.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"N"}],"commitId":"64c549ab0d6e98a4f4d2356700cde3b343c175f0","commitMessage":"@@@Start to expand the diagnostic information available from the Manager web application\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1385193 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-09-16 06:18:08","modifiedFileCount":"9","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-07-16 02:53:13","codes":[{"authorDate":"2012-09-27 16:20:12","commitOrder":36,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2012-09-27 16:20:12","endLine":650,"groupId":"3499","id":71,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/02/df3a3baf8c4fefbc33457a570f8f7878b08e7a.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"},{"authorDate":"2012-07-16 02:53:13","commitOrder":36,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2012-07-16 02:53:13","endLine":428,"groupId":"10909","id":72,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/34/130fc3651422020373a7626b1556834e6970b2.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"N"}],"commitId":"300e8ceb97d40a2f1571f1312ba67d9b2bce20ae","commitMessage":"@@@Deprecate unnecessary code\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1390882 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-09-27 16:20:12","modifiedFileCount":"4","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-07-16 02:53:13","codes":[{"authorDate":"2013-12-14 18:52:56","commitOrder":37,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2013-12-14 18:52:56","endLine":620,"groupId":"8012","id":73,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/67/12c680088a46af74f145030b869a9f7d6e07d4.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (ctxt.getManager() != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"},{"authorDate":"2012-07-16 02:53:13","commitOrder":37,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2012-07-16 02:53:13","endLine":428,"groupId":"10909","id":74,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/34/130fc3651422020373a7626b1556834e6970b2.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"N"}],"commitId":"ea4d14a535ab96283568bfdd5a29fd3d7b856146","commitMessage":"@@@Use existing local variable instead of a getter.\nSpotted thanks to \"manager can be null\" IDE warning.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1550920 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-12-14 18:52:56","modifiedFileCount":"1","status":"M","submitter":"Konstantin Kolinko"},{"authorTime":"2014-03-27 16:28:00","codes":[{"authorDate":"2013-12-14 18:52:56","commitOrder":38,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2013-12-14 18:52:56","endLine":620,"groupId":"8012","id":75,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/67/12c680088a46af74f145030b869a9f7d6e07d4.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"N"},{"authorDate":"2014-03-27 16:28:00","commitOrder":38,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2014-03-27 16:28:00","endLine":433,"groupId":"10909","id":76,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f4/319d1099734def6c3c6f70aac83099d8346db2.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"eba7297f2afca536ffcb087a920544128773b0df","commitMessage":"@@@Add Support for copyXML attribute of Host to Host Manager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1582217 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-27 16:28:00","modifiedFileCount":"2","status":"M","submitter":"Keiichi Fujino"},{"authorTime":"2014-12-21 04:32:39","codes":[{"authorDate":"2014-12-21 04:32:39","commitOrder":39,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = HttpMessages.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + HttpMessages.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = HttpMessages.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = HttpMessages.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = HttpMessages.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = HttpMessages.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = HttpMessages.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = HttpMessages.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = HttpMessages.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = HttpMessages.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2014-12-21 04:32:39","endLine":598,"groupId":"0","id":77,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/30/97ceb42dc6d074d28e42f3667eeb5aa6ac5c0d.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"},{"authorDate":"2014-12-21 04:32:39","commitOrder":39,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = HttpMessages.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = HttpMessages.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = HttpMessages.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2014-12-21 04:32:39","endLine":433,"groupId":"0","id":78,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/59/420d6bda64c8d6cb7995ed12649f20ea0db106.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"305158534a211b10098665f8bcc7708a6765915c","commitMessage":"@@@Remove duplicate utility method.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1647051 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-12-21 04:32:39","modifiedFileCount":"10","status":"M","submitter":"Mark Thomas"},{"authorTime":"2014-12-23 16:58:53","codes":[{"authorDate":"2014-12-23 16:58:53","commitOrder":40,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2014-12-23 16:58:53","endLine":598,"groupId":"8012","id":79,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/83/d33ed311fbc9e5602761d3567adbeb8defa2fc.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = HttpMessages.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + HttpMessages.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = HttpMessages.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = HttpMessages.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = HttpMessages.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = HttpMessages.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = HttpMessages.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = HttpMessages.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = HttpMessages.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = HttpMessages.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"},{"authorDate":"2014-12-23 16:58:53","commitOrder":40,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2014-12-23 16:58:53","endLine":433,"groupId":"10909","id":80,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f4/319d1099734def6c3c6f70aac83099d8346db2.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = HttpMessages.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = HttpMessages.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = HttpMessages.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"24bf30c213362d58d01924dee2150d16c4997bda","commitMessage":"@@@Revert r1647051\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1647507 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-12-23 16:58:53","modifiedFileCount":"10","status":"M","submitter":"Mark Thomas"},{"authorTime":"2014-12-23 16:58:53","codes":[{"authorDate":"2016-01-20 07:27:17","commitOrder":41,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2016-01-20 07:27:17","endLine":594,"groupId":"6915","id":81,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ff/956ddfd0a3d16422e693d32ea01c6e15f4de2f.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\n                        \"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\n                            \"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(\n                            ctxt.getManager().getMaxInactiveInterval()/60);\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"},{"authorDate":"2014-12-23 16:58:53","commitOrder":41,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2014-12-23 16:58:53","endLine":433,"groupId":"10909","id":82,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f4/319d1099734def6c3c6f70aac83099d8346db2.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"N"}],"commitId":"8bc6fa5140ea23e97922ff07b345b92450da3618","commitMessage":"@@@Use distributable and sessionTimeout from Context rather than values copied to Manager since the Context values (should) always take precedence and overwrite anything set on the Manager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1725651 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-20 07:27:17","modifiedFileCount":"4","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-02-23 04:19:15","codes":[{"authorDate":"2016-01-20 07:27:17","commitOrder":42,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2016-01-20 07:27:17","endLine":594,"groupId":"6915","id":83,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ff/956ddfd0a3d16422e693d32ea01c6e15f4de2f.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"N"},{"authorDate":"2016-02-23 04:19:15","commitOrder":42,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[6];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2016-02-23 04:19:15","endLine":471,"groupId":"10909","id":84,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c3/56a92c175671c384be28097f5bdd9345dba7b0.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"83529482d842ddd9ac2d8718b664dea438c45e7c","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=48674\nImplement an option within the Host Manager web pplication to persist the current configuration.\nBased on a patch by Coty Sutherland.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1731734 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-02-23 04:19:15","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-02-23 04:22:38","codes":[{"authorDate":"2016-01-20 07:27:17","commitOrder":43,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2016-01-20 07:27:17","endLine":594,"groupId":"6915","id":85,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ff/956ddfd0a3d16422e693d32ea01c6e15f4de2f.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"N"},{"authorDate":"2016-02-23 04:22:38","commitOrder":43,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2016-02-23 04:22:38","endLine":471,"groupId":"10909","id":86,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/71/47aababda0af14aa05fe2f05608de9de9d4fa1.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[6];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"f25715773e16a8e23168d004d9507e097a0d3002","commitMessage":"@@@Restore correct array size after r1731734\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1731735 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-02-23 04:22:38","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-02-24 17:52:23","codes":[{"authorDate":"2016-01-20 07:27:17","commitOrder":44,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2016-01-20 07:27:17","endLine":594,"groupId":"6915","id":87,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ff/956ddfd0a3d16422e693d32ea01c6e15f4de2f.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"N"},{"authorDate":"2016-02-24 17:52:23","commitOrder":44,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2016-02-24 17:52:23","endLine":471,"groupId":"10909","id":88,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/60/8e179aaa892d0fad230a5fc9072925d10506ec.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"8c3865d43c190ab2f0f739d10202317054a49e2f","commitMessage":"@@@De-duplication.\nReported by Simian.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1732049 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-02-24 17:52:23","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-02-24 17:52:23","codes":[{"authorDate":"2016-07-26 23:31:12","commitOrder":45,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath, \"UTF-8\"));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion(), \"UTF-8\"));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\", \"UTF-8\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2016-07-26 23:31:12","endLine":594,"groupId":"15404","id":89,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/14/386faad28f2e28a533a8f3417a0c6dad9921fb.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion()));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"},{"authorDate":"2016-02-24 17:52:23","commitOrder":45,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2016-02-24 17:52:23","endLine":471,"groupId":"10909","id":90,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/60/8e179aaa892d0fad230a5fc9072925d10506ec.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"N"}],"commitId":"82621d8c28b357160820916b9263f231f37b4404","commitMessage":"@@@Add an encoding parameter to URLEncoder.encode() and be explicit about\nthe encoding wherever Tomcat uses this method.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1754140 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-07-26 23:31:12","modifiedFileCount":"8","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-02-24 17:52:23","codes":[{"authorDate":"2016-08-02 23:29:39","commitOrder":46,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath, \"UTF-8\"));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion(), \"UTF-8\"));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\", \"UTF-8\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2016-08-02 23:29:39","endLine":594,"groupId":"15404","id":91,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/cb/91ff5efe2a296d883043eecf51a13961266e05.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath, \"UTF-8\"));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion(), \"UTF-8\"));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\", \"UTF-8\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = sm.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = sm.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"},{"authorDate":"2016-02-24 17:52:23","commitOrder":46,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2016-02-24 17:52:23","endLine":471,"groupId":"10909","id":92,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/60/8e179aaa892d0fad230a5fc9072925d10506ec.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"N"}],"commitId":"04aad9d3f19b935b07c1ec4f8f6bfd8b9c156a1f","commitMessage":"@@@Two additional headers that should use the client's locale for i18n\nrather than the server's.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1754950 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-08-02 23:29:39","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-02-24 17:52:23","codes":[{"authorDate":"2017-04-24 20:07:39","commitOrder":47,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, \"UTF-8\"));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(ctxt.getWebappVersion(), \"UTF-8\"));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URLEncoder.DEFAULT.encode(contextPath + \"/\", \"UTF-8\") +\n                        \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2017-04-24 20:07:39","endLine":587,"groupId":"7971","id":93,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/31/e85baccd0e2a3c6e736de630a68470f9ede449.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URL_ENCODER.encode(displayPath, \"UTF-8\"));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion(), \"UTF-8\"));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URL_ENCODER.encode(contextPath + \"/\", \"UTF-8\")\n                        + \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"},{"authorDate":"2016-02-24 17:52:23","commitOrder":47,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2016-02-24 17:52:23","endLine":471,"groupId":"10909","id":94,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/60/8e179aaa892d0fad230a5fc9072925d10506ec.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"N"}],"commitId":"0c4225bfe179dc1bbbfa4cdc8fc805780f5aad33","commitMessage":"@@@Review those places where Tomcat re-encodes a URI or URI component and ensure that that correct encoding (path differs from query string) is applied and that the encoding is applied consistently.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1792460 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-04-24 20:07:39","modifiedFileCount":"5","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-02-24 17:52:23","codes":[{"authorDate":"2017-05-04 21:29:20","commitOrder":48,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2017-05-04 21:29:20","endLine":590,"groupId":"7971","id":95,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/7b/ae2d0182913626fbd54fa80f42c2ab19585141.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, \"UTF-8\"));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(ctxt.getWebappVersion(), \"UTF-8\"));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" + URLEncoder.DEFAULT.encode(contextPath + \"/\", \"UTF-8\") +\n                        \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"},{"authorDate":"2016-02-24 17:52:23","commitOrder":48,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2016-02-24 17:52:23","endLine":471,"groupId":"10909","id":96,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/60/8e179aaa892d0fad230a5fc9072925d10506ec.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"N"}],"commitId":"1fbe4cb520dc22f27bf7152018320619d1c3adf7","commitMessage":"@@@More work towards using Charset rather than String internally to reduce the number of calls required to B2CConverter.getCharset() or equivalent during a request.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1793798 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-05-04 21:29:20","modifiedFileCount":"14","status":"M","submitter":"Mark Thomas"},{"authorTime":"2017-05-10 16:26:05","codes":[{"authorDate":"2017-05-04 21:29:20","commitOrder":49,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2017-05-04 21:29:20","endLine":590,"groupId":"7971","id":97,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/7b/ae2d0182913626fbd54fa80f42c2ab19585141.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"N"},{"authorDate":"2017-05-10 16:26:05","commitOrder":49,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2017-05-10 16:26:05","endLine":468,"groupId":"0","id":98,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c7/64cce8b066de2c7fdd13c2e63f024ea33d6a2a.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        Iterator<Map.Entry<String,String>> iterator =\n            sortedHostNamesMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,String> entry = iterator.next();\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"a76669c43c225a0cd61f69691ff087203d947e94","commitMessage":"@@@Use foreach loops instead of while+iterator loops\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1794684 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-05-10 16:26:05","modifiedFileCount":"55","status":"M","submitter":"Emmanuel Bourg"},{"authorTime":"2017-10-18 18:39:54","codes":[{"authorDate":"2017-10-18 18:39:54","commitOrder":50,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2017-10-18 18:39:54","endLine":590,"groupId":"1145","id":99,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/7efb08cfc7ba15e3968f864de7e20e660f2436.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + RequestUtil.filter(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = RequestUtil.filter(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = RequestUtil.filter(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"},{"authorDate":"2017-10-18 18:39:54","commitOrder":50,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2017-10-18 18:39:54","endLine":468,"groupId":"0","id":100,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9b/b0d3bc30929740b3e22f5e0d02324feaadfdc3.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = RequestUtil.filter(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = RequestUtil.filter(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = RequestUtil.filter(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"17fdaef177202e09e5e111cbaa3f45c15f167142","commitMessage":"@@@Refactor XML and HTML escaping to a single location\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1812489 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-10-18 18:39:54","modifiedFileCount":"20","status":"M","submitter":"Mark Thomas"},{"authorTime":"2017-10-18 18:39:54","codes":[{"authorDate":"2017-12-13 18:42:15","commitOrder":51,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[12];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2017-12-13 18:42:15","endLine":597,"groupId":"1145","id":101,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c8/066fc5d6aa7e78e5ea81b49f559b9f1919b2e8.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"M"},{"authorDate":"2017-10-18 18:39:54","commitOrder":51,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2017-10-18 18:39:54","endLine":468,"groupId":"0","id":102,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9b/b0d3bc30929740b3e22f5e0d02324feaadfdc3.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"N"}],"commitId":"f6baef98988a1f98392df287cc6ea7ed763d60b1","commitMessage":"@@@Partial fix for https://bz.apache.org/bugzilla/show_bug.cgi?id=61566\nCertificate chains are now exposed for virtual hosts configured using a Java key store.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1817997 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-12-13 18:42:15","modifiedFileCount":"5","status":"M","submitter":"Mark Thomas"},{"authorTime":"2017-10-18 18:39:54","codes":[{"authorDate":"2017-12-13 19:17:04","commitOrder":52,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2017-12-13 19:17:04","endLine":604,"groupId":"1145","id":103,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6e/7784b26147eb0cdb444f3c02dd3b6da655e37d.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[12];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"},{"authorDate":"2017-10-18 18:39:54","commitOrder":52,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2017-10-18 18:39:54","endLine":468,"groupId":"0","id":104,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9b/b0d3bc30929740b3e22f5e0d02324feaadfdc3.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"N"}],"commitId":"345b916687b946bb448a76dc7cd9ac95b67ffbae","commitMessage":"@@@Partial fix for https://bz.apache.org/bugzilla/show_bug.cgi?id=61566\nTrusted certs are now exposed for virtual hosts configured using a Java key store.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1817999 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-12-13 19:17:04","modifiedFileCount":"5","status":"M","submitter":"Mark Thomas"},{"authorTime":"2017-10-18 18:39:54","codes":[{"authorDate":"2017-12-14 21:41:03","commitOrder":53,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2017-12-14 21:41:03","endLine":617,"groupId":"1145","id":105,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/48/3d9d85e8d1af54f78e784ff497a0fc1ee4835b.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"},{"authorDate":"2017-10-18 18:39:54","commitOrder":53,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2017-10-18 18:39:54","endLine":468,"groupId":"0","id":106,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9b/b0d3bc30929740b3e22f5e0d02324feaadfdc3.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"N"}],"commitId":"0f8e4ddac4efa2dc30956a5a3b9294e59ad570cd","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61565\nAdd TLS config reload to Manager app\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1818127 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-12-14 21:41:03","modifiedFileCount":"3","status":"M","submitter":"Mark Thomas"},{"authorTime":"2017-10-18 18:39:54","codes":[{"authorDate":"2018-03-01 00:02:22","commitOrder":54,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployVersion\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[7] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2018-03-01 00:02:22","endLine":618,"groupId":"4529","id":107,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/8f/46214f1daa78963f1d2125c6d23a6628d7a84f.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"},{"authorDate":"2017-10-18 18:39:54","commitOrder":54,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2017-10-18 18:39:54","endLine":468,"groupId":"0","id":108,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9b/b0d3bc30929740b3e22f5e0d02324feaadfdc3.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"N"}],"commitId":"d130c4062d22f9d6b22a40baee60104e708dc1fe","commitMessage":"@@@Add support for specifying the application version when deploying an application via the Manager application HTML interface.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1825579 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-03-01 00:02:22","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2019-02-04 22:02:18","codes":[{"authorDate":"2018-03-01 00:02:22","commitOrder":55,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployVersion\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[7] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2018-03-01 00:02:22","endLine":618,"groupId":"4529","id":109,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/8f/46214f1daa78963f1d2125c6d23a6628d7a84f.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployVersion\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[7] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"N"},{"authorDate":"2019-02-04 22:02:18","commitOrder":55,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n        String hostThis =\n            smClient.getString(\"htmlHostManagerServlet.hostThis\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[5];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                args[4] = hostThis;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2019-02-04 22:02:18","endLine":471,"groupId":"3660","id":110,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/5f/4027a2ca9cf72d61c9cbc83b3a5fbc5b5eb152.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[4];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"91c0ba66f517f69ef1acf3803ff22a404adee6ff","commitMessage":"@@@Use client's preferred language for the Server Status page of the Manager web application.\nReview and fix several cases when the client's language preference was not respected in Manager and Host Manager web applications.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1852916 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2019-02-04 22:02:18","modifiedFileCount":"5","status":"M","submitter":"Konstantin Kolinko"},{"authorTime":"2019-02-16 17:45:00","codes":[{"authorDate":"2019-02-16 17:45:00","commitOrder":56,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \r\n                        \"<a href=\\\"\"\n                        + URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8)\n                        + \"\\\" \" + Constants.REL_EXTERNAL + \">\"\n                        + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployVersion\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[7] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2019-02-16 17:45:00","endLine":625,"groupId":"3282","id":111,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fa/ab38531fd26624ce52385e2f0c8f16759504e3.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \"<a href=\\\"\" +\n                        URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8) +\n                        \"\\\">\" + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployVersion\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[7] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"},{"authorDate":"2019-02-16 17:45:00","commitOrder":56,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n        String hostThis =\n            smClient.getString(\"htmlHostManagerServlet.hostThis\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = \r\n                        Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[5];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                args[4] = hostThis;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2019-02-16 17:45:00","endLine":472,"groupId":"3660","id":112,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/bb/a31597b3ded01ac5b99d2e2d67bd388d0e4225.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = response.encodeURL\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n        String hostThis =\n            smClient.getString(\"htmlHostManagerServlet.hostThis\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[5];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                args[4] = hostThis;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"3bd6f80ebe15d96ea5e2270b4b55c88b6094d734","commitMessage":"@@@Do not add CSRF nonce parameter and suppress Referer header for external links in Manager and Host Manager web applications.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1853693 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2019-02-16 17:45:00","modifiedFileCount":"5","status":"M","submitter":"Konstantin Kolinko"},{"authorTime":"2020-04-23 05:49:33","codes":[{"authorDate":"2019-02-16 17:45:00","commitOrder":57,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \r\n                        \"<a href=\\\"\"\n                        + URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8)\n                        + \"\\\" \" + Constants.REL_EXTERNAL + \">\"\n                        + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployVersion\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[7] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2019-02-16 17:45:00","endLine":625,"groupId":"3282","id":113,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fa/ab38531fd26624ce52385e2f0c8f16759504e3.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \r\n                        \"<a href=\\\"\"\n                        + URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8)\n                        + \"\\\" \" + Constants.REL_EXTERNAL + \">\"\n                        + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployVersion\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[7] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"N"},{"authorDate":"2020-04-23 05:49:33","commitOrder":57,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (String displayPath : hostNames) {\n            sortedHostNamesMap.put(displayPath, displayPath);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n        String hostThis =\n            smClient.getString(\"htmlHostManagerServlet.hostThis\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = \r\n                        Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[5];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                args[4] = hostThis;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2020-05-04 15:18:37","endLine":471,"groupId":"3660","id":114,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1f/f22e01d3df6ae9cb260b868b2ebd8503564f3d.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (int i = 0; i < hostNames.length; i++) {\n            String displayPath = hostNames[i];\n            sortedHostNamesMap.put(displayPath, hostNames[i]);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n        String hostThis =\n            smClient.getString(\"htmlHostManagerServlet.hostThis\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = \r\n                        Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[5];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                args[4] = hostThis;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"af4ecdfe038f1b4bf3e8ce880385b6e095956912","commitMessage":"@@@Replace indexed for loops and iterator while with foreach\n","date":"2020-05-04 15:18:37","modifiedFileCount":"197","status":"M","submitter":"Lars Grefer"},{"authorTime":"2020-05-02 06:13:26","codes":[{"authorDate":"2019-02-16 17:45:00","commitOrder":58,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \r\n                        \"<a href=\\\"\"\n                        + URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8)\n                        + \"\\\" \" + Constants.REL_EXTERNAL + \">\"\n                        + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployVersion\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[7] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2019-02-16 17:45:00","endLine":625,"groupId":"3282","id":115,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fa/ab38531fd26624ce52385e2f0c8f16759504e3.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \r\n                        \"<a href=\\\"\"\n                        + URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8)\n                        + \"\\\" \" + Constants.REL_EXTERNAL + \">\"\n                        + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployVersion\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[7] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"N"},{"authorDate":"2020-05-02 06:13:26","commitOrder":58,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++) {\n            hostNames[i] = children[i].getName();\n        }\n\n        SortedSet<String> sortedHostNames = new TreeSet<>();\n        sortedHostNames.addAll(Arrays.asList(hostNames));\n\n        String hostsStart = smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n        String hostThis = smClient.getString(\"htmlHostManagerServlet.hostThis\");\n\n        for (String hostName : sortedHostNames) {\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = \r\n                        Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[5];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                args[4] = hostThis;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2020-05-04 15:19:05","endLine":465,"groupId":"3660","id":116,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6d/f9516f04f6fa8d732b6d7f9d2afd642d129411.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            hostNames[i] = children[i].getName();\n\n        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();\n\n        for (String displayPath : hostNames) {\n            sortedHostNamesMap.put(displayPath, displayPath);\n        }\n\n        String hostsStart =\n            smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop =\n            smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove =\n            smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n        String hostThis =\n            smClient.getString(\"htmlHostManagerServlet.hostThis\");\n\n        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {\n            String hostName = entry.getKey();\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = \r\n                        Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[5];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                args[4] = hostThis;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"f3c9fdd40bdbc3dc22b512596954e2bc6d424d5a","commitMessage":"@@@Additional clean-up after enhanced for loop changes","date":"2020-05-04 15:19:05","modifiedFileCount":"44","status":"M","submitter":"Mark Thomas"},{"authorTime":"2020-08-17 02:05:05","codes":[{"authorDate":"2020-08-17 02:05:05","commitOrder":59,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n        \n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n\n        \r\n        writer.print(MessageFormat.format(\n            Constants.HTML_HEADER_SECTION, args\n        ));\n\n        \r\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \r\n                        \"<a href=\\\"\"\n                        + URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8)\n                        + \"\\\" \" + Constants.REL_EXTERNAL + \">\"\n                        + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployVersion\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[7] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2020-08-17 02:05:05","endLine":628,"groupId":"3282","id":117,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d8/aff7b6188016f19d3c995f3b1e5cf9be7d08bb.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \r\n                        \"<a href=\\\"\"\n                        + URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8)\n                        + \"\\\" \" + Constants.REL_EXTERNAL + \">\"\n                        + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployVersion\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[7] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"},{"authorDate":"2020-08-17 02:05:05","commitOrder":59,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        \n        \r\n        writer.print(MessageFormat.format(\n            org.apache.catalina.manager.Constants.HTML_HEADER_SECTION, args\n        ));\n\n        \r\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++) {\n            hostNames[i] = children[i].getName();\n        }\n\n        SortedSet<String> sortedHostNames = new TreeSet<>();\n        sortedHostNames.addAll(Arrays.asList(hostNames));\n\n        String hostsStart = smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n        String hostThis = smClient.getString(\"htmlHostManagerServlet.hostThis\");\n\n        for (String hostName : sortedHostNames) {\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = \r\n                        Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[5];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                args[4] = hostThis;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2020-08-17 02:05:05","endLine":468,"groupId":"3660","id":118,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/20/23c33ea0ba6c32a6dee3d31a80bf321086bc5d.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        \r\n        writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);\n\n        \r\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++) {\n            hostNames[i] = children[i].getName();\n        }\n\n        SortedSet<String> sortedHostNames = new TreeSet<>();\n        sortedHostNames.addAll(Arrays.asList(hostNames));\n\n        String hostsStart = smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n        String hostThis = smClient.getString(\"htmlHostManagerServlet.hostThis\");\n\n        for (String hostName : sortedHostNames) {\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = \r\n                        Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[5];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                args[4] = hostThis;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"9c5d2e3b633fdb651bc9f11db4aac97ad3ad4df2","commitMessage":"@@@Extracted CSS styles to external file for better code mainenance\n\nAlso replaced gif logo with svg\n","date":"2020-08-17 02:05:05","modifiedFileCount":"4","status":"M","submitter":"Igal Sapir"},{"authorTime":"2020-08-17 02:05:05","codes":[{"authorDate":"2020-09-15 17:20:58","commitOrder":60,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n\n        \r\n        writer.print(MessageFormat.format(\n            Constants.HTML_HEADER_SECTION, args\n        ));\n\n        \r\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                final String webappVersion = ctxt.getWebappVersion();\n                if (webappVersion != null && webappVersion.length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            webappVersion, StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \r\n                        \"<a href=\\\"\"\n                        + URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8)\n                        + \"\\\" \" + Constants.REL_EXTERNAL + \">\"\n                        + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (webappVersion == null || webappVersion.isEmpty()) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(webappVersion);\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployVersion\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[7] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2020-09-15 17:20:58","endLine":629,"groupId":"3282","id":119,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/53/e1ebc9177aae06fe2de256d9cfec8952edc927.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n\n        \r\n        writer.print(MessageFormat.format(\n            Constants.HTML_HEADER_SECTION, args\n        ));\n\n        \r\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                if (ctxt.getWebappVersion().length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \r\n                        \"<a href=\\\"\"\n                        + URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8)\n                        + \"\\\" \" + Constants.REL_EXTERNAL + \">\"\n                        + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (\"\".equals(ctxt.getWebappVersion())) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployVersion\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[7] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"},{"authorDate":"2020-08-17 02:05:05","commitOrder":60,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        \n        \r\n        writer.print(MessageFormat.format(\n            org.apache.catalina.manager.Constants.HTML_HEADER_SECTION, args\n        ));\n\n        \r\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++) {\n            hostNames[i] = children[i].getName();\n        }\n\n        SortedSet<String> sortedHostNames = new TreeSet<>();\n        sortedHostNames.addAll(Arrays.asList(hostNames));\n\n        String hostsStart = smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n        String hostThis = smClient.getString(\"htmlHostManagerServlet.hostThis\");\n\n        for (String hostName : sortedHostNames) {\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = \r\n                        Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[5];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                args[4] = hostThis;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2020-08-17 02:05:05","endLine":468,"groupId":"3660","id":120,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/20/23c33ea0ba6c32a6dee3d31a80bf321086bc5d.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        \n        \r\n        writer.print(MessageFormat.format(\n            org.apache.catalina.manager.Constants.HTML_HEADER_SECTION, args\n        ));\n\n        \r\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++) {\n            hostNames[i] = children[i].getName();\n        }\n\n        SortedSet<String> sortedHostNames = new TreeSet<>();\n        sortedHostNames.addAll(Arrays.asList(hostNames));\n\n        String hostsStart = smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n        String hostThis = smClient.getString(\"htmlHostManagerServlet.hostThis\");\n\n        for (String hostName : sortedHostNames) {\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = \r\n                        Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[5];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                args[4] = hostThis;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"N"}],"commitId":"6053839acc97b4f3eb9f286c5633d0c1dc2e9c09","commitMessage":"@@@Merge pull request #356 from martin-g/improvement/use-string-isempty\n\nMicro optimization: replace \"\".equals(a) with a.isEmpty()","date":"2020-09-15 17:20:58","modifiedFileCount":"30","status":"M","submitter":"Martin Grigorov"},{"authorTime":"2020-08-17 02:05:05","codes":[{"authorDate":"2021-05-26 18:09:29","commitOrder":61,"curCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n\n        \r\n        writer.print(MessageFormat.format(\n            Constants.HTML_HEADER_SECTION, args\n        ));\n\n        \r\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++) {\n            contextNames[i] = children[i].getName();\n        }\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                final String webappVersion = ctxt.getWebappVersion();\n                if (webappVersion != null && webappVersion.length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            webappVersion, StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \r\n                        \"<a href=\\\"\"\n                        + URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8)\n                        + \"\\\" \" + Constants.REL_EXTERNAL + \">\"\n                        + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (webappVersion == null || webappVersion.isEmpty()) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(webappVersion);\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployVersion\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[7] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2021-05-26 18:09:29","endLine":630,"groupId":"10904","id":121,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b1/953d802dcdec6db2f27bdc268929edf7679c2d.src","preCode":"    protected void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1)\n            log(\"list: Listing contexts for virtual host '\" +\n                host.getName() + \"'\");\n\n        PrintWriter writer = response.getWriter();\n\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlManagerServlet.title\");\n\n        \r\n        writer.print(MessageFormat.format(\n            Constants.HTML_HEADER_SECTION, args\n        ));\n\n        \r\n        writer.print(MessageFormat.format\n                     (Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlManagerServlet.helpManager\");\n        args[7] = response.encodeURL\n            (request.getContextPath() + \"/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlManagerServlet.appsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.appsPath\");\n        args[2] = smClient.getString(\"htmlManagerServlet.appsVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.appsName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.appsAvailable\");\n        args[5] = smClient.getString(\"htmlManagerServlet.appsSessions\");\n        args[6] = smClient.getString(\"htmlManagerServlet.appsTasks\");\n        writer.print(MessageFormat.format(APPS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container children[] = host.findChildren();\n        String contextNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++)\n            contextNames[i] = children[i].getName();\n\n        Arrays.sort(contextNames);\n\n        String appsStart = smClient.getString(\"htmlManagerServlet.appsStart\");\n        String appsStop = smClient.getString(\"htmlManagerServlet.appsStop\");\n        String appsReload = smClient.getString(\"htmlManagerServlet.appsReload\");\n        String appsUndeploy =\n            smClient.getString(\"htmlManagerServlet.appsUndeploy\");\n        String appsExpire = smClient.getString(\"htmlManagerServlet.appsExpire\");\n        String noVersion = \"<i>\" +\n            smClient.getString(\"htmlManagerServlet.noVersion\") + \"</i>\";\n\n        boolean isHighlighted = true;\n        boolean isDeployed = true;\n        String highlightColor = null;\n\n        for (String contextName : contextNames) {\n            Context ctxt = (Context) host.findChild(contextName);\n\n            if (ctxt != null) {\n                \r\n                isHighlighted = !isHighlighted;\n                if(isHighlighted) {\n                    highlightColor = \"#C3F3C3\";\n                } else {\n                    highlightColor = \"#FFFFFF\";\n                }\n\n                String contextPath = ctxt.getPath();\n                String displayPath = contextPath;\n                if (displayPath.equals(\"\")) {\n                    displayPath = \"/\";\n                }\n\n                StringBuilder tmp = new StringBuilder();\n                tmp.append(\"path=\");\n                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));\n                final String webappVersion = ctxt.getWebappVersion();\n                if (webappVersion != null && webappVersion.length() > 0) {\n                    tmp.append(\"&version=\");\n                    tmp.append(URLEncoder.DEFAULT.encode(\n                            webappVersion, StandardCharsets.UTF_8));\n                }\n                String pathVersion = tmp.toString();\n\n                try {\n                    isDeployed = isDeployed(contextName);\n                } catch (Exception e) {\n                    \r\n                    isDeployed = false;\n                }\n\n                args = new Object[7];\n                args[0] = \r\n                        \"<a href=\\\"\"\n                        + URLEncoder.DEFAULT.encode(contextPath + \"/\", StandardCharsets.UTF_8)\n                        + \"\\\" \" + Constants.REL_EXTERNAL + \">\"\n                        + Escape.htmlElementContent(displayPath) + \"</a>\";\n                if (webappVersion == null || webappVersion.isEmpty()) {\n                    args[1] = noVersion;\n                } else {\n                    args[1] = Escape.htmlElementContent(webappVersion);\n                }\n                if (ctxt.getDisplayName() == null) {\n                    args[2] = \"&nbsp;\";\n                } else {\n                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());\n                }\n                args[3] = Boolean.valueOf(ctxt.getState().isAvailable());\n                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +\n                     \"/html/sessions?\" + pathVersion));\n                Manager manager = ctxt.getManager();\n                if (manager instanceof DistributedManager && showProxySessions) {\n                    args[5] = Integer.valueOf(\n                            ((DistributedManager)manager).getActiveSessionsFull());\n                } else if (manager != null){\n                    args[5] = Integer.valueOf(manager.getActiveSessions());\n                } else {\n                    args[5] = Integer.valueOf(0);\n                }\n\n                args[6] = highlightColor;\n\n                writer.print\n                    (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[14];\n                args[0] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/start?\" + pathVersion));\n                args[1] = appsStart;\n                args[2] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/stop?\" + pathVersion));\n                args[3] = appsStop;\n                args[4] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/reload?\" + pathVersion));\n                args[5] = appsReload;\n                args[6] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/undeploy?\" + pathVersion));\n                args[7] = appsUndeploy;\n                args[8] = Escape.htmlElementContent(response.encodeURL(request\n                        .getContextPath() + \"/html/expire?\" + pathVersion));\n                args[9] = appsExpire;\n                args[10] = smClient.getString(\"htmlManagerServlet.expire.explain\");\n                if (manager == null) {\n                    args[11] = smClient.getString(\"htmlManagerServlet.noManager\");\n                } else {\n                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());\n                }\n                args[12] = smClient.getString(\"htmlManagerServlet.expire.unit\");\n                args[13] = highlightColor;\n\n                if (ctxt.getName().equals(this.context.getName())) {\n                    writer.print(MessageFormat.format(\n                        MANAGER_APP_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (ctxt.getState().isAvailable() && !isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else if (!ctxt.getState().isAvailable() && isDeployed) {\n                    writer.print(MessageFormat.format(\n                        STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                        STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args));\n                }\n\n            }\n        }\n\n        \r\n        args = new Object[8];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.deployServer\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/deploy\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployPath\");\n        args[4] = smClient.getString(\"htmlManagerServlet.deployVersion\");\n        args[5] = smClient.getString(\"htmlManagerServlet.deployConfig\");\n        args[6] = smClient.getString(\"htmlManagerServlet.deployWar\");\n        args[7] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(DEPLOY_SECTION, args));\n\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlManagerServlet.deployUpload\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/upload\");\n        args[2] = smClient.getString(\"htmlManagerServlet.deployUploadFile\");\n        args[3] = smClient.getString(\"htmlManagerServlet.deployButton\");\n        writer.print(MessageFormat.format(UPLOAD_SECTION, args));\n\n        \r\n        args = new Object[5];\n        args[0] = smClient.getString(\"htmlManagerServlet.configTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.configSslReloadTitle\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/sslReload\");\n        args[3] = smClient.getString(\"htmlManagerServlet.configSslHostName\");\n        args[4] = smClient.getString(\"htmlManagerServlet.configReloadButton\");\n        writer.print(MessageFormat.format(CONFIG_SECTION, args));\n\n        \r\n        args = new Object[15];\n        args[0] = smClient.getString(\"htmlManagerServlet.diagnosticsTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.diagnosticsLeak\");\n        args[2] = response.encodeURL(\n                request.getContextPath() + \"/html/findleaks\");\n        args[3] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakWarning\");\n        args[4] = smClient.getString(\"htmlManagerServlet.diagnosticsLeakButton\");\n        args[5] = smClient.getString(\"htmlManagerServlet.diagnosticsSsl\");\n        args[6] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCiphers\");\n        args[7] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherButton\");\n        args[8] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCipherText\");\n        args[9] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorCerts\");\n        args[10] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsButton\");\n        args[11] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorCertsText\");\n        args[12] = response.encodeURL(\n                request.getContextPath() + \"/html/sslConnectorTrustedCerts\");\n        args[13] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsButton\");\n        args[14] = smClient.getString(\"htmlManagerServlet.diagnosticsSslConnectorTrustedCertsText\");\n        writer.print(MessageFormat.format(DIAGNOSTICS_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlManagerServlet.serverOSArch\");\n        args[7] = smClient.getString(\"htmlManagerServlet.serverHostname\");\n        args[8] = smClient.getString(\"htmlManagerServlet.serverIPAddress\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[8];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        try {\n            InetAddress address = InetAddress.getLocalHost();\n            args[6] = address.getHostName();\n            args[7] = address.getHostAddress();\n        } catch (UnknownHostException e) {\n            args[6] = \"-\";\n            args[7] = \"-\";\n        }\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/HTMLManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"M"},{"authorDate":"2020-08-17 02:05:05","commitOrder":61,"curCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        \n        \r\n        writer.print(MessageFormat.format(\n            org.apache.catalina.manager.Constants.HTML_HEADER_SECTION, args\n        ));\n\n        \r\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++) {\n            hostNames[i] = children[i].getName();\n        }\n\n        SortedSet<String> sortedHostNames = new TreeSet<>();\n        sortedHostNames.addAll(Arrays.asList(hostNames));\n\n        String hostsStart = smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n        String hostThis = smClient.getString(\"htmlHostManagerServlet.hostThis\");\n\n        for (String hostName : sortedHostNames) {\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = \r\n                        Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[5];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                args[4] = hostThis;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","date":"2020-08-17 02:05:05","endLine":468,"groupId":"10904","id":122,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(HttpServletRequestrequest@HttpServletResponseresponse@Stringmessage@StringManagersmClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/20/23c33ea0ba6c32a6dee3d31a80bf321086bc5d.src","preCode":"    public void list(HttpServletRequest request,\n                     HttpServletResponse response,\n                     String message,\n                     StringManager smClient) throws IOException {\n\n        if (debug >= 1) {\n            log(sm.getString(\"hostManagerServlet.list\", engine.getName()));\n        }\n\n        PrintWriter writer = response.getWriter();\n\n        Object[] args = new Object[2];\n        args[0] = request.getContextPath();\n        args[1] = smClient.getString(\"htmlHostManagerServlet.title\");\n        \n        \r\n        writer.print(MessageFormat.format(\n            org.apache.catalina.manager.Constants.HTML_HEADER_SECTION, args\n        ));\n\n        \r\n        writer.print(MessageFormat.format(\n                org.apache.catalina.manager.Constants.BODY_HEADER_SECTION, args));\n\n        \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.messageLabel\");\n        if (message == null || message.length() == 0) {\n            args[1] = \"OK\";\n        } else {\n            args[1] = Escape.htmlElementContent(message);\n        }\n        writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));\n\n        \r\n        args = new Object[9];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.manager\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/list\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.list\");\n        args[3] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpHtmlManagerFile\"));\n        args[4] = smClient.getString(\"htmlHostManagerServlet.helpHtmlManager\");\n        args[5] = \r\n            (request.getContextPath() + \"/\" +\n             smClient.getString(\"htmlHostManagerServlet.helpManagerFile\"));\n        args[6] = smClient.getString(\"htmlHostManagerServlet.helpManager\");\n        args[7] = response.encodeURL(\"/manager/status\");\n        args[8] = smClient.getString(\"statusServlet.title\");\n        writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));\n\n         \r\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.hostName\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.hostAliases\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.hostTasks\");\n        writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));\n\n        \r\n        \r\n        Container[] children = engine.findChildren();\n        String hostNames[] = new String[children.length];\n        for (int i = 0; i < children.length; i++) {\n            hostNames[i] = children[i].getName();\n        }\n\n        SortedSet<String> sortedHostNames = new TreeSet<>();\n        sortedHostNames.addAll(Arrays.asList(hostNames));\n\n        String hostsStart = smClient.getString(\"htmlHostManagerServlet.hostsStart\");\n        String hostsStop = smClient.getString(\"htmlHostManagerServlet.hostsStop\");\n        String hostsRemove = smClient.getString(\"htmlHostManagerServlet.hostsRemove\");\n        String hostThis = smClient.getString(\"htmlHostManagerServlet.hostThis\");\n\n        for (String hostName : sortedHostNames) {\n            Host host = (Host) engine.findChild(hostName);\n\n            if (host != null ) {\n                args = new Object[2];\n                args[0] = \r\n                        Escape.htmlElementContent(hostName);\n                String[] aliases = host.findAliases();\n                StringBuilder buf = new StringBuilder();\n                if (aliases.length > 0) {\n                    buf.append(aliases[0]);\n                    for (int j = 1; j < aliases.length; j++) {\n                        buf.append(\", \").append(aliases[j]);\n                    }\n                }\n\n                if (buf.length() == 0) {\n                    buf.append(\"&nbsp;\");\n                    args[1] = buf.toString();\n                } else {\n                    args[1] = Escape.htmlElementContent(buf.toString());\n                }\n\n                writer.print\n                    (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));\n\n                args = new Object[5];\n                if (host.getState().isAvailable()) {\n                    args[0] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/stop?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStop;\n                } else {\n                    args[0] = response.encodeURL\n                        (request.getContextPath() +\n                         \"/html/start?name=\" +\n                         URLEncoder.encode(hostName, \"UTF-8\"));\n                    args[1] = hostsStart;\n                }\n                args[2] = response.encodeURL\n                    (request.getContextPath() +\n                     \"/html/remove?name=\" +\n                     URLEncoder.encode(hostName, \"UTF-8\"));\n                args[3] = hostsRemove;\n                args[4] = hostThis;\n                if (host == this.installedHost) {\n                    writer.print(MessageFormat.format(\n                            MANAGER_HOST_ROW_BUTTON_SECTION, args));\n                } else {\n                    writer.print(MessageFormat.format(\n                            HOSTS_ROW_BUTTON_SECTION, args));\n                }\n            }\n        }\n\n        \r\n        args = new Object[6];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.addHost\");\n        args[2] = response.encodeURL(request.getContextPath() + \"/html/add\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.addName\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.addAliases\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.addAppBase\");\n        writer.print(MessageFormat.format(ADD_SECTION_START, args));\n\n        args = new Object[3];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addAutoDeploy\");\n        args[1] = \"autoDeploy\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\n                \"htmlHostManagerServlet.addDeployOnStartup\");\n        args[1] = \"deployOnStartup\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addDeployXML\");\n        args[1] = \"deployXML\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addUnpackWARs\");\n        args[1] = \"unpackWARs\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addManager\");\n        args[1] = \"manager\";\n        args[2] = \"checked\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addCopyXML\");\n        args[1] = \"copyXML\";\n        args[2] = \"\";\n        writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));\n\n        args = new Object[1];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.addButton\");\n        writer.print(MessageFormat.format(ADD_SECTION_END, args));\n\n        \r\n        args = new Object[4];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.persistTitle\");\n        args[1] = response.encodeURL(request.getContextPath() + \"/html/persist\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.persistAllButton\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.persistAll\");\n        writer.print(MessageFormat.format(PERSIST_SECTION, args));\n\n        \r\n        args = new Object[7];\n        args[0] = smClient.getString(\"htmlHostManagerServlet.serverTitle\");\n        args[1] = smClient.getString(\"htmlHostManagerServlet.serverVersion\");\n        args[2] = smClient.getString(\"htmlHostManagerServlet.serverJVMVersion\");\n        args[3] = smClient.getString(\"htmlHostManagerServlet.serverJVMVendor\");\n        args[4] = smClient.getString(\"htmlHostManagerServlet.serverOSName\");\n        args[5] = smClient.getString(\"htmlHostManagerServlet.serverOSVersion\");\n        args[6] = smClient.getString(\"htmlHostManagerServlet.serverOSArch\");\n        writer.print(MessageFormat.format\n                     (Constants.SERVER_HEADER_SECTION, args));\n\n        \r\n        args = new Object[6];\n        args[0] = ServerInfo.getServerInfo();\n        args[1] = System.getProperty(\"java.runtime.version\");\n        args[2] = System.getProperty(\"java.vm.vendor\");\n        args[3] = System.getProperty(\"os.name\");\n        args[4] = System.getProperty(\"os.version\");\n        args[5] = System.getProperty(\"os.arch\");\n        writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));\n\n        \r\n        writer.print(Constants.HTML_TAIL_SECTION);\n\n        \r\n        writer.flush();\n        writer.close();\n    }\n","realPath":"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"N"}],"commitId":"6a667943c5da6b5d61ac6bec1d7c9de061e3217c","commitMessage":"@@@Code clean-up. Add braces for clarity.\n\nClean-up commit primarily to trigger CI build to test buildbot renaming","date":"2021-05-26 18:09:29","modifiedFileCount":"44","status":"M","submitter":"Mark Thomas"}]
