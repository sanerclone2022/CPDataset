[{"authorTime":"2011-03-31 05:40:59","codes":[{"authorDate":"2011-03-31 05:40:59","commitOrder":1,"curCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (FairnessTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=FairnessTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        if (query!=null) {\n                            Statement st = con.createStatement();\n                            ResultSet rs = st.executeQuery(query);\n                            while (rs.next()) {\n                            }\n                            rs.close();\n                            st.close();\n                        }\n                        try { \n                            if (FairnessTest.this.sleep>0) sleep(FairnessTest.this.sleep); \n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                FairnessTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+(((float)maxwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+(((float)cmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+(((float)totalcmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+(((float)totalcmax)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+(((float)totalruntime)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","date":"2011-03-31 05:40:59","endLine":280,"groupId":"14750","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b2/96eeefa5f0f72bbd6e63833961bca4bbd6e078.src","preCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (FairnessTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=FairnessTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        if (query!=null) {\n                            Statement st = con.createStatement();\n                            ResultSet rs = st.executeQuery(query);\n                            while (rs.next()) {\n                            }\n                            rs.close();\n                            st.close();\n                        }\n                        try { \n                            if (FairnessTest.this.sleep>0) sleep(FairnessTest.this.sleep); \n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                FairnessTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+(((float)maxwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+(((float)cmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+(((float)totalcmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+(((float)totalcmax)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+(((float)totalruntime)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","realPath":"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/FairnessTest.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"B"},{"authorDate":"2011-03-31 05:40:59","commitOrder":1,"curCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (ConnectCountTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=ConnectCountTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        if (query!=null) {\n                            Statement st = con.createStatement();\n                            ResultSet rs = st.executeQuery(query);\n                            while (rs.next()) {\n                            }\n                            rs.close();\n                            st.close();\n                        }\n                        try { \n                            if (ConnectCountTest.this.sleep>0) sleep(ConnectCountTest.this.sleep); \n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                ConnectCountTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+(((float)maxwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+(((float)cmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+(((float)totalcmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+(((float)totalcmax)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+(((float)totalruntime)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","date":"2011-03-31 05:40:59","endLine":298,"groupId":"14750","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/33/9e1aa49bf9e4ca86a5c5eb8fb2a4cd64ca73d7.src","preCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (ConnectCountTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=ConnectCountTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        if (query!=null) {\n                            Statement st = con.createStatement();\n                            ResultSet rs = st.executeQuery(query);\n                            while (rs.next()) {\n                            }\n                            rs.close();\n                            st.close();\n                        }\n                        try { \n                            if (ConnectCountTest.this.sleep>0) sleep(ConnectCountTest.this.sleep); \n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                ConnectCountTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+(((float)maxwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+(((float)cmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+(((float)totalcmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+(((float)totalcmax)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+(((float)totalruntime)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","realPath":"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/ConnectCountTest.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"B"}],"commitId":"9b48dfd98aecd2b5d2c69dff3472f0a4409f6ffa","commitMessage":"@@@Add in ability to build with Maven\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1087090 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-03-31 05:40:59","modifiedFileCount":"0","status":"B","submitter":"Filip Hanik"},{"authorTime":"2011-09-08 22:37:44","codes":[{"authorDate":"2011-03-31 05:40:59","commitOrder":2,"curCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (FairnessTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=FairnessTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        if (query!=null) {\n                            Statement st = con.createStatement();\n                            ResultSet rs = st.executeQuery(query);\n                            while (rs.next()) {\n                            }\n                            rs.close();\n                            st.close();\n                        }\n                        try { \n                            if (FairnessTest.this.sleep>0) sleep(FairnessTest.this.sleep); \n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                FairnessTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+(((float)maxwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+(((float)cmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+(((float)totalcmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+(((float)totalcmax)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+(((float)totalruntime)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","date":"2011-03-31 05:40:59","endLine":280,"groupId":"14750","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b2/96eeefa5f0f72bbd6e63833961bca4bbd6e078.src","preCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (FairnessTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=FairnessTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        if (query!=null) {\n                            Statement st = con.createStatement();\n                            ResultSet rs = st.executeQuery(query);\n                            while (rs.next()) {\n                            }\n                            rs.close();\n                            st.close();\n                        }\n                        try { \n                            if (FairnessTest.this.sleep>0) sleep(FairnessTest.this.sleep); \n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                FairnessTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+(((float)maxwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+(((float)cmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+(((float)totalcmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+(((float)totalcmax)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+(((float)totalruntime)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","realPath":"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/FairnessTest.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"N"},{"authorDate":"2011-09-08 22:37:44","commitOrder":2,"curCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (ConnectCountTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=ConnectCountTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        if (query!=null) {\n                            Statement st = con.createStatement();\n                            ResultSet rs = st.executeQuery(query);\n                            while (rs.next()) {\n                            }\n                            rs.close();\n                            st.close();\n                        }\n                        try { \n                            if (ConnectCountTest.this.sleep>0) sleep(ConnectCountTest.this.sleep); \n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                ConnectCountTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","date":"2011-09-08 22:37:44","endLine":298,"groupId":"14750","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9d/df8c2330d6f186bfc201d43861ad7c2a1bcc3f.src","preCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (ConnectCountTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=ConnectCountTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        if (query!=null) {\n                            Statement st = con.createStatement();\n                            ResultSet rs = st.executeQuery(query);\n                            while (rs.next()) {\n                            }\n                            rs.close();\n                            st.close();\n                        }\n                        try { \n                            if (ConnectCountTest.this.sleep>0) sleep(ConnectCountTest.this.sleep); \n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                ConnectCountTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+(((float)maxwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+(((float)cmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+(((float)totalcmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+(((float)totalcmax)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+(((float)totalruntime)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","realPath":"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/ConnectCountTest.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"}],"commitId":"3e501cdc05b8ffb4d5ad6c399765dd07cfce551b","commitMessage":"@@@Remove unnecessary casts\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1166717 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-09-08 22:37:44","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-09-08 22:37:44","codes":[{"authorDate":"2011-09-08 23:14:43","commitOrder":3,"curCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (FairnessTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=FairnessTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        if (query!=null) {\n                            Statement st = con.createStatement();\n                            ResultSet rs = st.executeQuery(query);\n                            while (rs.next()) {\n                            }\n                            rs.close();\n                            st.close();\n                        }\n                        try { \n                            if (FairnessTest.this.sleep>0) sleep(FairnessTest.this.sleep); \n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                FairnessTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","date":"2011-09-08 23:14:43","endLine":282,"groupId":"14750","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a5/fe9fafbb81275fd6ab2bf8f1f67984fa406a28.src","preCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (FairnessTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=FairnessTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        if (query!=null) {\n                            Statement st = con.createStatement();\n                            ResultSet rs = st.executeQuery(query);\n                            while (rs.next()) {\n                            }\n                            rs.close();\n                            st.close();\n                        }\n                        try { \n                            if (FairnessTest.this.sleep>0) sleep(FairnessTest.this.sleep); \n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                FairnessTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+(((float)maxwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+(((float)totalwait)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+(((float)cmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+(((float)totalcmax)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+(((float)totalcmax)/1000f/1000f)/(float)nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+(((float)totalruntime)/1000f/1000f)+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","realPath":"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/FairnessTest.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2011-09-08 22:37:44","commitOrder":3,"curCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (ConnectCountTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=ConnectCountTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        if (query!=null) {\n                            Statement st = con.createStatement();\n                            ResultSet rs = st.executeQuery(query);\n                            while (rs.next()) {\n                            }\n                            rs.close();\n                            st.close();\n                        }\n                        try { \n                            if (ConnectCountTest.this.sleep>0) sleep(ConnectCountTest.this.sleep); \n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                ConnectCountTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","date":"2011-09-08 22:37:44","endLine":298,"groupId":"14750","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9d/df8c2330d6f186bfc201d43861ad7c2a1bcc3f.src","preCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (ConnectCountTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=ConnectCountTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        if (query!=null) {\n                            Statement st = con.createStatement();\n                            ResultSet rs = st.executeQuery(query);\n                            while (rs.next()) {\n                            }\n                            rs.close();\n                            st.close();\n                        }\n                        try { \n                            if (ConnectCountTest.this.sleep>0) sleep(ConnectCountTest.this.sleep); \n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                ConnectCountTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","realPath":"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/ConnectCountTest.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"N"}],"commitId":"9b93c31f38fc89bc455738b8bb20e7f69eb09f6b","commitMessage":"@@@Fix remaining Eclipse warnings in jdbc-pool unit tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1166735 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-09-08 23:14:43","modifiedFileCount":"7","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-01-13 05:19:40","codes":[{"authorDate":"2013-01-13 05:19:40","commitOrder":4,"curCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (FairnessTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=FairnessTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        try {\n                            if (FairnessTest.this.sleep>0) sleep(FairnessTest.this.sleep);\n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                FairnessTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","date":"2013-01-13 05:19:40","endLine":271,"groupId":"13922","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/82/725feffa475fb0ec2960b5e13879a66bd5d873.src","preCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (FairnessTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=FairnessTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        if (query!=null) {\n                            Statement st = con.createStatement();\n                            ResultSet rs = st.executeQuery(query);\n                            while (rs.next()) {\n                            }\n                            rs.close();\n                            st.close();\n                        }\n                        try {\n                            if (FairnessTest.this.sleep>0) sleep(FairnessTest.this.sleep);\n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                FairnessTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","realPath":"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/FairnessTest.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2013-01-13 05:19:40","commitOrder":4,"curCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (ConnectCountTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=ConnectCountTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        try {\n                            if (ConnectCountTest.this.sleep>0) sleep(ConnectCountTest.this.sleep);\n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                ConnectCountTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","date":"2013-01-13 05:19:40","endLine":290,"groupId":"13922","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/7a/dd147b666c434816ea8bf95f2f7415cb1072b2.src","preCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (ConnectCountTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=ConnectCountTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        if (query!=null) {\n                            Statement st = con.createStatement();\n                            ResultSet rs = st.executeQuery(query);\n                            while (rs.next()) {\n                            }\n                            rs.close();\n                            st.close();\n                        }\n                        try {\n                            if (ConnectCountTest.this.sleep>0) sleep(ConnectCountTest.this.sleep);\n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                ConnectCountTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","realPath":"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/ConnectCountTest.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"}],"commitId":"913829c1eba1fdee37c71b110dd4a3386dccd30a","commitMessage":"@@@Remove unused code reported by FindBugs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1432516 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-01-13 05:19:40","modifiedFileCount":"3","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2018-03-21 18:10:48","codes":[{"authorDate":"2018-03-21 18:10:48","commitOrder":5,"curCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (FairnessTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=FairnessTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        try {\n                            if (FairnessTest.this.sleep>0) sleep(FairnessTest.this.sleep);\n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (RuntimeException | SQLException | ExecutionException | InterruptedException x) {\n                x.printStackTrace();\n            } finally {\n                FairnessTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","date":"2018-03-21 18:10:48","endLine":262,"groupId":"2098","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/bb/2cc8b860f67726bd78b40a62c671263b41c527.src","preCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (FairnessTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=FairnessTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        try {\n                            if (FairnessTest.this.sleep>0) sleep(FairnessTest.this.sleep);\n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                FairnessTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","realPath":"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/FairnessTest.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2018-03-21 18:10:48","commitOrder":5,"curCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (ConnectCountTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=ConnectCountTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        try {\n                            if (ConnectCountTest.this.sleep>0) sleep(ConnectCountTest.this.sleep);\n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (RuntimeException | SQLException | ExecutionException | InterruptedException x) {\n                x.printStackTrace();\n            } finally {\n                ConnectCountTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","date":"2018-03-21 18:10:48","endLine":280,"groupId":"2098","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/8e/240f91e2bb48cc1ba0bc1bd30c3f526e0995a4.src","preCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (ConnectCountTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=ConnectCountTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        try {\n                            if (ConnectCountTest.this.sleep>0) sleep(ConnectCountTest.this.sleep);\n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (Exception x) {\n                x.printStackTrace();\n            } finally {\n                ConnectCountTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","realPath":"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/ConnectCountTest.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"}],"commitId":"1289a735c1ec0507a71388eea58b97f45bad31ea","commitMessage":"@@@SpotBugs\nAvoid catching Exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1827399 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-03-21 18:10:48","modifiedFileCount":"10","status":"M","submitter":"Mark Thomas"},{"authorTime":"2021-05-27 06:41:15","codes":[{"authorDate":"2021-05-27 06:41:15","commitOrder":6,"curCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (FairnessTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=FairnessTest.this.complete) {\n                      break;\n                    }\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        try {\n                            if (FairnessTest.this.sleep>0) {\n                              sleep(FairnessTest.this.sleep);\n                            }\n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) {\n                          try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        }\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (RuntimeException | SQLException | ExecutionException | InterruptedException x) {\n                x.printStackTrace();\n            } finally {\n                FairnessTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","date":"2021-05-27 06:41:15","endLine":269,"groupId":"1051","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e3/3310442beef1fcbb66dc43063319fd5ae10133.src","preCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (FairnessTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=FairnessTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        try {\n                            if (FairnessTest.this.sleep>0) sleep(FairnessTest.this.sleep);\n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (RuntimeException | SQLException | ExecutionException | InterruptedException x) {\n                x.printStackTrace();\n            } finally {\n                FairnessTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","realPath":"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/FairnessTest.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2021-05-27 06:41:15","commitOrder":6,"curCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (ConnectCountTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=ConnectCountTest.this.complete) {\n                      break;\n                    }\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        try {\n                            if (ConnectCountTest.this.sleep>0) {\n                              sleep(ConnectCountTest.this.sleep);\n                            }\n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) {\n                          try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        }\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (RuntimeException | SQLException | ExecutionException | InterruptedException x) {\n                x.printStackTrace();\n            } finally {\n                ConnectCountTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","date":"2021-05-27 06:41:15","endLine":287,"groupId":"1051","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/48/059aa54ded3dde9e3d9fa59c98b6d4c6ad2317.src","preCode":"        public void run() {\n            try {\n                long now = System.currentTimeMillis();\n                while (ConnectCountTest.this.run) {\n                    if ((System.currentTimeMillis()-now)>=ConnectCountTest.this.complete) break;\n                    long start = System.nanoTime();\n                    Connection con = null;\n                    try {\n                        if (async) {\n                            Future<Connection> cf = ((DataSourceProxy)d).getConnectionAsync();\n                            con  = cf.get();\n                        } else {\n                            con = d.getConnection();\n                        }\n                        long delta = System.nanoTime() - start;\n                        totalwait += delta;\n                        maxwait = Math.max(delta, maxwait);\n                        minwait = Math.min(delta, minwait);\n                        nroffetch++;\n                        try {\n                            if (ConnectCountTest.this.sleep>0) sleep(ConnectCountTest.this.sleep);\n                        } catch (InterruptedException x) {\n                            interrupted();\n                        }\n                    } finally {\n                        long cstart = System.nanoTime();\n                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}\n                        long cdelta = System.nanoTime() - cstart;\n                        totalcmax += cdelta;\n                        cmax = Math.max(cdelta, cmax);\n                    }\n                    totalruntime+=(System.nanoTime()-start);\n                }\n\n            } catch (RuntimeException | SQLException | ExecutionException | InterruptedException x) {\n                x.printStackTrace();\n            } finally {\n                ConnectCountTest.this.latch.countDown();\n            }\n            if (System.getProperty(\"print-thread-stats\")!=null) {\n                System.out.println(\"[\"+getName()+\"] \"+\n                    \"\\n\\tMax time to retrieve connection:\"+maxwait/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to retrieve connection:\"+totalwait/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to retrieve connection:\"+totalwait/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tMax time to close connection:\"+cmax/1000000f+\" ms.\"+\n                    \"\\n\\tTotal time to close connection:\"+totalcmax/1000000f+\" ms.\"+\n                    \"\\n\\tAverage time to close connection:\"+totalcmax/1000000f/nroffetch+\" ms.\"+\n                    \"\\n\\tRun time:\"+totalruntime/1000000f+\" ms.\"+\n                    \"\\n\\tNr of fetch:\"+nroffetch);\n            }\n        }\n","realPath":"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/ConnectCountTest.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"bf09aa74650461b433ae6b52418e0726e6a32417","commitMessage":"@@@Code clean-up. Add braces for clarity. Enable check now all are fixed.\n\nHopefully final test of the CI.","date":"2021-05-27 06:41:15","modifiedFileCount":"65","status":"M","submitter":"Mark Thomas"}]
