[{"authorTime":"2010-05-01 21:31:46","codes":[{"authorDate":"2010-03-25 08:59:23","commitOrder":3,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-03-25 08:59:23","endLine":4885,"groupId":"1034","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/d9d6da467b6eb99c582301f58c83b71da5b626.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4784,"status":"NB"},{"authorDate":"2010-05-01 21:31:46","commitOrder":3,"curCode":"    protected void initInternal() throws LifecycleException {\n\n        if( this.getParent() == null ) {\n            ObjectName parentName;\n            try {\n                parentName = getParentName();\n            } catch (MalformedObjectNameException e1) {\n                throw new LifecycleException(e1);\n            }\n            \n            if( ! mserver.isRegistered(parentName)) {\n                if(log.isDebugEnabled())\n                    log.debug(\"No host, creating one \" + parentName);\n                StandardHost host=new StandardHost();\n                host.setName(hostName);\n                host.setAutoDeploy(false);\n                try {\n                    Registry.getRegistry(null, null)\n                        .registerComponent(host, parentName, null);\n                } catch (Exception e) {\n                    throw new LifecycleException(e);\n                }\n                \r\n                \r\n                \r\n                host.init();\n            }\n            \n            \r\n            LifecycleListener config = null;\n            try {\n                String configClassName = null;\n                try {\n                    configClassName = String.valueOf(mserver.getAttribute(parentName, \"configClass\"));\n                } catch (AttributeNotFoundException e) {\n                    \r\n                }\n                if (configClassName != null) {\n                    Class<?> clazz = Class.forName(configClassName);\n                    config = (LifecycleListener) clazz.newInstance();\n                } else {\n                    config = new ContextConfig();\n                }\n            } catch (Exception e) {\n                log.warn(\"Error creating ContextConfig for \" + parentName, e);\n                throw new LifecycleException(e);\n            }\n            this.addLifecycleListener(config);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"AddChild \" + parentName + \" \" + this);\n            }\n            try {\n                mserver.invoke(parentName, \"addChild\", new Object[] { this },\n                        new String[] {\"org.apache.catalina.Container\"});\n            } catch (Exception e) {\n                throw new LifecycleException(e);\n            }\n        }\n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        super.initInternal();\n        \n        \r\n        fireLifecycleEvent(INIT_EVENT, null);\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n    }\n","date":"2010-05-01 21:31:46","endLine":5724,"groupId":"8937","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/06/29e847ae912a93a668967b2afc74f5a930d389.src","preCode":"    protected void initInternal() throws LifecycleException {\n\n        if( this.getParent() == null ) {\n            ObjectName parentName;\n            try {\n                parentName = getParentName();\n            } catch (MalformedObjectNameException e1) {\n                throw new LifecycleException(e1);\n            }\n            \n            if( ! mserver.isRegistered(parentName)) {\n                if(log.isDebugEnabled())\n                    log.debug(\"No host, creating one \" + parentName);\n                StandardHost host=new StandardHost();\n                host.setName(hostName);\n                host.setAutoDeploy(false);\n                try {\n                    Registry.getRegistry(null, null)\n                        .registerComponent(host, parentName, null);\n                } catch (Exception e) {\n                    throw new LifecycleException(e);\n                }\n                \r\n                \r\n                \r\n                host.init();\n            }\n            \n            \r\n            LifecycleListener config = null;\n            try {\n                String configClassName = null;\n                try {\n                    configClassName = String.valueOf(mserver.getAttribute(parentName, \"configClass\"));\n                } catch (AttributeNotFoundException e) {\n                    \r\n                }\n                if (configClassName != null) {\n                    Class<?> clazz = Class.forName(configClassName);\n                    config = (LifecycleListener) clazz.newInstance();\n                } else {\n                    config = new ContextConfig();\n                }\n            } catch (Exception e) {\n                log.warn(\"Error creating ContextConfig for \" + parentName, e);\n                throw new LifecycleException(e);\n            }\n            this.addLifecycleListener(config);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"AddChild \" + parentName + \" \" + this);\n            }\n            try {\n                mserver.invoke(parentName, \"addChild\", new Object[] { this },\n                        new String[] {\"org.apache.catalina.Container\"});\n            } catch (Exception e) {\n                throw new LifecycleException(e);\n            }\n        }\n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        super.initInternal();\n        \n        \r\n        fireLifecycleEvent(INIT_EVENT, null);\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5648,"status":"B"}],"commitId":"9af344b2b39a621ff830fca5fe91956f6b6126c0","commitMessage":"@@@Add init() and destroy() to the Lifecycle interface\nNote that this commit breaks the shutdown hook. I'll fix that in a following commit.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@940008 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-05-01 21:31:46","modifiedFileCount":"31","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-05-11 00:17:22","codes":[{"authorDate":"2010-03-25 08:59:23","commitOrder":4,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-03-25 08:59:23","endLine":4885,"groupId":"1034","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/d9d6da467b6eb99c582301f58c83b71da5b626.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4784,"status":"N"},{"authorDate":"2010-05-11 00:17:22","commitOrder":4,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\n                                                \"j2ee.object.created\", \n                                                this.getObjectName(), \n                                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2010-05-11 00:17:22","endLine":5547,"groupId":"7865","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9a/0a6e29de493f77c42b130f8166c8334a623f5b.src","preCode":"    protected void initInternal() throws LifecycleException {\n\n        if( this.getParent() == null ) {\n            ObjectName parentName;\n            try {\n                parentName = getParentName();\n            } catch (MalformedObjectNameException e1) {\n                throw new LifecycleException(e1);\n            }\n            \n            if( ! mserver.isRegistered(parentName)) {\n                if(log.isDebugEnabled())\n                    log.debug(\"No host, creating one \" + parentName);\n                StandardHost host=new StandardHost();\n                host.setName(hostName);\n                host.setAutoDeploy(false);\n                try {\n                    Registry.getRegistry(null, null)\n                        .registerComponent(host, parentName, null);\n                } catch (Exception e) {\n                    throw new LifecycleException(e);\n                }\n                \r\n                \r\n                \r\n                host.init();\n            }\n            \n            \r\n            LifecycleListener config = null;\n            try {\n                String configClassName = null;\n                try {\n                    configClassName = String.valueOf(mserver.getAttribute(parentName, \"configClass\"));\n                } catch (AttributeNotFoundException e) {\n                    \r\n                }\n                if (configClassName != null) {\n                    Class<?> clazz = Class.forName(configClassName);\n                    config = (LifecycleListener) clazz.newInstance();\n                } else {\n                    config = new ContextConfig();\n                }\n            } catch (Exception e) {\n                log.warn(\"Error creating ContextConfig for \" + parentName, e);\n                throw new LifecycleException(e);\n            }\n            this.addLifecycleListener(config);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"AddChild \" + parentName + \" \" + this);\n            }\n            try {\n                mserver.invoke(parentName, \"addChild\", new Object[] { this },\n                        new String[] {\"org.apache.catalina.Container\"});\n            } catch (Exception e) {\n                throw new LifecycleException(e);\n            }\n        }\n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        super.initInternal();\n        \n        \r\n        fireLifecycleEvent(INIT_EVENT, null);\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5532,"status":"M"}],"commitId":"c169c761002186b131323bef30e433d4aec1b51c","commitMessage":"@@@Extend Lifecycle/MBean refactoring to ContainerBase\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@942813 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-05-11 00:17:22","modifiedFileCount":"16","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-05-26 06:43:45","codes":[{"authorDate":"2010-03-25 08:59:23","commitOrder":5,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-03-25 08:59:23","endLine":4885,"groupId":"1034","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/d9d6da467b6eb99c582301f58c83b71da5b626.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4784,"status":"N"},{"authorDate":"2010-05-26 06:43:45","commitOrder":5,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            onameNamingResoucres = register(namingResources,\n                    \"type=NamingResources,\" + getObjectNameKeyProperties());\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\n                                                \"j2ee.object.created\", \n                                                this.getObjectName(), \n                                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2010-05-26 06:43:45","endLine":5564,"groupId":"7865","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9b/393d885d030b83da0c01e3ac4db8ae4e23a31e.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\n                                                \"j2ee.object.created\", \n                                                this.getObjectName(), \n                                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5543,"status":"M"}],"commitId":"b5b64f2123268dcf243e06a04682643c140b279c","commitMessage":"@@@Restore the naming resource MBeans\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@948232 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-05-26 06:43:45","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-07-02 03:37:40","codes":[{"authorDate":"2010-03-25 08:59:23","commitOrder":6,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-03-25 08:59:23","endLine":4885,"groupId":"1034","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/d9d6da467b6eb99c582301f58c83b71da5b626.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4784,"status":"N"},{"authorDate":"2010-07-02 03:37:40","commitOrder":6,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            onameNamingResources = register(namingResources,\n                    \"type=NamingResources,\" + getObjectNameKeyProperties());\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\n                                                \"j2ee.object.created\", \n                                                this.getObjectName(), \n                                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2010-07-02 03:37:40","endLine":5600,"groupId":"7865","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/08/1536354084f54a5cc1ba2424e6e90b2d1a5a7c.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            onameNamingResoucres = register(namingResources,\n                    \"type=NamingResources,\" + getObjectNameKeyProperties());\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\n                                                \"j2ee.object.created\", \n                                                this.getObjectName(), \n                                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5579,"status":"M"}],"commitId":"c7bfc757baa9efa4efbc80bc429bef4c7e7d73a4","commitMessage":"@@@Fix typo\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@959756 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-07-02 03:37:40","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-07-02 03:37:40","codes":[{"authorDate":"2010-12-10 06:11:27","commitOrder":7,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-12-10 06:11:27","endLine":5305,"groupId":"8156","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/50/08661918ee13aede3b1ede47b7e54bf246cad7.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5189,"status":"M"},{"authorDate":"2010-07-02 03:37:40","commitOrder":7,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            onameNamingResources = register(namingResources,\n                    \"type=NamingResources,\" + getObjectNameKeyProperties());\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\n                                                \"j2ee.object.created\", \n                                                this.getObjectName(), \n                                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2010-07-02 03:37:40","endLine":5600,"groupId":"7865","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/08/1536354084f54a5cc1ba2424e6e90b2d1a5a7c.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            onameNamingResources = register(namingResources,\n                    \"type=NamingResources,\" + getObjectNameKeyProperties());\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\n                                                \"j2ee.object.created\", \n                                                this.getObjectName(), \n                                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5579,"status":"N"}],"commitId":"e0d603a06e75f7301a6a9e9f395bc8f9fe5cdcca","commitMessage":"@@@bug 49159: Improve ThreadLocal memory leak clean-up \nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=49159\n\nUse a dedicated thread when calling web application code when it is started and stopped (calls to Listeners.  Filters.  Servlets).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1044145 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-12-10 06:11:27","modifiedFileCount":"1","status":"M","submitter":"Sylvain Laurent"},{"authorTime":"2010-12-13 22:50:17","codes":[{"authorDate":"2010-12-13 22:50:17","commitOrder":8,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-12-13 22:50:17","endLine":5302,"groupId":"1988","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/04/e22c6c284addf2ab690d5e46de259e91b945ee.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5185,"status":"M"},{"authorDate":"2010-12-13 22:50:17","commitOrder":8,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            onameNamingResources = register(namingResources,\n                    \"type=NamingResources,\" + getObjectNameKeyProperties());\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2010-12-13 22:50:17","endLine":6006,"groupId":"7865","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/04/e22c6c284addf2ab690d5e46de259e91b945ee.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            onameNamingResources = register(namingResources,\n                    \"type=NamingResources,\" + getObjectNameKeyProperties());\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\n                                                \"j2ee.object.created\", \n                                                this.getObjectName(), \n                                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5987,"status":"M"}],"commitId":"108bab7293a589c481babb5ce5fca20a9f2caa4f","commitMessage":"@@@Fix various FindBugs and Eclipse warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1045156 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-12-13 22:50:17","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-08 22:30:17","codes":[{"authorDate":"2010-12-13 22:50:17","commitOrder":9,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-12-13 22:50:17","endLine":5302,"groupId":"1988","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/04/e22c6c284addf2ab690d5e46de259e91b945ee.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5185,"status":"N"},{"authorDate":"2011-02-08 22:30:17","commitOrder":9,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2011-02-08 22:30:17","endLine":6113,"groupId":"7865","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fb/4ec795d26805baa1bf72d523a27a976509bd6e.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            onameNamingResources = register(namingResources,\n                    \"type=NamingResources,\" + getObjectNameKeyProperties());\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6095,"status":"M"}],"commitId":"527ace4321400d0e0baa6325186e6ff7d51b068c","commitMessage":"@@@Make NamingResources implement MBeanLifecycle\nEnvironments.  Resources and ResourceLinks are once again available via JMX\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1068416 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-02-08 22:30:17","modifiedFileCount":"4","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-08 22:30:17","codes":[{"authorDate":"2011-02-10 07:13:00","commitOrder":10,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.stop();\n        }\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-02-10 07:13:00","endLine":5425,"groupId":"1988","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e6/598cfdbf978ee6e93e7b063936d98f0ff9b8b1.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5302,"status":"M"},{"authorDate":"2011-02-08 22:30:17","commitOrder":10,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2011-02-08 22:30:17","endLine":6113,"groupId":"7865","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fb/4ec795d26805baa1bf72d523a27a976509bd6e.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6095,"status":"N"}],"commitId":"9376f1d05845166cd94bd1431f3e489e8f38fd11","commitMessage":"@@@Ensure NamingResources follows correct lifecycle\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1069166 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-02-10 07:13:00","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-08 22:30:17","codes":[{"authorDate":"2011-03-09 06:15:34","commitOrder":11,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        if (namingResources != null) {\n            namingResources.stop();\n        }\n        \n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-03-09 06:15:34","endLine":5496,"groupId":"1988","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f7/4bb75bd753c63fbb63eea9b0105772ccd6e8d8.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.stop();\n        }\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5375,"status":"M"},{"authorDate":"2011-02-08 22:30:17","commitOrder":11,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2011-02-08 22:30:17","endLine":6113,"groupId":"7865","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fb/4ec795d26805baa1bf72d523a27a976509bd6e.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6095,"status":"N"}],"commitId":"1211dbe4baff4dad12fa503076f0c7e0ddd011a3","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=25060\nWhen stopping naming resources look for DataSource resources with a zero-arg close() method and call it if one is found\nWorks with Commons DBCP.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1079575 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-03-09 06:15:34","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-08 22:30:17","codes":[{"authorDate":"2011-03-30 20:26:39","commitOrder":12,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-03-30 20:26:39","endLine":5505,"groupId":"0","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/97/cbdc08dfc0aae6dc3b0979a17d13613c8c241d.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        if (namingResources != null) {\n            namingResources.stop();\n        }\n        \n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5381,"status":"M"},{"authorDate":"2011-02-08 22:30:17","commitOrder":12,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2011-02-08 22:30:17","endLine":6113,"groupId":"7865","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fb/4ec795d26805baa1bf72d523a27a976509bd6e.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6095,"status":"N"}],"commitId":"b3d9ee80697ffa614be25f06564644a3b3c66bf0","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50991\nStop the resources after they have been unbound rather than before\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1086928 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-03-30 20:26:39","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-08 22:30:17","codes":[{"authorDate":"2011-03-30 20:48:13","commitOrder":13,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-03-30 20:48:13","endLine":5506,"groupId":"9037","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/23/1ad3b5a19942c892d490cca47cee34f03f82d9.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5381,"status":"M"},{"authorDate":"2011-02-08 22:30:17","commitOrder":13,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2011-02-08 22:30:17","endLine":6113,"groupId":"7865","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fb/4ec795d26805baa1bf72d523a27a976509bd6e.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6095,"status":"N"}],"commitId":"5c564631508dd1d3ccb69cc23547d852c916ec94","commitMessage":"@@@Correct fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50991\nStop resource after app has finished with them but before they are unbound\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1086935 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-03-30 20:48:13","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-08 22:30:17","codes":[{"authorDate":"2011-04-01 22:24:43","commitOrder":14,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            \r\n            \r\n            RunnableWithLifecycleException stop =\n                    new RunnableWithLifecycleException() {\n                @Override\n                public void run() {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            try {\n                                children[i].stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if (manager != null && manager instanceof Lifecycle) {\n                            try {\n                                ((Lifecycle) manager).stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        listenerStop();\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            };\n            \n            Thread t = new Thread(stop);\n            t.setName(\"stop children - \" + getObjectName().toString());\n            t.run();\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                \r\n                throw new LifecycleException(e);\n            }\n            if (stop.getLifecycleException() != null) {\n                throw stop.getLifecycleException();\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-04-01 22:24:43","endLine":5543,"groupId":"7981","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ed/9869e41b4d5f8c31d9a424ddc4daec34defdc5.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5395,"status":"M"},{"authorDate":"2011-02-08 22:30:17","commitOrder":14,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2011-02-08 22:30:17","endLine":6113,"groupId":"7865","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fb/4ec795d26805baa1bf72d523a27a976509bd6e.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6095,"status":"N"}],"commitId":"a070c4e8aab6ec14ef15823d8aa4750dc26ff6a3","commitMessage":"@@@Workaround shutdown issue in unit tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1087715 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-04-01 22:24:43","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-08 22:30:17","codes":[{"authorDate":"2011-07-04 20:50:24","commitOrder":15,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            \r\n            \r\n            RunnableWithLifecycleException stop =\n                    new RunnableWithLifecycleException() {\n                @Override\n                public void run() {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            try {\n                                children[i].stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if (manager != null && manager instanceof Lifecycle) {\n                            try {\n                                ((Lifecycle) manager).stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        listenerStop();\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            };\n            \n            Thread t = new Thread(stop);\n            t.setName(\"stop children - \" + getObjectName().toString());\n            t.start();\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                \r\n                throw new LifecycleException(e);\n            }\n            if (stop.getLifecycleException() != null) {\n                throw stop.getLifecycleException();\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-07-04 20:50:24","endLine":5565,"groupId":"7981","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/41/f061706d859ad4e1a72c8208feeef0c8c93f5f.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            \r\n            \r\n            RunnableWithLifecycleException stop =\n                    new RunnableWithLifecycleException() {\n                @Override\n                public void run() {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            try {\n                                children[i].stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if (manager != null && manager instanceof Lifecycle) {\n                            try {\n                                ((Lifecycle) manager).stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        listenerStop();\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            };\n            \n            Thread t = new Thread(stop);\n            t.setName(\"stop children - \" + getObjectName().toString());\n            t.run();\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                \r\n                throw new LifecycleException(e);\n            }\n            if (stop.getLifecycleException() != null) {\n                throw stop.getLifecycleException();\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5417,"status":"M"},{"authorDate":"2011-02-08 22:30:17","commitOrder":15,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2011-02-08 22:30:17","endLine":6113,"groupId":"7865","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fb/4ec795d26805baa1bf72d523a27a976509bd6e.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6095,"status":"N"}],"commitId":"eb9837364aec530e51e613e6d29306d2fe6687c3","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51467\nstart() not run()\nPatch provided by Felix Schumacher\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1142643 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-07-04 20:50:24","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-08 22:30:17","codes":[{"authorDate":"2011-08-06 00:31:41","commitOrder":16,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            \r\n            \r\n            RunnableWithLifecycleException stop =\n                    new RunnableWithLifecycleException() {\n                @Override\n                public void run() {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            try {\n                                children[i].stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if (manager != null && manager instanceof Lifecycle &&\n                                ((Lifecycle) manager).getState().isAvailable()) {\n                            try {\n                                ((Lifecycle) manager).stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        listenerStop();\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            };\n            \n            Thread t = new Thread(stop);\n            t.setName(\"stop children - \" + getObjectName().toString());\n            t.start();\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                \r\n                throw new LifecycleException(e);\n            }\n            if (stop.getLifecycleException() != null) {\n                throw stop.getLifecycleException();\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-08-06 00:31:41","endLine":5567,"groupId":"12049","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b2/e8cd3a4255e7c91d68cd59b3ffea8eb9900d77.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            \r\n            \r\n            RunnableWithLifecycleException stop =\n                    new RunnableWithLifecycleException() {\n                @Override\n                public void run() {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            try {\n                                children[i].stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if (manager != null && manager instanceof Lifecycle) {\n                            try {\n                                ((Lifecycle) manager).stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        listenerStop();\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            };\n            \n            Thread t = new Thread(stop);\n            t.setName(\"stop children - \" + getObjectName().toString());\n            t.start();\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                \r\n                throw new LifecycleException(e);\n            }\n            if (stop.getLifecycleException() != null) {\n                throw stop.getLifecycleException();\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5417,"status":"M"},{"authorDate":"2011-02-08 22:30:17","commitOrder":16,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2011-02-08 22:30:17","endLine":6113,"groupId":"7865","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fb/4ec795d26805baa1bf72d523a27a976509bd6e.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6095,"status":"N"}],"commitId":"1088ff47fb195e1e933ae6679d96ceffa0a3d937","commitMessage":"@@@Prevent spurious log warnings on container stop if a child component has previously failed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1154298 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-08-06 00:31:41","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-08 22:30:17","codes":[{"authorDate":"2011-10-28 15:37:34","commitOrder":17,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-10-28 15:37:34","endLine":5399,"groupId":"13250","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c9/e55177f9bdc9460a10b1c326ee7993712474b2.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            \r\n            \r\n            RunnableWithLifecycleException stop =\n                    new RunnableWithLifecycleException() {\n                @Override\n                public void run() {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            try {\n                                children[i].stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n\n                        \r\n                        filterStop();\n\n                        \r\n                        threadStop();\n\n                        if (manager != null && manager instanceof Lifecycle &&\n                                ((Lifecycle) manager).getState().isAvailable()) {\n                            try {\n                                ((Lifecycle) manager).stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n\n                        \r\n                        listenerStop();\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            };\n\n            Thread t = new Thread(stop);\n            t.setName(\"stop children - \" + getObjectName().toString());\n            t.start();\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                \r\n                throw new LifecycleException(e);\n            }\n            if (stop.getLifecycleException() != null) {\n                throw stop.getLifecycleException();\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5282,"status":"M"},{"authorDate":"2011-02-08 22:30:17","commitOrder":17,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2011-02-08 22:30:17","endLine":6113,"groupId":"7865","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fb/4ec795d26805baa1bf72d523a27a976509bd6e.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6095,"status":"N"}],"commitId":"d6f68b124d917154508706eb5ace8cdd16bf3fe5","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=46264\nImplement threaded start/stop for containers\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1190185 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-10-28 15:37:34","modifiedFileCount":"8","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-08 22:30:17","codes":[{"authorDate":"2011-11-30 03:48:04","commitOrder":18,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealm();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-11-30 03:48:04","endLine":5428,"groupId":"0","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/4c/6ad391bed2a50c6e31201c9f10d23e545e1845.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5310,"status":"M"},{"authorDate":"2011-02-08 22:30:17","commitOrder":18,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2011-02-08 22:30:17","endLine":6113,"groupId":"7865","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fb/4ec795d26805baa1bf72d523a27a976509bd6e.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6095,"status":"N"}],"commitId":"80a7aff3e20045f428b33727a5277e62da6ba4d2","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52259\nRegression caused by bug 46264. Prevent deadlock if no Realm is\nconfigured.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1208046 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-11-30 03:48:04","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-08 22:30:17","codes":[{"authorDate":"2011-11-30 05:57:04","commitOrder":19,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-11-30 05:57:04","endLine":5428,"groupId":"8378","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a5/90cef4671be0edcd46c8ec4af79a61f3d02e2b.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealm();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5310,"status":"M"},{"authorDate":"2011-02-08 22:30:17","commitOrder":19,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2011-02-08 22:30:17","endLine":6113,"groupId":"7865","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fb/4ec795d26805baa1bf72d523a27a976509bd6e.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6095,"status":"N"}],"commitId":"ea1438235a266f36413b322743f53d7ac9bc6800","commitMessage":"@@@Retain thread safety for ContainerBase.realm but don't try and\nstart/stop it multiple times\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1208096 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-11-30 05:57:04","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-08 22:30:17","codes":[{"authorDate":"2012-01-13 04:33:45","commitOrder":20,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2012-01-13 04:33:45","endLine":5436,"groupId":"8378","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/66/d13df8d9a5a12e810c8924771e388f6d6bd734.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5321,"status":"M"},{"authorDate":"2011-02-08 22:30:17","commitOrder":20,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2011-02-08 22:30:17","endLine":6113,"groupId":"7865","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fb/4ec795d26805baa1bf72d523a27a976509bd6e.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6095,"status":"N"}],"commitId":"f7aa0b1aa11072871f8c57c92eab3f7c76e5f616","commitMessage":"@@@Logger will not implement Lifecycle. This was a leftover from the\npre-JULI logger implementation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1230763 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-01-13 04:33:45","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-08 22:30:17","codes":[{"authorDate":"2012-07-13 21:38:08","commitOrder":21,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2012-07-13 21:38:08","endLine":5593,"groupId":"8378","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/47/de48e6264c64ebe09d814431d438d51c0a010b.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5475,"status":"M"},{"authorDate":"2011-02-08 22:30:17","commitOrder":21,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2011-02-08 22:30:17","endLine":6113,"groupId":"7865","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fb/4ec795d26805baa1bf72d523a27a976509bd6e.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6095,"status":"N"}],"commitId":"3883c752d7b3047956800fab99cde75499dbde23","commitMessage":"@@@Fix Findbugs warnings. Sync only on setter. Use ReadWriteLock instead.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1361213 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-07-13 21:38:08","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-10-24 06:38:16","codes":[{"authorDate":"2012-10-24 06:38:16","commitOrder":22,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2012-10-24 06:38:16","endLine":5398,"groupId":"9473","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/11/37a0c94f344baeee18df3083fccbd221a87cc4.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5280,"status":"M"},{"authorDate":"2012-10-24 06:38:16","commitOrder":22,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2012-10-24 06:38:16","endLine":6097,"groupId":"7865","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/11/37a0c94f344baeee18df3083fccbd221a87cc4.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6075,"status":"M"}],"commitId":"527baba1736d3111596fb19dba367460fdb2808c","commitMessage":"@@@Merge new resources implementation from sandbox/trunk-resources\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1401503 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-10-24 06:38:16","modifiedFileCount":"27","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-10-24 06:38:16","codes":[{"authorDate":"2013-02-01 19:55:20","commitOrder":23,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2013-02-01 19:55:20","endLine":5401,"groupId":"9473","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c6/a549c447d8b9df332b8b56edf52d9233045464.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5283,"status":"M"},{"authorDate":"2012-10-24 06:38:16","commitOrder":23,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2012-10-24 06:38:16","endLine":6097,"groupId":"7865","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/11/37a0c94f344baeee18df3083fccbd221a87cc4.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6075,"status":"N"}],"commitId":"d2f6a672e97e117c787e9cf247961f77a7bc5f8f","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54507\nDon't start expiring sessions until the web application is fully started. Stop expiring sessions as soon as the web application is stopped.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1441403 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-02-01 19:55:20","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-08-11 05:53:43","codes":[{"authorDate":"2013-02-01 19:55:20","commitOrder":24,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2013-02-01 19:55:20","endLine":5401,"groupId":"9473","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c6/a549c447d8b9df332b8b56edf52d9233045464.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5283,"status":"N"},{"authorDate":"2013-08-11 05:53:43","commitOrder":24,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2013-08-11 05:53:43","endLine":6350,"groupId":"7865","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ed/2ceaba9df93f0f4223ebb505fb1593c8dea273.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        if (processTlds) {\n            this.addLifecycleListener(new TldConfig());\n        }\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6332,"status":"M"}],"commitId":"486ff311fa59e86e45883719af673a7e3a7a157b","commitMessage":"@@@Refactor Catalina's TLD processing into Jasper's ServletContainerInitializer.\nReplaces the TldConfig lifecycle listener with code the SCI to scan for TLDs and register listeners dynamically.\nRemoves the \"processTld\" property from StandardContext and deprecates other TLD related properties on Context\nDoes not yet address refactoring Jasper's own TLD processing into the SCI.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1512826 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-08-11 05:53:43","modifiedFileCount":"4","status":"M","submitter":"Jeremy Boynes"},{"authorTime":"2013-08-11 05:53:43","codes":[{"authorDate":"2014-01-22 04:14:33","commitOrder":25,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager != null && manager instanceof Lifecycle &&\n                    ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2014-01-22 04:14:33","endLine":5455,"groupId":"584","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0c/4ec3cf992c6342f30654772886448d4be7ead3.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5343,"status":"M"},{"authorDate":"2013-08-11 05:53:43","commitOrder":25,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2013-08-11 05:53:43","endLine":6350,"groupId":"7865","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ed/2ceaba9df93f0f4223ebb505fb1593c8dea273.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6332,"status":"N"}],"commitId":"4a13d97ac3667dd5f0efdadf7a99265edda3027f","commitMessage":"@@@Simplify bind and unbind on stop\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1560164 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-22 04:14:33","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-08-11 05:53:43","codes":[{"authorDate":"2014-12-14 20:32:22","commitOrder":26,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2014-12-14 20:32:22","endLine":5427,"groupId":"13887","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/54/04987b1d792eb571c15ef0078037a2c8abadd5.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager != null && manager instanceof Lifecycle &&\n                    ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5316,"status":"M"},{"authorDate":"2013-08-11 05:53:43","commitOrder":26,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2013-08-11 05:53:43","endLine":6350,"groupId":"7865","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ed/2ceaba9df93f0f4223ebb505fb1593c8dea273.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6332,"status":"N"}],"commitId":"4765802b6648d13d7920cfdf6bd1fe05b7f3af8b","commitMessage":"@@@Remove unnecessary \"x != null\" tests before \"x instanceof ...\" tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1645449 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-12-14 20:32:22","modifiedFileCount":"19","status":"M","submitter":"Mark Thomas"},{"authorTime":"2013-08-11 05:53:43","codes":[{"authorDate":"2015-03-14 18:59:38","commitOrder":27,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2015-03-14 18:59:38","endLine":5464,"groupId":"13887","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9a/be57a71d6c72e5303a8c9000e6c5ecce6959bd.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5353,"status":"M"},{"authorDate":"2013-08-11 05:53:43","commitOrder":27,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2013-08-11 05:53:43","endLine":6350,"groupId":"7865","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ed/2ceaba9df93f0f4223ebb505fb1593c8dea273.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6332,"status":"N"}],"commitId":"61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57704\nAccess instanceManager via get/set methods.\nFix potential NPEs. In web app start if a problem occur prior to instanceManager initialization then:\n- SCI.onStart will fail if it tries to use instanceManager\n- During web app stop.  StandardContext.listenerStop will fail if it tries to use instanceManager\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1666649 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-14 18:59:38","modifiedFileCount":"2","status":"M","submitter":"Violeta Georgieva Georgieva"},{"authorTime":"2013-08-11 05:53:43","codes":[{"authorDate":"2015-11-06 01:29:20","commitOrder":28,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2015-11-06 01:29:20","endLine":5483,"groupId":"13887","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d5/62d87f93bd8adb0b4c2b066df86ffc05b65bfd.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5368,"status":"M"},{"authorDate":"2013-08-11 05:53:43","commitOrder":28,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2013-08-11 05:53:43","endLine":6350,"groupId":"7865","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ed/2ceaba9df93f0f4223ebb505fb1593c8dea273.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6332,"status":"N"}],"commitId":"b28cbbaa1c9b1919b3f2aa2931eac98fc6d310c8","commitMessage":"@@@- Add (another.  sorry) classloader keyed static map to retrieve the InstanceManager from anywhere.  as a last resort.\n- Pass along the application classloader during upgrade.  using a token object.\n- Don't use the InstanceManager for internal upgrade handlers (no naming.  etc).  this would optimize websockets and HTTP/2 upgrade.\n- Set a proper context classloader environment for upgrade handler init/destroy and use the InstanceManager.  except for internal handlers where they are responsible for it.\n- Support the InstanceManager for the websockets client endpoints.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1712826 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-06 01:29:20","modifiedFileCount":"16","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2013-08-11 05:53:43","codes":[{"authorDate":"2016-02-16 15:06:31","commitOrder":29,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2016-02-16 15:06:31","endLine":5492,"groupId":"1807","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/42/80129d3ae5c6248c9e121f1fb5a53d0b4c839a.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5381,"status":"M"},{"authorDate":"2013-08-11 05:53:43","commitOrder":29,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2013-08-11 05:53:43","endLine":6350,"groupId":"7865","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ed/2ceaba9df93f0f4223ebb505fb1593c8dea273.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6332,"status":"N"}],"commitId":"f170d9ec8a0428f6293375b7397968184101802f","commitMessage":"@@@Clean up: Remove unnecessary code. \nThere is no support for context level cluster.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1730638 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-02-16 15:06:31","modifiedFileCount":"1","status":"M","submitter":"Keiichi Fujino"},{"authorTime":"2016-06-20 21:05:17","codes":[{"authorDate":"2016-02-16 15:06:31","commitOrder":30,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2016-02-16 15:06:31","endLine":5492,"groupId":"1807","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/42/80129d3ae5c6248c9e121f1fb5a53d0b4c839a.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5381,"status":"N"},{"authorDate":"2016-06-20 21:05:17","commitOrder":30,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2016-06-20 21:05:17","endLine":6220,"groupId":"7865","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/00/087c591c000761f8f06297498b39cc14001e8c.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        if (resources != null) {\n            resources.start();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6206,"status":"M"}],"commitId":"1426559cd6e15bf9cf0f907ec160983db6d9ff6e","commitMessage":"@@@Do not attempt to start web resources during a web application's initialisation phase since the web application is not fully configured at that point and the web resources may not be correctly configured.\nFollow-up to https://lists.apache.org/thread.html/8c27e780a079a15169c915a8481ef129e6fc2322d548075d00753a5c@%3Cusers.tomcat.apache.org%3E\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1749328 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-06-20 21:05:17","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-06-20 21:05:17","codes":[{"authorDate":"2017-01-10 23:14:52","commitOrder":31,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2017-01-10 23:14:52","endLine":5477,"groupId":"1807","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/40/79c9ddd5c174ea8f76522a47f390e8ac1ff76a.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5366,"status":"M"},{"authorDate":"2016-06-20 21:05:17","commitOrder":31,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2016-06-20 21:05:17","endLine":6220,"groupId":"7865","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/00/087c591c000761f8f06297498b39cc14001e8c.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6206,"status":"N"}],"commitId":"ab49af84f86fc882933fc12c28e06192a3d351da","commitMessage":"@@@Spelling fixes. Patch provided by Josh Soref.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1778139 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-01-10 23:14:52","modifiedFileCount":"55","status":"M","submitter":"Violeta Georgieva Georgieva"},{"authorTime":"2016-06-20 21:05:17","codes":[{"authorDate":"2019-01-24 00:33:47","commitOrder":32,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2019-01-24 00:33:47","endLine":5450,"groupId":"1807","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a6/1130c1bd5c743c30c5bd10e9e6976005c2dd08.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5323,"status":"M"},{"authorDate":"2016-06-20 21:05:17","commitOrder":32,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2016-06-20 21:05:17","endLine":6220,"groupId":"7865","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/00/087c591c000761f8f06297498b39cc14001e8c.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6206,"status":"N"}],"commitId":"b4ad8fa8e03b870ee320ac3239059abc08fe1f58","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63003\nExtend the unloadDelay attribute on a Context to include in-flight asynchronous requests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1851947 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2019-01-24 00:33:47","modifiedFileCount":"8","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-06-20 21:05:17","codes":[{"authorDate":"2020-04-23 05:49:33","commitOrder":33,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (Container child : children) {\n                child.stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2020-05-04 15:18:37","endLine":5422,"groupId":"1807","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/95/390202067edde54ddb2e1b1032ec1cdcec4fbc.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5295,"status":"M"},{"authorDate":"2016-06-20 21:05:17","commitOrder":33,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2016-06-20 21:05:17","endLine":6220,"groupId":"7865","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/00/087c591c000761f8f06297498b39cc14001e8c.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6206,"status":"N"}],"commitId":"af4ecdfe038f1b4bf3e8ce880385b6e095956912","commitMessage":"@@@Replace indexed for loops and iterator while with foreach\n","date":"2020-05-04 15:18:37","modifiedFileCount":"197","status":"M","submitter":"Lars Grefer"},{"authorTime":"2016-06-20 21:05:17","codes":[{"authorDate":"2021-05-25 16:15:13","commitOrder":34,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (Container child : children) {\n                child.stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled()) {\n                log.debug(\"Processing standard container shutdown\");\n            }\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null) {\n                context.clearAttributes();\n            }\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"Stopping complete\");\n        }\n\n    }\n","date":"2021-05-25 16:15:13","endLine":5505,"groupId":"10976","id":63,"instanceNumber":1,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a1/2ed93e986871f6f9d6629073006cca10079f2e.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (Container child : children) {\n                child.stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5375,"status":"M"},{"authorDate":"2016-06-20 21:05:17","commitOrder":34,"curCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","date":"2016-06-20 21:05:17","endLine":6220,"groupId":"10976","id":64,"instanceNumber":2,"isCurCommit":0,"methodName":"initInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/00/087c591c000761f8f06297498b39cc14001e8c.src","preCode":"    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n\n        \r\n        if (namingResources != null) {\n            namingResources.init();\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.object.created\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":6206,"status":"N"}],"commitId":"513a158ee793b52cc1c0fac7780423760818b631","commitMessage":"@@@Code clean-up. Add braces for clarity.","date":"2021-05-25 16:15:13","modifiedFileCount":"37","status":"M","submitter":"Mark Thomas"}]
