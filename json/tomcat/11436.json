[{"authorTime":"2019-04-10 22:28:13","codes":[{"authorDate":"2019-04-10 22:28:13","commitOrder":1,"curCode":"    public int write(ByteBuffer src) throws IOException {\n        checkInterruptStatus();\n        if (src == this.netOutBuffer) {\n            \r\n            \r\n            int written = sc.write(src);\n            return written;\n        } else {\n            \r\n            if (closing || closed) {\n                throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n            }\n\n            if (!flush(netOutBuffer)) {\n                \r\n                return 0;\n            }\n\n            \r\n            netOutBuffer.clear();\n\n            SSLEngineResult result = sslEngine.wrap(src, netOutBuffer);\n            \r\n            int written = result.bytesConsumed();\n            netOutBuffer.flip();\n\n            if (result.getStatus() == Status.OK) {\n                if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) tasks();\n            } else {\n                throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n            }\n\n            \r\n            flush(netOutBuffer);\n\n            return written;\n        }\n    }\n","date":"2019-04-10 22:28:13","endLine":782,"groupId":"10487","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"write","params":"(ByteBuffersrc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/37/bcc1fcaded34ae68a8b0884c8aeaf1ff8932c6.src","preCode":"    public int write(ByteBuffer src) throws IOException {\n        checkInterruptStatus();\n        if (src == this.netOutBuffer) {\n            \r\n            \r\n            int written = sc.write(src);\n            return written;\n        } else {\n            \r\n            if (closing || closed) {\n                throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n            }\n\n            if (!flush(netOutBuffer)) {\n                \r\n                return 0;\n            }\n\n            \r\n            netOutBuffer.clear();\n\n            SSLEngineResult result = sslEngine.wrap(src, netOutBuffer);\n            \r\n            int written = result.bytesConsumed();\n            netOutBuffer.flip();\n\n            if (result.getStatus() == Status.OK) {\n                if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) tasks();\n            } else {\n                throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n            }\n\n            \r\n            flush(netOutBuffer);\n\n            return written;\n        }\n    }\n","realPath":"java/org/apache/tomcat/util/net/SecureNioChannel.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":745,"status":"B"},{"authorDate":"2019-04-10 22:28:13","commitOrder":1,"curCode":"    public long write(ByteBuffer[] srcs, int offset, int length)\n            throws IOException {\n        checkInterruptStatus();\n        \r\n        if (closing || closed) {\n            throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n        }\n\n        if (!flush(netOutBuffer)) {\n            \r\n            return 0;\n        }\n\n        \r\n        netOutBuffer.clear();\n\n        SSLEngineResult result = sslEngine.wrap(srcs, offset, length, netOutBuffer);\n        \r\n        int written = result.bytesConsumed();\n        netOutBuffer.flip();\n\n        if (result.getStatus() == Status.OK) {\n            if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) tasks();\n        } else {\n            throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n        }\n\n        \r\n        flush(netOutBuffer);\n\n        return written;\n    }\n","date":"2019-04-10 22:28:13","endLine":816,"groupId":"16758","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"write","params":"(ByteBuffer[]srcs@intoffset@intlength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/37/bcc1fcaded34ae68a8b0884c8aeaf1ff8932c6.src","preCode":"    public long write(ByteBuffer[] srcs, int offset, int length)\n            throws IOException {\n        checkInterruptStatus();\n        \r\n        if (closing || closed) {\n            throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n        }\n\n        if (!flush(netOutBuffer)) {\n            \r\n            return 0;\n        }\n\n        \r\n        netOutBuffer.clear();\n\n        SSLEngineResult result = sslEngine.wrap(srcs, offset, length, netOutBuffer);\n        \r\n        int written = result.bytesConsumed();\n        netOutBuffer.flip();\n\n        if (result.getStatus() == Status.OK) {\n            if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) tasks();\n        } else {\n            throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n        }\n\n        \r\n        flush(netOutBuffer);\n\n        return written;\n    }\n","realPath":"java/org/apache/tomcat/util/net/SecureNioChannel.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":785,"status":"B"}],"commitId":"d58aa0849f6eda19720af61082f8b12254e841bb","commitMessage":"@@@Add vectoring for NIO\n\nThis is done by adding the ScatteringByteChannel and\nGatheringByteChannel in the main NioChannel. The read SSL code is the\nmost complex portion and is based on the latest version of the NIO2\nchannel.","date":"2019-04-10 22:28:13","modifiedFileCount":"2","status":"B","submitter":"remm"},{"authorTime":"2019-04-10 22:28:13","codes":[{"authorDate":"2019-05-23 04:50:22","commitOrder":2,"curCode":"    public int write(ByteBuffer src) throws IOException {\n        checkInterruptStatus();\n        if (src == this.netOutBuffer) {\n            \r\n            \r\n            int written = sc.write(src);\n            return written;\n        } else {\n            \r\n            if (closing || closed) {\n                throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n            }\n\n            if (!flush(netOutBuffer)) {\n                \r\n                return 0;\n            }\n\n            \r\n            netOutBuffer.clear();\n\n            SSLEngineResult result = sslEngine.wrap(src, netOutBuffer);\n            \r\n            int written = result.bytesConsumed();\n            netOutBuffer.flip();\n\n            if (result.getStatus() == Status.OK) {\n                if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n                    tasks();\n                }\n            } else {\n                throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n            }\n\n            \r\n            flush(netOutBuffer);\n\n            return written;\n        }\n    }\n","date":"2019-05-23 04:50:22","endLine":821,"groupId":"10487","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"write","params":"(ByteBuffersrc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6f/32cf373764b845e3182723d064766e4abd4c76.src","preCode":"    public int write(ByteBuffer src) throws IOException {\n        checkInterruptStatus();\n        if (src == this.netOutBuffer) {\n            \r\n            \r\n            int written = sc.write(src);\n            return written;\n        } else {\n            \r\n            if (closing || closed) {\n                throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n            }\n\n            if (!flush(netOutBuffer)) {\n                \r\n                return 0;\n            }\n\n            \r\n            netOutBuffer.clear();\n\n            SSLEngineResult result = sslEngine.wrap(src, netOutBuffer);\n            \r\n            int written = result.bytesConsumed();\n            netOutBuffer.flip();\n\n            if (result.getStatus() == Status.OK) {\n                if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) tasks();\n            } else {\n                throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n            }\n\n            \r\n            flush(netOutBuffer);\n\n            return written;\n        }\n    }\n","realPath":"java/org/apache/tomcat/util/net/SecureNioChannel.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":782,"status":"M"},{"authorDate":"2019-04-10 22:28:13","commitOrder":2,"curCode":"    public long write(ByteBuffer[] srcs, int offset, int length)\n            throws IOException {\n        checkInterruptStatus();\n        \r\n        if (closing || closed) {\n            throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n        }\n\n        if (!flush(netOutBuffer)) {\n            \r\n            return 0;\n        }\n\n        \r\n        netOutBuffer.clear();\n\n        SSLEngineResult result = sslEngine.wrap(srcs, offset, length, netOutBuffer);\n        \r\n        int written = result.bytesConsumed();\n        netOutBuffer.flip();\n\n        if (result.getStatus() == Status.OK) {\n            if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) tasks();\n        } else {\n            throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n        }\n\n        \r\n        flush(netOutBuffer);\n\n        return written;\n    }\n","date":"2019-04-10 22:28:13","endLine":816,"groupId":"16758","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"write","params":"(ByteBuffer[]srcs@intoffset@intlength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/37/bcc1fcaded34ae68a8b0884c8aeaf1ff8932c6.src","preCode":"    public long write(ByteBuffer[] srcs, int offset, int length)\n            throws IOException {\n        checkInterruptStatus();\n        \r\n        if (closing || closed) {\n            throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n        }\n\n        if (!flush(netOutBuffer)) {\n            \r\n            return 0;\n        }\n\n        \r\n        netOutBuffer.clear();\n\n        SSLEngineResult result = sslEngine.wrap(srcs, offset, length, netOutBuffer);\n        \r\n        int written = result.bytesConsumed();\n        netOutBuffer.flip();\n\n        if (result.getStatus() == Status.OK) {\n            if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) tasks();\n        } else {\n            throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n        }\n\n        \r\n        flush(netOutBuffer);\n\n        return written;\n    }\n","realPath":"java/org/apache/tomcat/util/net/SecureNioChannel.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":785,"status":"N"}],"commitId":"cbe9c72d78ddf450d19e7ffe846cdc328c337b0b","commitMessage":"@@@Code style\n\nThere's a lot of code in common in SecureNioXChannel.  so cleanup before\nlooking at it.","date":"2019-05-23 04:50:22","modifiedFileCount":"2","status":"M","submitter":"remm"},{"authorTime":"2021-05-27 02:27:37","codes":[{"authorDate":"2019-05-23 04:50:22","commitOrder":3,"curCode":"    public int write(ByteBuffer src) throws IOException {\n        checkInterruptStatus();\n        if (src == this.netOutBuffer) {\n            \r\n            \r\n            int written = sc.write(src);\n            return written;\n        } else {\n            \r\n            if (closing || closed) {\n                throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n            }\n\n            if (!flush(netOutBuffer)) {\n                \r\n                return 0;\n            }\n\n            \r\n            netOutBuffer.clear();\n\n            SSLEngineResult result = sslEngine.wrap(src, netOutBuffer);\n            \r\n            int written = result.bytesConsumed();\n            netOutBuffer.flip();\n\n            if (result.getStatus() == Status.OK) {\n                if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n                    tasks();\n                }\n            } else {\n                throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n            }\n\n            \r\n            flush(netOutBuffer);\n\n            return written;\n        }\n    }\n","date":"2019-05-23 04:50:22","endLine":821,"groupId":"10487","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"write","params":"(ByteBuffersrc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6f/32cf373764b845e3182723d064766e4abd4c76.src","preCode":"    public int write(ByteBuffer src) throws IOException {\n        checkInterruptStatus();\n        if (src == this.netOutBuffer) {\n            \r\n            \r\n            int written = sc.write(src);\n            return written;\n        } else {\n            \r\n            if (closing || closed) {\n                throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n            }\n\n            if (!flush(netOutBuffer)) {\n                \r\n                return 0;\n            }\n\n            \r\n            netOutBuffer.clear();\n\n            SSLEngineResult result = sslEngine.wrap(src, netOutBuffer);\n            \r\n            int written = result.bytesConsumed();\n            netOutBuffer.flip();\n\n            if (result.getStatus() == Status.OK) {\n                if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n                    tasks();\n                }\n            } else {\n                throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n            }\n\n            \r\n            flush(netOutBuffer);\n\n            return written;\n        }\n    }\n","realPath":"java/org/apache/tomcat/util/net/SecureNioChannel.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":782,"status":"N"},{"authorDate":"2021-05-27 02:27:37","commitOrder":3,"curCode":"    public long write(ByteBuffer[] srcs, int offset, int length)\n            throws IOException {\n        checkInterruptStatus();\n        \r\n        if (closing || closed) {\n            throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n        }\n\n        if (!flush(netOutBuffer)) {\n            \r\n            return 0;\n        }\n\n        \r\n        netOutBuffer.clear();\n\n        SSLEngineResult result = sslEngine.wrap(srcs, offset, length, netOutBuffer);\n        \r\n        int written = result.bytesConsumed();\n        netOutBuffer.flip();\n\n        if (result.getStatus() == Status.OK) {\n            if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n                tasks();\n            }\n        } else {\n            throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n        }\n\n        \r\n        flush(netOutBuffer);\n\n        return written;\n    }\n","date":"2021-05-27 02:27:58","endLine":855,"groupId":"16758","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"write","params":"(ByteBuffer[]srcs@intoffset@intlength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/27/7193bc76aec023ace57ba301c5d3e2cc602e86.src","preCode":"    public long write(ByteBuffer[] srcs, int offset, int length)\n            throws IOException {\n        checkInterruptStatus();\n        \r\n        if (closing || closed) {\n            throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n        }\n\n        if (!flush(netOutBuffer)) {\n            \r\n            return 0;\n        }\n\n        \r\n        netOutBuffer.clear();\n\n        SSLEngineResult result = sslEngine.wrap(srcs, offset, length, netOutBuffer);\n        \r\n        int written = result.bytesConsumed();\n        netOutBuffer.flip();\n\n        if (result.getStatus() == Status.OK) {\n            if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) tasks();\n        } else {\n            throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n        }\n\n        \r\n        flush(netOutBuffer);\n\n        return written;\n    }\n","realPath":"java/org/apache/tomcat/util/net/SecureNioChannel.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":822,"status":"M"}],"commitId":"1bb4e9fcb1242819205724873142b0524dcd40f4","commitMessage":"@@@Code clean-up. Add braces to improve clarity\n\nAgain.  mainly to trigger CI to test configuration changes.","date":"2021-05-27 02:27:58","modifiedFileCount":"39","status":"M","submitter":"Mark Thomas"},{"authorTime":"2021-05-27 02:27:37","codes":[{"authorDate":"2021-07-15 23:56:00","commitOrder":4,"curCode":"    public int write(ByteBuffer src) throws IOException {\n        checkInterruptStatus();\n        if (src == this.netOutBuffer) {\n            int written = sc.write(src);\n            return written;\n        } else {\n            \r\n            if (closing || closed) {\n                throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n            }\n\n            if (!flush(netOutBuffer)) {\n                \r\n                return 0;\n            }\n\n            if (!src.hasRemaining()) {\n                \r\n                return 0;\n            }\n\n            \r\n            netOutBuffer.clear();\n\n            SSLEngineResult result = sslEngine.wrap(src, netOutBuffer);\n            \r\n            int written = result.bytesConsumed();\n            netOutBuffer.flip();\n\n            if (result.getStatus() == Status.OK) {\n                if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n                    tasks();\n                }\n            } else {\n                throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n            }\n\n            \r\n            flush(netOutBuffer);\n\n            return written;\n        }\n    }\n","date":"2021-07-16 04:58:23","endLine":830,"groupId":"11436","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"write","params":"(ByteBuffersrc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/22/e339fb30dbc8ddc44def568f55fdf10d60b851.src","preCode":"    public int write(ByteBuffer src) throws IOException {\n        checkInterruptStatus();\n        if (src == this.netOutBuffer) {\n            int written = sc.write(src);\n            return written;\n        } else {\n            \r\n            if (closing || closed) {\n                throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n            }\n\n            if (!flush(netOutBuffer)) {\n                \r\n                return 0;\n            }\n\n            \r\n            netOutBuffer.clear();\n\n            SSLEngineResult result = sslEngine.wrap(src, netOutBuffer);\n            \r\n            int written = result.bytesConsumed();\n            netOutBuffer.flip();\n\n            if (result.getStatus() == Status.OK) {\n                if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n                    tasks();\n                }\n            } else {\n                throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n            }\n\n            \r\n            flush(netOutBuffer);\n\n            return written;\n        }\n    }\n","realPath":"java/org/apache/tomcat/util/net/SecureNioChannel.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":788,"status":"M"},{"authorDate":"2021-05-27 02:27:37","commitOrder":4,"curCode":"    public long write(ByteBuffer[] srcs, int offset, int length)\n            throws IOException {\n        checkInterruptStatus();\n        \r\n        if (closing || closed) {\n            throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n        }\n\n        if (!flush(netOutBuffer)) {\n            \r\n            return 0;\n        }\n\n        \r\n        netOutBuffer.clear();\n\n        SSLEngineResult result = sslEngine.wrap(srcs, offset, length, netOutBuffer);\n        \r\n        int written = result.bytesConsumed();\n        netOutBuffer.flip();\n\n        if (result.getStatus() == Status.OK) {\n            if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n                tasks();\n            }\n        } else {\n            throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n        }\n\n        \r\n        flush(netOutBuffer);\n\n        return written;\n    }\n","date":"2021-05-27 02:27:58","endLine":855,"groupId":"11436","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"write","params":"(ByteBuffer[]srcs@intoffset@intlength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/27/7193bc76aec023ace57ba301c5d3e2cc602e86.src","preCode":"    public long write(ByteBuffer[] srcs, int offset, int length)\n            throws IOException {\n        checkInterruptStatus();\n        \r\n        if (closing || closed) {\n            throw new IOException(sm.getString(\"channel.nio.ssl.closing\"));\n        }\n\n        if (!flush(netOutBuffer)) {\n            \r\n            return 0;\n        }\n\n        \r\n        netOutBuffer.clear();\n\n        SSLEngineResult result = sslEngine.wrap(srcs, offset, length, netOutBuffer);\n        \r\n        int written = result.bytesConsumed();\n        netOutBuffer.flip();\n\n        if (result.getStatus() == Status.OK) {\n            if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n                tasks();\n            }\n        } else {\n            throw new IOException(sm.getString(\"channel.nio.ssl.wrapFail\", result.getStatus()));\n        }\n\n        \r\n        flush(netOutBuffer);\n\n        return written;\n    }\n","realPath":"java/org/apache/tomcat/util/net/SecureNioChannel.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":822,"status":"N"}],"commitId":"6a65741d13fce5cccf6824d2be8685394878b9a3","commitMessage":"@@@Fix BZ 65448 for blocking IO\n\nIf the write completes (from the application perspective) but the\nencrypted data is not fully written.  the connection (from the client's\nperspective) will appear to hang until the client sends another request\n(pipelining) or the connection times out.\n","date":"2021-07-16 04:58:23","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"}]
