[{"authorTime":"2010-03-08 05:30:32","codes":[{"authorDate":"2010-03-08 05:30:32","commitOrder":1,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if( !initialized ) { \n            try {\n                init();\n            } catch( Exception ex ) {\n                throw new LifecycleException(\"Error initializaing \", ex);\n            }\n        }\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        preRegisterJMX();\n\n        if ((oname != null) && \n            (Registry.getRegistry(null, null).getMBeanServer().isRegistered(oname))) {\n            \r\n            \r\n            Registry.getRegistry(null, null).unregisterComponent(oname);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        \r\n        \r\n        \r\n        if( realm == null && mserver != null ) {\n            ObjectName realmName=null;\n            try {\n                realmName=new ObjectName( getEngineName() + \":type=Realm,host=\" + \n                        getHostname() + \",path=\" + getPath());\n                if( mserver.isRegistered(realmName ) ) {\n                    mserver.invoke(realmName, \"init\", \n                            new Object[] {},\n                            new String[] {}\n                    );            \n                }\n            } catch( Throwable t ) {\n                if(log.isDebugEnabled())\n                    log.debug(\"No realm for this host \" + realmName);\n            }\n        }\n        \n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        boolean mainOk = false;\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                Container children[] = findChildren();\n                for (int i = 0; i < children.length; i++) {\n                    children[i].start();\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_EVENT, null);\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n\n                \n                mainOk = true;\n\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n            if (!mainOk) {\n                \r\n                \r\n                registerJMX();\n            }\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        \r\n        registerJMX();\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2010-03-08 05:30:32","endLine":4633,"groupId":"3747","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f5/fa07f103e684c48724a96c600685c7fed2d19a.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if( !initialized ) { \n            try {\n                init();\n            } catch( Exception ex ) {\n                throw new LifecycleException(\"Error initializaing \", ex);\n            }\n        }\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        preRegisterJMX();\n\n        if ((oname != null) && \n            (Registry.getRegistry(null, null).getMBeanServer().isRegistered(oname))) {\n            \r\n            \r\n            Registry.getRegistry(null, null).unregisterComponent(oname);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        \r\n        \r\n        \r\n        if( realm == null && mserver != null ) {\n            ObjectName realmName=null;\n            try {\n                realmName=new ObjectName( getEngineName() + \":type=Realm,host=\" + \n                        getHostname() + \",path=\" + getPath());\n                if( mserver.isRegistered(realmName ) ) {\n                    mserver.invoke(realmName, \"init\", \n                            new Object[] {},\n                            new String[] {}\n                    );            \n                }\n            } catch( Throwable t ) {\n                if(log.isDebugEnabled())\n                    log.debug(\"No realm for this host \" + realmName);\n            }\n        }\n        \n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        boolean mainOk = false;\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                Container children[] = findChildren();\n                for (int i = 0; i < children.length; i++) {\n                    children[i].start();\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_EVENT, null);\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n\n                \n                mainOk = true;\n\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n            if (!mainOk) {\n                \r\n                \r\n                registerJMX();\n            }\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        \r\n        registerJMX();\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4317,"status":"B"},{"authorDate":"2010-03-08 05:30:32","commitOrder":1,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-03-08 05:30:32","endLine":4784,"groupId":"3748","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f5/fa07f103e684c48724a96c600685c7fed2d19a.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4685,"status":"B"}],"commitId":"b303f46fc3359634e74f53893690d19c20e828a7","commitMessage":"@@@Lifecycle refactoring - ContainerBase\nAdds a new CONFIGURE event to allow Context to fire the START event at the right time\nContext fires START a little later\nReplicatedContext takes advantage of LifecycleBase ensuring start() is only called once\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@920122 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-03-08 05:30:32","modifiedFileCount":"11","status":"B","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-03-25 08:59:23","codes":[{"authorDate":"2010-03-25 08:59:23","commitOrder":2,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if( !initialized ) { \n            try {\n                init();\n            } catch( Exception ex ) {\n                throw new LifecycleException(\"Error initializaing \", ex);\n            }\n        }\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        preRegisterJMX();\n\n        if ((oname != null) && \n            (Registry.getRegistry(null, null).getMBeanServer().isRegistered(oname))) {\n            \r\n            \r\n            Registry.getRegistry(null, null).unregisterComponent(oname);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        \r\n        \r\n        \r\n        if( realm == null && mserver != null ) {\n            ObjectName realmName=null;\n            try {\n                realmName=new ObjectName( getEngineName() + \":type=Realm,host=\" + \n                        getHostname() + \",path=\" + getPath());\n                if( mserver.isRegistered(realmName ) ) {\n                    mserver.invoke(realmName, \"init\", \n                            new Object[] {},\n                            new String[] {}\n                    );            \n                }\n            } catch( Throwable t ) {\n                if(log.isDebugEnabled())\n                    log.debug(\"No realm for this host \" + realmName);\n            }\n        }\n        \n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        boolean mainOk = false;\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                Container children[] = findChildren();\n                for (int i = 0; i < children.length; i++) {\n                    children[i].start();\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n\n                \n                mainOk = true;\n\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n            if (!mainOk) {\n                \r\n                \r\n                registerJMX();\n            }\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        \r\n        registerJMX();\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2010-03-25 08:59:23","endLine":4732,"groupId":"2404","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/d9d6da467b6eb99c582301f58c83b71da5b626.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if( !initialized ) { \n            try {\n                init();\n            } catch( Exception ex ) {\n                throw new LifecycleException(\"Error initializaing \", ex);\n            }\n        }\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        preRegisterJMX();\n\n        if ((oname != null) && \n            (Registry.getRegistry(null, null).getMBeanServer().isRegistered(oname))) {\n            \r\n            \r\n            Registry.getRegistry(null, null).unregisterComponent(oname);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        \r\n        \r\n        \r\n        if( realm == null && mserver != null ) {\n            ObjectName realmName=null;\n            try {\n                realmName=new ObjectName( getEngineName() + \":type=Realm,host=\" + \n                        getHostname() + \",path=\" + getPath());\n                if( mserver.isRegistered(realmName ) ) {\n                    mserver.invoke(realmName, \"init\", \n                            new Object[] {},\n                            new String[] {}\n                    );            \n                }\n            } catch( Throwable t ) {\n                if(log.isDebugEnabled())\n                    log.debug(\"No realm for this host \" + realmName);\n            }\n        }\n        \n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        boolean mainOk = false;\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                Container children[] = findChildren();\n                for (int i = 0; i < children.length; i++) {\n                    children[i].start();\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_EVENT, null);\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n\n                \n                mainOk = true;\n\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n            if (!mainOk) {\n                \r\n                \r\n                registerJMX();\n            }\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        \r\n        registerJMX();\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4416,"status":"M"},{"authorDate":"2010-03-25 08:59:23","commitOrder":2,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-03-25 08:59:23","endLine":4885,"groupId":"1034","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/d9d6da467b6eb99c582301f58c83b71da5b626.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4784,"status":"M"}],"commitId":"122bdc228821f212fd8c939ae54bf96c1e5f09da","commitMessage":"@@@Make sure start() and stop() are called on Wrappers. This was a regression in the recent Lifecycle changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@927247 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-03-25 08:59:23","modifiedFileCount":"5","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-03-25 08:59:23","codes":[{"authorDate":"2010-04-23 21:34:17","commitOrder":3,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if( !initialized ) { \n            try {\n                init();\n            } catch( Exception ex ) {\n                throw new LifecycleException(\"Error initializaing \", ex);\n            }\n        }\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        preRegisterJMX();\n\n        if ((oname != null) && \n            (Registry.getRegistry(null, null).getMBeanServer().isRegistered(oname))) {\n            \r\n            \r\n            Registry.getRegistry(null, null).unregisterComponent(oname);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        \r\n        \r\n        \r\n        if( realm == null && mserver != null ) {\n            ObjectName realmName=null;\n            try {\n                realmName=new ObjectName( getEngineName() + \":type=Realm,host=\" + \n                        getHostname() + \",path=\" + getPath());\n                if( mserver.isRegistered(realmName ) ) {\n                    mserver.invoke(realmName, \"init\", \n                            new Object[] {},\n                            new String[] {}\n                    );            \n                }\n            } catch( Throwable t ) {\n                if(log.isDebugEnabled())\n                    log.debug(\"No realm for this host \" + realmName);\n            }\n        }\n        \n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        boolean mainOk = false;\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                Container children[] = findChildren();\n                for (int i = 0; i < children.length; i++) {\n                    children[i].start();\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n\n                \n                mainOk = true;\n\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n            if (!mainOk) {\n                \r\n                \r\n                registerJMX();\n            }\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        \r\n        registerJMX();\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2010-04-23 21:34:17","endLine":4823,"groupId":"2404","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/71/7ff5067e9b76a71fe01a0cc18c2ca07d863b5a.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if( !initialized ) { \n            try {\n                init();\n            } catch( Exception ex ) {\n                throw new LifecycleException(\"Error initializaing \", ex);\n            }\n        }\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        preRegisterJMX();\n\n        if ((oname != null) && \n            (Registry.getRegistry(null, null).getMBeanServer().isRegistered(oname))) {\n            \r\n            \r\n            Registry.getRegistry(null, null).unregisterComponent(oname);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        \r\n        \r\n        \r\n        if( realm == null && mserver != null ) {\n            ObjectName realmName=null;\n            try {\n                realmName=new ObjectName( getEngineName() + \":type=Realm,host=\" + \n                        getHostname() + \",path=\" + getPath());\n                if( mserver.isRegistered(realmName ) ) {\n                    mserver.invoke(realmName, \"init\", \n                            new Object[] {},\n                            new String[] {}\n                    );            \n                }\n            } catch( Throwable t ) {\n                if(log.isDebugEnabled())\n                    log.debug(\"No realm for this host \" + realmName);\n            }\n        }\n        \n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        boolean mainOk = false;\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                Container children[] = findChildren();\n                for (int i = 0; i < children.length; i++) {\n                    children[i].start();\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n\n                \n                mainOk = true;\n\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n            if (!mainOk) {\n                \r\n                \r\n                registerJMX();\n            }\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        \r\n        registerJMX();\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4494,"status":"M"},{"authorDate":"2010-03-25 08:59:23","commitOrder":3,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-03-25 08:59:23","endLine":4885,"groupId":"1034","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/d9d6da467b6eb99c582301f58c83b71da5b626.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4784,"status":"N"}],"commitId":"aeeccf6ff92276b861e3ced7377c8c72b745137e","commitMessage":"@@@Servlet 3. Implement ServletContainerInitializer support\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@937288 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-04-23 21:34:17","modifiedFileCount":"3","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-03-25 08:59:23","codes":[{"authorDate":"2010-05-01 21:31:46","commitOrder":4,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        preRegisterJMX();\n\n        if ((oname != null) && \n            (Registry.getRegistry(null, null).getMBeanServer().isRegistered(oname))) {\n            \r\n            \r\n            Registry.getRegistry(null, null).unregisterComponent(oname);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        \r\n        \r\n        \r\n        if( realm == null && mserver != null ) {\n            ObjectName realmName=null;\n            try {\n                realmName=new ObjectName( getEngineName() + \":type=Realm,host=\" + \n                        getHostname() + \",path=\" + getPath());\n                if( mserver.isRegistered(realmName ) ) {\n                    mserver.invoke(realmName, \"init\", \n                            new Object[] {},\n                            new String[] {}\n                    );            \n                }\n            } catch( Throwable t ) {\n                if(log.isDebugEnabled())\n                    log.debug(\"No realm for this host \" + realmName);\n            }\n        }\n        \n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        boolean mainOk = false;\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                Container children[] = findChildren();\n                for (int i = 0; i < children.length; i++) {\n                    children[i].start();\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n\n                \n                mainOk = true;\n\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n            if (!mainOk) {\n                \r\n                \r\n                registerJMX();\n            }\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        \r\n        registerJMX();\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2010-05-01 21:31:46","endLine":4848,"groupId":"2404","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/06/29e847ae912a93a668967b2afc74f5a930d389.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if( !initialized ) { \n            try {\n                init();\n            } catch( Exception ex ) {\n                throw new LifecycleException(\"Error initializaing \", ex);\n            }\n        }\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        preRegisterJMX();\n\n        if ((oname != null) && \n            (Registry.getRegistry(null, null).getMBeanServer().isRegistered(oname))) {\n            \r\n            \r\n            Registry.getRegistry(null, null).unregisterComponent(oname);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        \r\n        \r\n        \r\n        if( realm == null && mserver != null ) {\n            ObjectName realmName=null;\n            try {\n                realmName=new ObjectName( getEngineName() + \":type=Realm,host=\" + \n                        getHostname() + \",path=\" + getPath());\n                if( mserver.isRegistered(realmName ) ) {\n                    mserver.invoke(realmName, \"init\", \n                            new Object[] {},\n                            new String[] {}\n                    );            \n                }\n            } catch( Throwable t ) {\n                if(log.isDebugEnabled())\n                    log.debug(\"No realm for this host \" + realmName);\n            }\n        }\n        \n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        boolean mainOk = false;\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                Container children[] = findChildren();\n                for (int i = 0; i < children.length; i++) {\n                    children[i].start();\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n\n                \n                mainOk = true;\n\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n            if (!mainOk) {\n                \r\n                \r\n                registerJMX();\n            }\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        \r\n        registerJMX();\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4526,"status":"M"},{"authorDate":"2010-03-25 08:59:23","commitOrder":4,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-03-25 08:59:23","endLine":4885,"groupId":"1034","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/d9d6da467b6eb99c582301f58c83b71da5b626.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4784,"status":"N"}],"commitId":"9af344b2b39a621ff830fca5fe91956f6b6126c0","commitMessage":"@@@Add init() and destroy() to the Lifecycle interface\nNote that this commit breaks the shutdown hook. I'll fix that in a following commit.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@940008 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-05-01 21:31:46","modifiedFileCount":"31","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-03-25 08:59:23","codes":[{"authorDate":"2010-05-11 00:17:22","commitOrder":5,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                Container children[] = findChildren();\n                for (int i = 0; i < children.length; i++) {\n                    children[i].start();\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2010-05-11 00:17:22","endLine":4797,"groupId":"11203","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9a/0a6e29de493f77c42b130f8166c8334a623f5b.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        preRegisterJMX();\n\n        if ((oname != null) && \n            (Registry.getRegistry(null, null).getMBeanServer().isRegistered(oname))) {\n            \r\n            \r\n            Registry.getRegistry(null, null).unregisterComponent(oname);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        \r\n        \r\n        \r\n        if( realm == null && mserver != null ) {\n            ObjectName realmName=null;\n            try {\n                realmName=new ObjectName( getEngineName() + \":type=Realm,host=\" + \n                        getHostname() + \",path=\" + getPath());\n                if( mserver.isRegistered(realmName ) ) {\n                    mserver.invoke(realmName, \"init\", \n                            new Object[] {},\n                            new String[] {}\n                    );            \n                }\n            } catch( Throwable t ) {\n                if(log.isDebugEnabled())\n                    log.debug(\"No realm for this host \" + realmName);\n            }\n        }\n        \n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        boolean mainOk = false;\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                Container children[] = findChildren();\n                for (int i = 0; i < children.length; i++) {\n                    children[i].start();\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n\n                \n                mainOk = true;\n\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n            if (!mainOk) {\n                \r\n                \r\n                registerJMX();\n            }\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        \r\n        registerJMX();\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4511,"status":"M"},{"authorDate":"2010-03-25 08:59:23","commitOrder":5,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-03-25 08:59:23","endLine":4885,"groupId":"1034","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/d9d6da467b6eb99c582301f58c83b71da5b626.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4784,"status":"N"}],"commitId":"c169c761002186b131323bef30e433d4aec1b51c","commitMessage":"@@@Extend Lifecycle/MBean refactoring to ContainerBase\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@942813 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-05-11 00:17:22","modifiedFileCount":"16","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-03-25 08:59:23","codes":[{"authorDate":"2010-05-13 06:32:22","commitOrder":6,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2010-05-13 06:32:22","endLine":4795,"groupId":"143","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/2c/ca32f3e64b69bf6aa91a2fa7480161f9fdd558.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                Container children[] = findChildren();\n                for (int i = 0; i < children.length; i++) {\n                    children[i].start();\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4515,"status":"M"},{"authorDate":"2010-03-25 08:59:23","commitOrder":6,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-03-25 08:59:23","endLine":4885,"groupId":"1034","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/d9d6da467b6eb99c582301f58c83b71da5b626.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4784,"status":"N"}],"commitId":"ffd289db20a0b7a13b4021e6e95b8ffc30caac09","commitMessage":"@@@Wrappers are started when added to the Context (since the Context is already starting). Don't try and start them twice.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@943726 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-05-13 06:32:22","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-03-25 08:59:23","codes":[{"authorDate":"2010-05-14 04:04:05","commitOrder":7,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2010-05-14 04:04:05","endLine":4802,"groupId":"2031","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/8e/72e70effa6d22e089d9059692448d351759dfc.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4515,"status":"M"},{"authorDate":"2010-03-25 08:59:23","commitOrder":7,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-03-25 08:59:23","endLine":4885,"groupId":"1034","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/d9d6da467b6eb99c582301f58c83b71da5b626.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4784,"status":"N"}],"commitId":"02a8ac2eef59a39065238dd7523be4500eeb2c44","commitMessage":"@@@Essentially revert r943726\nChildren may be added prior to calling Context.start() and they *do* need to be started in that case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@943995 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-05-14 04:04:05","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-03-25 08:59:23","codes":[{"authorDate":"2010-07-02 18:01:32","commitOrder":8,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2010-07-02 18:01:32","endLine":4847,"groupId":"7561","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b4/a1bd5fcddb2169ca48cf49bb066547f858ab02.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = \n                \tbuildInjectionMap(getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager\n                \t(context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4551,"status":"M"},{"authorDate":"2010-03-25 08:59:23","commitOrder":8,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-03-25 08:59:23","endLine":4885,"groupId":"1034","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/d9d6da467b6eb99c582301f58c83b71da5b626.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4784,"status":"N"}],"commitId":"0f90fa9e0eefbee1a23258ec289cf08e0f87b754","commitMessage":"@@@Additional debug logging for manager selection\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@959931 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-07-02 18:01:32","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-03-25 08:59:23","codes":[{"authorDate":"2010-10-08 05:53:55","commitOrder":9,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager(\n                        context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2010-10-08 05:53:55","endLine":4858,"groupId":"7561","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b8/0276fc0f759067e381ac91986c44ba84a2433b.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager(\n                        context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4559,"status":"M"},{"authorDate":"2010-03-25 08:59:23","commitOrder":9,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-03-25 08:59:23","endLine":4885,"groupId":"1034","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/d9d6da467b6eb99c582301f58c83b71da5b626.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4784,"status":"N"}],"commitId":"2db864e01dfeede1c55de645d01ad69b247b59c1","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49987\nFix thread safety issue with population of servlet context initialization parameters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1005647 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-10-08 05:53:55","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-03-25 08:59:23","codes":[{"authorDate":"2010-11-01 10:04:53","commitOrder":10,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager(\n                        context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2010-11-01 10:04:53","endLine":5078,"groupId":"7561","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/76/880ab460225d7a70fab6b82a5a157b2c6c1718.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + (\"\".equals(getName()) ? \"ROOT\" : getName()));\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager(\n                        context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4779,"status":"M"},{"authorDate":"2010-03-25 08:59:23","commitOrder":10,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-03-25 08:59:23","endLine":4885,"groupId":"1034","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/d9d6da467b6eb99c582301f58c83b71da5b626.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4784,"status":"N"}],"commitId":"40f87363ea4f5353c0e00e29015363af6a27cb37","commitMessage":"@@@Parallel deployment\n- More work separating Context.name & Context.path\n- Review use of Context.getName() and Context.getPath() and use the correct one\n- Start to add webappVersion property to Context (many components not version aware - e.g. Manager app)\n- Set version when deploying apps if version is specified\n- Include version in Context.name if version is specified\n- New ContextName util class to handle all path/name/version etc translations\n\nIn most cases the behaviour is unchanged if the version is not specified. The one exception is JMX ObjectNames that used to contain a key value pair \"path=...\". Since context path is no longer unique when using versions.  this has been changed to \"context=...\" and the context name used which is unique.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1029527 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-11-01 10:04:53","modifiedFileCount":"22","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-03-25 08:59:23","codes":[{"authorDate":"2010-12-08 19:36:49","commitOrder":11,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager(\n                        context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2010-12-08 19:36:49","endLine":5062,"groupId":"7561","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/5b/c5cd39ee769297cb93c025f75c542b43ac5b2a.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager(\n                        context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            if (ok) {\n                postWelcomeFiles();\n            }\n            \n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4767,"status":"M"},{"authorDate":"2010-03-25 08:59:23","commitOrder":11,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-03-25 08:59:23","endLine":4885,"groupId":"1034","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/d9d6da467b6eb99c582301f58c83b71da5b626.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4784,"status":"N"}],"commitId":"ebacad8c7dfc25b1c42a4fdac38ab45b97a52010","commitMessage":"@@@Remove unused welcome file handling code\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1043364 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-12-08 19:36:49","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-12-10 06:11:27","codes":[{"authorDate":"2010-12-10 06:11:27","commitOrder":12,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager(\n                        context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return listenerStart();\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return filterStart();\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2010-12-10 06:11:27","endLine":5107,"groupId":"7561","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/50/08661918ee13aede3b1ede47b7e54bf246cad7.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                unbindThread(oldCCL);\n\n                \r\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager(\n                        context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error( \"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4769,"status":"M"},{"authorDate":"2010-12-10 06:11:27","commitOrder":12,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-12-10 06:11:27","endLine":5305,"groupId":"8156","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/50/08661918ee13aede3b1ede47b7e54bf246cad7.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            Container[] children = findChildren();\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            \r\n            super.threadStop();\n\n            if ((manager != null) && (manager instanceof Lifecycle)) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5189,"status":"M"}],"commitId":"e0d603a06e75f7301a6a9e9f395bc8f9fe5cdcca","commitMessage":"@@@bug 49159: Improve ThreadLocal memory leak clean-up \nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=49159\n\nUse a dedicated thread when calling web application code when it is started and stopped (calls to Listeners.  Filters.  Servlets).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1044145 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-12-10 06:11:27","modifiedFileCount":"1","status":"M","submitter":"Sylvain Laurent"},{"authorTime":"2010-12-13 22:50:17","codes":[{"authorDate":"2010-12-13 22:50:17","commitOrder":13,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2010-12-13 22:50:17","endLine":5103,"groupId":"15061","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/04/e22c6c284addf2ab690d5e46de259e91b945ee.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\", \n                                                        this.getObjectName(), \n                                                        sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((docBase != null) && (docBase.endsWith(\".war\")) && (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (namingContextListener == null) {\n                namingContextListener = new NamingContextListener();\n                namingContextListener.setName(getNamingContextName());\n                addLifecycleListener(namingContextListener);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (instanceManager == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && namingContextListener != null) {\n                    context = namingContextListener.getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                instanceManager = new DefaultInstanceManager(\n                        context, injectionMap, this, this.getClass().getClassLoader());\n                getServletContext().setAttribute(InstanceManager.class.getName(), instanceManager);\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return listenerStart();\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return filterStart();\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4759,"status":"M"},{"authorDate":"2010-12-13 22:50:17","commitOrder":13,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2010-12-13 22:50:17","endLine":5302,"groupId":"1988","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/04/e22c6c284addf2ab690d5e46de259e91b945ee.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber++);\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5185,"status":"M"}],"commitId":"108bab7293a589c481babb5ce5fca20a9f2caa4f","commitMessage":"@@@Fix various FindBugs and Eclipse warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1045156 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-12-13 22:50:17","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-10 07:13:00","codes":[{"authorDate":"2011-02-10 07:13:00","commitOrder":14,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n        \n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2011-02-10 07:13:00","endLine":5220,"groupId":"15061","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e6/598cfdbf978ee6e93e7b063936d98f0ff9b8b1.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4870,"status":"M"},{"authorDate":"2011-02-10 07:13:00","commitOrder":14,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.stop();\n        }\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-02-10 07:13:00","endLine":5425,"groupId":"1988","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e6/598cfdbf978ee6e93e7b063936d98f0ff9b8b1.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5302,"status":"M"}],"commitId":"9376f1d05845166cd94bd1431f3e489e8f38fd11","commitMessage":"@@@Ensure NamingResources follows correct lifecycle\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1069166 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-02-10 07:13:00","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-03-09 06:15:34","codes":[{"authorDate":"2011-02-10 07:13:00","commitOrder":15,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n        \n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2011-02-10 07:13:00","endLine":5220,"groupId":"15061","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e6/598cfdbf978ee6e93e7b063936d98f0ff9b8b1.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n        \n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4870,"status":"N"},{"authorDate":"2011-03-09 06:15:34","commitOrder":15,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        if (namingResources != null) {\n            namingResources.stop();\n        }\n        \n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-03-09 06:15:34","endLine":5496,"groupId":"1988","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f7/4bb75bd753c63fbb63eea9b0105772ccd6e8d8.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.stop();\n        }\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5375,"status":"M"}],"commitId":"1211dbe4baff4dad12fa503076f0c7e0ddd011a3","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=25060\nWhen stopping naming resources look for DataSource resources with a zero-arg close() method and call it if one is found\nWorks with Commons DBCP.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1079575 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-03-09 06:15:34","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-03-30 20:26:39","codes":[{"authorDate":"2011-02-10 07:13:00","commitOrder":16,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n        \n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2011-02-10 07:13:00","endLine":5220,"groupId":"15061","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e6/598cfdbf978ee6e93e7b063936d98f0ff9b8b1.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n        \n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4870,"status":"N"},{"authorDate":"2011-03-30 20:26:39","commitOrder":16,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-03-30 20:26:39","endLine":5505,"groupId":"0","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/97/cbdc08dfc0aae6dc3b0979a17d13613c8c241d.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        if (namingResources != null) {\n            namingResources.stop();\n        }\n        \n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5381,"status":"M"}],"commitId":"b3d9ee80697ffa614be25f06564644a3b3c66bf0","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50991\nStop the resources after they have been unbound rather than before\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1086928 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-03-30 20:26:39","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-03-30 20:48:13","codes":[{"authorDate":"2011-02-10 07:13:00","commitOrder":17,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n        \n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2011-02-10 07:13:00","endLine":5220,"groupId":"15061","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e6/598cfdbf978ee6e93e7b063936d98f0ff9b8b1.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n        \n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4870,"status":"N"},{"authorDate":"2011-03-30 20:48:13","commitOrder":17,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-03-30 20:48:13","endLine":5506,"groupId":"9037","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/23/1ad3b5a19942c892d490cca47cee34f03f82d9.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5381,"status":"M"}],"commitId":"5c564631508dd1d3ccb69cc23547d852c916ec94","commitMessage":"@@@Correct fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50991\nStop resource after app has finished with them but before they are unbound\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1086935 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-03-30 20:48:13","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-04-01 22:24:43","codes":[{"authorDate":"2011-02-10 07:13:00","commitOrder":18,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n        \n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2011-02-10 07:13:00","endLine":5220,"groupId":"15061","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e6/598cfdbf978ee6e93e7b063936d98f0ff9b8b1.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n        \n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4870,"status":"N"},{"authorDate":"2011-04-01 22:24:43","commitOrder":18,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            \r\n            \r\n            RunnableWithLifecycleException stop =\n                    new RunnableWithLifecycleException() {\n                @Override\n                public void run() {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            try {\n                                children[i].stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if (manager != null && manager instanceof Lifecycle) {\n                            try {\n                                ((Lifecycle) manager).stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        listenerStop();\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            };\n            \n            Thread t = new Thread(stop);\n            t.setName(\"stop children - \" + getObjectName().toString());\n            t.run();\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                \r\n                throw new LifecycleException(e);\n            }\n            if (stop.getLifecycleException() != null) {\n                throw stop.getLifecycleException();\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-04-01 22:24:43","endLine":5543,"groupId":"7981","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ed/9869e41b4d5f8c31d9a424ddc4daec34defdc5.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            DedicatedThreadExecutor.executeInOwnThread(\n                new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            children[i].stop();\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if ((manager != null) && \n                                (manager instanceof Lifecycle)) {\n                            ((Lifecycle) manager).stop();\n                        }\n            \n                        \r\n                        listenerStop();\n                        return null;\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            });\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5395,"status":"M"}],"commitId":"a070c4e8aab6ec14ef15823d8aa4750dc26ff6a3","commitMessage":"@@@Workaround shutdown issue in unit tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1087715 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-04-01 22:24:43","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-07-04 20:50:24","codes":[{"authorDate":"2011-02-10 07:13:00","commitOrder":19,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n        \n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2011-02-10 07:13:00","endLine":5220,"groupId":"15061","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e6/598cfdbf978ee6e93e7b063936d98f0ff9b8b1.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n        \n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4870,"status":"N"},{"authorDate":"2011-07-04 20:50:24","commitOrder":19,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            \r\n            \r\n            RunnableWithLifecycleException stop =\n                    new RunnableWithLifecycleException() {\n                @Override\n                public void run() {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            try {\n                                children[i].stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if (manager != null && manager instanceof Lifecycle) {\n                            try {\n                                ((Lifecycle) manager).stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        listenerStop();\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            };\n            \n            Thread t = new Thread(stop);\n            t.setName(\"stop children - \" + getObjectName().toString());\n            t.start();\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                \r\n                throw new LifecycleException(e);\n            }\n            if (stop.getLifecycleException() != null) {\n                throw stop.getLifecycleException();\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-07-04 20:50:24","endLine":5565,"groupId":"7981","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/41/f061706d859ad4e1a72c8208feeef0c8c93f5f.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            \r\n            \r\n            RunnableWithLifecycleException stop =\n                    new RunnableWithLifecycleException() {\n                @Override\n                public void run() {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            try {\n                                children[i].stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if (manager != null && manager instanceof Lifecycle) {\n                            try {\n                                ((Lifecycle) manager).stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        listenerStop();\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            };\n            \n            Thread t = new Thread(stop);\n            t.setName(\"stop children - \" + getObjectName().toString());\n            t.run();\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                \r\n                throw new LifecycleException(e);\n            }\n            if (stop.getLifecycleException() != null) {\n                throw stop.getLifecycleException();\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5417,"status":"M"}],"commitId":"eb9837364aec530e51e613e6d29306d2fe6687c3","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51467\nstart() not run()\nPatch provided by Felix Schumacher\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1142643 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-07-04 20:50:24","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-08-06 00:31:41","codes":[{"authorDate":"2011-02-10 07:13:00","commitOrder":20,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n        \n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2011-02-10 07:13:00","endLine":5220,"groupId":"15061","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e6/598cfdbf978ee6e93e7b063936d98f0ff9b8b1.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n        \n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n        \n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n        \n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n                \n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n                \n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n                \n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n                \n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                } \n                \n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n            \n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n            \n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n    \n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n            \n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n            \n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n        \n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification = \n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4870,"status":"N"},{"authorDate":"2011-08-06 00:31:41","commitOrder":20,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            \r\n            \r\n            RunnableWithLifecycleException stop =\n                    new RunnableWithLifecycleException() {\n                @Override\n                public void run() {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            try {\n                                children[i].stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if (manager != null && manager instanceof Lifecycle &&\n                                ((Lifecycle) manager).getState().isAvailable()) {\n                            try {\n                                ((Lifecycle) manager).stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        listenerStop();\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            };\n            \n            Thread t = new Thread(stop);\n            t.setName(\"stop children - \" + getObjectName().toString());\n            t.start();\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                \r\n                throw new LifecycleException(e);\n            }\n            if (stop.getLifecycleException() != null) {\n                throw stop.getLifecycleException();\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-08-06 00:31:41","endLine":5567,"groupId":"12049","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b2/e8cd3a4255e7c91d68cd59b3ffea8eb9900d77.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopping\", this.getObjectName(), \n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            \r\n            \r\n            RunnableWithLifecycleException stop =\n                    new RunnableWithLifecycleException() {\n                @Override\n                public void run() {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            try {\n                                children[i].stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        filterStop();\n            \n                        \r\n                        threadStop();\n            \n                        if (manager != null && manager instanceof Lifecycle) {\n                            try {\n                                ((Lifecycle) manager).stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n            \n                        \r\n                        listenerStop();\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            };\n            \n            Thread t = new Thread(stop);\n            t.setName(\"stop children - \" + getObjectName().toString());\n            t.start();\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                \r\n                throw new LifecycleException(e);\n            }\n            if (stop.getLifecycleException() != null) {\n                throw stop.getLifecycleException();\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n            \n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = \n                new Notification(\"j2ee.state.stopped\", this.getObjectName(), \n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n        \n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n        \n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5417,"status":"M"}],"commitId":"1088ff47fb195e1e933ae6679d96ceffa0a3d937","commitMessage":"@@@Prevent spurious log warnings on container stop if a child component has previously failed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1154298 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-08-06 00:31:41","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-10-28 15:37:34","codes":[{"authorDate":"2011-10-28 15:37:34","commitOrder":21,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2011-10-28 15:37:34","endLine":5194,"groupId":"15061","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c9/e55177f9bdc9460a10b1c326ee7993712474b2.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();\n        try {\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean listenerStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(listenerStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!listenerStarted.booleanValue()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                Boolean filterStarted =\n                    temporaryExecutor.execute(new Callable<Boolean>() {\n                        @Override\n                        public Boolean call() throws Exception {\n                            ClassLoader old = bindThread();\n                            try {\n                                return Boolean.valueOf(filterStart());\n                            } finally {\n                                unbindThread(old);\n                            }\n                        }\n                    });\n                if (!filterStarted.booleanValue()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                \r\n                \r\n                \r\n                temporaryExecutor.execute(new Callable<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        ClassLoader old = bindThread();\n                        try {\n                            loadOnStartup(findChildren());\n                            return null;\n                        } finally {\n                            unbindThread(old);\n                        }\n                    }\n                });\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n            temporaryExecutor.shutdown();\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4891,"status":"M"},{"authorDate":"2011-10-28 15:37:34","commitOrder":21,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-10-28 15:37:34","endLine":5399,"groupId":"13250","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c9/e55177f9bdc9460a10b1c326ee7993712474b2.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n            \r\n            \r\n            \r\n            \r\n            \r\n            RunnableWithLifecycleException stop =\n                    new RunnableWithLifecycleException() {\n                @Override\n                public void run() {\n                    ClassLoader old = bindThread();\n                    try {\n                        for (int i = 0; i < children.length; i++) {\n                            try {\n                                children[i].stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n\n                        \r\n                        filterStop();\n\n                        \r\n                        threadStop();\n\n                        if (manager != null && manager instanceof Lifecycle &&\n                                ((Lifecycle) manager).getState().isAvailable()) {\n                            try {\n                                ((Lifecycle) manager).stop();\n                            } catch (LifecycleException e) {\n                                le = e;\n                                return;\n                            }\n                        }\n\n                        \r\n                        listenerStop();\n                    }finally{\n                        unbindThread(old);\n                    }\n                }\n            };\n\n            Thread t = new Thread(stop);\n            t.setName(\"stop children - \" + getObjectName().toString());\n            t.start();\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                \r\n                throw new LifecycleException(e);\n            }\n            if (stop.getLifecycleException() != null) {\n                throw stop.getLifecycleException();\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5282,"status":"M"}],"commitId":"d6f68b124d917154508706eb5ace8cdd16bf3fe5","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=46264\nImplement threaded start/stop for containers\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1190185 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-10-28 15:37:34","modifiedFileCount":"8","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-10-28 15:37:34","codes":[{"authorDate":"2011-10-28 22:14:22","commitOrder":22,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2011-10-28 22:14:22","endLine":5216,"groupId":"15061","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b1/4c9f9c5abd2cd2a0a815448219528e5e881c74.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4912,"status":"M"},{"authorDate":"2011-10-28 15:37:34","commitOrder":22,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-10-28 15:37:34","endLine":5399,"groupId":"13250","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c9/e55177f9bdc9460a10b1c326ee7993712474b2.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5282,"status":"N"}],"commitId":"1eb39d074a88c5772f0260481d16d0ea81857995","commitMessage":"@@@Merge branch 'bug51744' into trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1190339 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-10-28 22:14:22","modifiedFileCount":"4","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-11-30 03:48:04","codes":[{"authorDate":"2011-11-30 03:48:04","commitOrder":23,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealm();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2011-11-30 03:48:04","endLine":5222,"groupId":"0","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/4c/6ad391bed2a50c6e31201c9f10d23e545e1845.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4917,"status":"M"},{"authorDate":"2011-11-30 03:48:04","commitOrder":23,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealm();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-11-30 03:48:04","endLine":5428,"groupId":"0","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/4c/6ad391bed2a50c6e31201c9f10d23e545e1845.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5310,"status":"M"}],"commitId":"80a7aff3e20045f428b33727a5277e62da6ba4d2","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52259\nRegression caused by bug 46264. Prevent deadlock if no Realm is\nconfigured.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1208046 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-11-30 03:48:04","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-11-30 05:57:04","codes":[{"authorDate":"2011-11-30 05:57:04","commitOrder":24,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2011-11-30 05:57:04","endLine":5222,"groupId":"15061","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a5/90cef4671be0edcd46c8ec4af79a61f3d02e2b.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealm();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4917,"status":"M"},{"authorDate":"2011-11-30 05:57:04","commitOrder":24,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2011-11-30 05:57:04","endLine":5428,"groupId":"8378","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a5/90cef4671be0edcd46c8ec4af79a61f3d02e2b.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealm();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5310,"status":"M"}],"commitId":"ea1438235a266f36413b322743f53d7ac9bc6800","commitMessage":"@@@Retain thread safety for ContainerBase.realm but don't try and\nstart/stop it multiple times\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1208096 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-11-30 05:57:04","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-01-13 04:33:45","codes":[{"authorDate":"2012-01-13 04:33:45","commitOrder":25,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2012-01-13 04:33:45","endLine":5233,"groupId":"12068","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/66/d13df8d9a5a12e810c8924771e388f6d6bd734.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n                if ((logger != null) && (logger instanceof Lifecycle))\n                    ((Lifecycle) logger).start();\n\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4930,"status":"M"},{"authorDate":"2012-01-13 04:33:45","commitOrder":25,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2012-01-13 04:33:45","endLine":5436,"groupId":"8378","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/66/d13df8d9a5a12e810c8924771e388f6d6bd734.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((logger != null) && (logger instanceof Lifecycle)) {\n                ((Lifecycle) logger).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5321,"status":"M"}],"commitId":"f7aa0b1aa11072871f8c57c92eab3f7c76e5f616","commitMessage":"@@@Logger will not implement Lifecycle. This was a leftover from the\npre-JULI logger implementation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1230763 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-01-13 04:33:45","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-01-13 04:33:45","codes":[{"authorDate":"2012-02-01 19:32:56","commitOrder":26,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2012-02-01 19:32:56","endLine":5244,"groupId":"12068","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/65/f0efd2035a269574f16bc1d83a04cf0e61b22e.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4931,"status":"M"},{"authorDate":"2012-01-13 04:33:45","commitOrder":26,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2012-01-13 04:33:45","endLine":5436,"groupId":"8378","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/66/d13df8d9a5a12e810c8924771e388f6d6bd734.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5321,"status":"N"}],"commitId":"c38e9ccabc0d20e1f88b389ab531dcbf632b0ed8","commitMessage":"@@@Remove dependency on StandardContext from WebappLoader\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1239082 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-02-01 19:32:56","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-07-13 21:38:08","codes":[{"authorDate":"2012-07-13 21:38:08","commitOrder":27,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        DirContext webappResources = getWebappResources();\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                DirContext resources = getResources();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2012-07-13 21:38:08","endLine":5377,"groupId":"10331","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/47/de48e6264c64ebe09d814431d438d51c0a010b.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, resources);\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5058,"status":"M"},{"authorDate":"2012-07-13 21:38:08","commitOrder":27,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2012-07-13 21:38:08","endLine":5593,"groupId":"8378","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/47/de48e6264c64ebe09d814431d438d51c0a010b.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5475,"status":"M"}],"commitId":"3883c752d7b3047956800fab99cde75499dbde23","commitMessage":"@@@Fix Findbugs warnings. Sync only on setter. Use ReadWriteLock instead.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1361213 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-07-13 21:38:08","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-07-13 21:38:08","codes":[{"authorDate":"2012-08-08 04:01:34","commitOrder":28,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        DirContext webappResources = getWebappResources();\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                DirContext resources = getResources();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2012-08-08 04:01:34","endLine":5349,"groupId":"13037","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/91/016e03789a232b46fa8587c300f55f20500657.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        DirContext webappResources = getWebappResources();\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                DirContext resources = getResources();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        mapper.setContext(getPath(), welcomeFiles, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5033,"status":"M"},{"authorDate":"2012-07-13 21:38:08","commitOrder":28,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2012-07-13 21:38:08","endLine":5593,"groupId":"8378","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/47/de48e6264c64ebe09d814431d438d51c0a010b.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5475,"status":"N"}],"commitId":"a4772087d2cb5b891b947c08d061d6cf6307fcc8","commitMessage":"@@@More Mapper clean-up.\nRemove the per Context Mappers\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1370482 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-08-08 04:01:34","modifiedFileCount":"6","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-10-24 06:38:16","codes":[{"authorDate":"2012-10-24 06:38:16","commitOrder":29,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2012-10-24 06:38:16","endLine":5182,"groupId":"8541","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/11/37a0c94f344baeee18df3083fccbd221a87cc4.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        DirContext webappResources = getWebappResources();\n        if (webappResources == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n            try {\n                if ((getDocBase() != null) && (getDocBase().endsWith(\".war\")) &&\n                        (!(new File(getBasePath())).isDirectory()))\n                    setResources(new WARDirContext());\n                else\n                    setResources(new FileDirContext());\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n                DirContext resources = getResources();\n                if ((resources != null) && (resources instanceof Lifecycle))\n                    ((Lifecycle) resources).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4873,"status":"M"},{"authorDate":"2012-10-24 06:38:16","commitOrder":29,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2012-10-24 06:38:16","endLine":5398,"groupId":"9473","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/11/37a0c94f344baeee18df3083fccbd221a87cc4.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            \r\n            resourcesStop();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5280,"status":"M"}],"commitId":"527baba1736d3111596fb19dba367460fdb2808c","commitMessage":"@@@Merge new resources implementation from sandbox/trunk-resources\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1401503 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-10-24 06:38:16","modifiedFileCount":"27","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-02-01 19:55:20","codes":[{"authorDate":"2013-02-01 19:55:20","commitOrder":30,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2013-02-01 19:55:20","endLine":5185,"groupId":"8541","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c6/a549c447d8b9df332b8b56edf52d9233045464.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n\n                \r\n                super.threadStart();\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4877,"status":"M"},{"authorDate":"2013-02-01 19:55:20","commitOrder":30,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2013-02-01 19:55:20","endLine":5401,"groupId":"9473","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c6/a549c447d8b9df332b8b56edf52d9233045464.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                \r\n                threadStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5283,"status":"M"}],"commitId":"d2f6a672e97e117c787e9cf247961f77a7bc5f8f","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54507\nDon't start expiring sessions until the web application is fully started. Stop expiring sessions as soon as the web application is stopped.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1441403 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-02-01 19:55:20","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-02-01 19:55:20","codes":[{"authorDate":"2013-03-11 07:15:01","commitOrder":31,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2013-03-11 07:15:01","endLine":5277,"groupId":"8541","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d3/b1c9b999313b2eab12b348d52d7abf72c94049.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    \r\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4969,"status":"M"},{"authorDate":"2013-02-01 19:55:20","commitOrder":31,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2013-02-01 19:55:20","endLine":5401,"groupId":"9473","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c6/a549c447d8b9df332b8b56edf52d9233045464.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5283,"status":"N"}],"commitId":"7fc1ec64ce9496b7415b39281c3a8397f26d1803","commitMessage":"@@@Log message on SCI error\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1454953 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-03-11 07:15:01","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-02-01 19:55:20","codes":[{"authorDate":"2013-06-20 05:43:26","commitOrder":32,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods();\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2013-06-20 05:43:26","endLine":5342,"groupId":"8541","id":63,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d2/5c3047ccaa4aa7a38e18c74cd65b4f74eb00f4.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5027,"status":"M"},{"authorDate":"2013-02-01 19:55:20","commitOrder":32,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2013-02-01 19:55:20","endLine":5401,"groupId":"9473","id":64,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c6/a549c447d8b9df332b8b56edf52d9233045464.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5283,"status":"N"}],"commitId":"f78c1a41a4523b87fafa05154985aca9250a08a6","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53987\nServlet 3.1. Log uncovered HTTP methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1494779 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-06-20 05:43:26","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-02-01 19:55:20","codes":[{"authorDate":"2013-06-21 20:41:13","commitOrder":33,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2013-06-21 20:41:13","endLine":5358,"groupId":"8541","id":65,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/19/5b3dd586c14e9a11e310d599afbf99abb4b5fd.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods();\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5043,"status":"M"},{"authorDate":"2013-02-01 19:55:20","commitOrder":33,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2013-02-01 19:55:20","endLine":5401,"groupId":"9473","id":66,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c6/a549c447d8b9df332b8b56edf52d9233045464.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5283,"status":"N"}],"commitId":"7682a4f48a62b007af3a709c9ee5b91a5aab1872","commitMessage":"@@@Expand test cases for servlet security annotations to include deny uncovered http methods.\nFix the failure identified by violetagg\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1495414 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-06-21 20:41:13","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-02-01 19:55:20","codes":[{"authorDate":"2013-07-09 05:02:07","commitOrder":34,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2013-07-09 05:02:07","endLine":5358,"groupId":"8772","id":67,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ea/1a88711fe5bff6514f9f2729bd4ede3da0cacc.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResources(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5043,"status":"M"},{"authorDate":"2013-02-01 19:55:20","commitOrder":34,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2013-02-01 19:55:20","endLine":5401,"groupId":"9473","id":68,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c6/a549c447d8b9df332b8b56edf52d9233045464.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5283,"status":"N"}],"commitId":"8a4de72b07021169254d18efc73618d6a723aa77","commitMessage":"@@@NamingResources -> NamingResourcesImpl in preparation for new interface\nNamingResources\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1500947 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-07-09 05:02:07","modifiedFileCount":"17","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-02-01 19:55:20","codes":[{"authorDate":"2013-11-05 07:59:24","commitOrder":35,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2013-11-05 07:59:24","endLine":5344,"groupId":"8772","id":69,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b4/a5ce77263dce381eb628466c17c9ecdb87d5c8.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        if (getLoader() instanceof WebappLoader) {\n            ((WebappLoader) getLoader()).closeJARs(true);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5035,"status":"M"},{"authorDate":"2013-02-01 19:55:20","commitOrder":35,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2013-02-01 19:55:20","endLine":5401,"groupId":"9473","id":70,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c6/a549c447d8b9df332b8b56edf52d9233045464.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5283,"status":"N"}],"commitId":"70c52d1f7c5645b725e46ea1335f199c18be7082","commitMessage":"@@@Remove unused JarFiles - class loader resources in JARs are obtained via\nWebResources\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1538820 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-11-05 07:59:24","modifiedFileCount":"3","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-02-01 19:55:20","codes":[{"authorDate":"2013-11-05 08:00:23","commitOrder":36,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2013-11-05 08:00:23","endLine":5311,"groupId":"10221","id":71,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/4d/4efc78b6e78760cdab874e75e80dc6afc60af9.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"antiJARLocking\", getAntiJARLocking());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5003,"status":"M"},{"authorDate":"2013-02-01 19:55:20","commitOrder":36,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2013-02-01 19:55:20","endLine":5401,"groupId":"9473","id":72,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c6/a549c447d8b9df332b8b56edf52d9233045464.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5283,"status":"N"}],"commitId":"6ed92b690160a279fc051b04d1ea71e67f50ac5d","commitMessage":"@@@More removal of anti JAR locking\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1538822 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-11-05 08:00:23","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-02-01 19:55:20","codes":[{"authorDate":"2013-11-26 04:14:34","commitOrder":37,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2013-11-26 04:14:34","endLine":5316,"groupId":"10221","id":73,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a6/18d4f3a6dc6067ebaf904adce4a80e83f60e86.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            if (!resourcesStart()) {\n                log.error( \"Error in resourceStart()\");\n                ok = false;\n            }\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5011,"status":"M"},{"authorDate":"2013-02-01 19:55:20","commitOrder":37,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2013-02-01 19:55:20","endLine":5401,"groupId":"9473","id":74,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c6/a549c447d8b9df332b8b56edf52d9233045464.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5283,"status":"N"}],"commitId":"57e85af6fc4ae54996e794185fa281d1248965b0","commitMessage":"@@@Remove unused code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1545387 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-11-26 04:14:34","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2014-01-22 04:14:33","codes":[{"authorDate":"2013-11-26 04:14:34","commitOrder":38,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2013-11-26 04:14:34","endLine":5316,"groupId":"10221","id":75,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a6/18d4f3a6dc6067ebaf904adce4a80e83f60e86.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5011,"status":"N"},{"authorDate":"2014-01-22 04:14:33","commitOrder":38,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager != null && manager instanceof Lifecycle &&\n                    ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2014-01-22 04:14:33","endLine":5455,"groupId":"584","id":76,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0c/4ec3cf992c6342f30654772886448d4be7ead3.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            \r\n            final Container[] children = findChildren();\n\n            ClassLoader old = bindThread();\n            try {\n                \r\n                threadStop();\n\n                for (int i = 0; i < children.length; i++) {\n                    children[i].stop();\n                }\n\n                \r\n                filterStop();\n\n                Manager manager = getManager();\n                if (manager != null && manager instanceof Lifecycle &&\n                        ((Lifecycle) manager).getState().isAvailable()) {\n                    ((Lifecycle) manager).stop();\n                }\n\n                \r\n                listenerStop();\n            } finally{\n                unbindThread(old);\n            }\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5343,"status":"M"}],"commitId":"4a13d97ac3667dd5f0efdadf7a99265edda3027f","commitMessage":"@@@Simplify bind and unbind on stop\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1560164 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-22 04:14:33","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2014-01-22 04:14:33","codes":[{"authorDate":"2014-01-22 04:15:06","commitOrder":39,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error( \"Error getConfigured\");\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2014-01-22 04:15:06","endLine":5222,"groupId":"16578","id":77,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/30/9a32da3b4ed8a9d7a96aa5de108290559508c8.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n\n            if (ok) {\n\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        if (!getConfigured()) {\n            log.error( \"Error getConfigured\");\n            ok = false;\n        }\n\n        \r\n        if (ok)\n            getServletContext().setAttribute\n                (Globals.RESOURCES_ATTR, getResources());\n\n        \r\n        oldCCL = bindThread();\n\n        if (ok ) {\n            if (getInstanceManager() == null) {\n                javax.naming.Context context = null;\n                if (isUseNaming() && getNamingContextListener() != null) {\n                    context = getNamingContextListener().getEnvContext();\n                }\n                Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                        getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                setInstanceManager(new DefaultInstanceManager(context,\n                        injectionMap, this, this.getClass().getClassLoader()));\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n            }\n        }\n\n        try {\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4928,"status":"M"},{"authorDate":"2014-01-22 04:14:33","commitOrder":39,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager != null && manager instanceof Lifecycle &&\n                    ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2014-01-22 04:14:33","endLine":5455,"groupId":"584","id":78,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0c/4ec3cf992c6342f30654772886448d4be7ead3.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager != null && manager instanceof Lifecycle &&\n                    ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5343,"status":"N"}],"commitId":"dde75d0bd215902cb695f82baeaf21d1becf274f","commitMessage":"@@@Simplify bind and unbind on start\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1560165 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-22 04:15:06","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2014-01-22 04:14:33","codes":[{"authorDate":"2014-03-13 18:23:35","commitOrder":40,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error( \"Error getConfigured\");\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2014-03-13 18:23:35","endLine":5227,"groupId":"16578","id":79,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0e/9ab394b50636782768d773355769055b3dbba1.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error( \"Error getConfigured\");\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) getManager()).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4933,"status":"M"},{"authorDate":"2014-01-22 04:14:33","commitOrder":40,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager != null && manager instanceof Lifecycle &&\n                    ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2014-01-22 04:14:33","endLine":5455,"groupId":"584","id":80,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0c/4ec3cf992c6342f30654772886448d4be7ead3.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager != null && manager instanceof Lifecycle &&\n                    ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5343,"status":"N"}],"commitId":"8ea00e6ec47f56b0f309d31bfd359b67f0a5a8dc","commitMessage":"@@@Reduce calls to getManager().\n(That is not a simple getter.  but it performs some locking).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1577087 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-13 18:23:35","modifiedFileCount":"1","status":"M","submitter":"Konstantin Kolinko"},{"authorTime":"2014-01-22 04:14:33","codes":[{"authorDate":"2014-05-19 05:16:42","commitOrder":41,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error( \"Error getConfigured\");\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(\"Error loadOnStartup\");\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2014-05-19 05:16:42","endLine":5271,"groupId":"16578","id":81,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f0/0b79bd282779349ed33151ce621b22f3599508.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error( \"Error getConfigured\");\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                loadOnStartup(findChildren());\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4974,"status":"M"},{"authorDate":"2014-01-22 04:14:33","commitOrder":41,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager != null && manager instanceof Lifecycle &&\n                    ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2014-01-22 04:14:33","endLine":5455,"groupId":"584","id":82,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0c/4ec3cf992c6342f30654772886448d4be7ead3.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager != null && manager instanceof Lifecycle &&\n                    ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5343,"status":"N"}],"commitId":"0fcfda8f062995ea9824fe915ead90d694b67856","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56461\nNew option to make context startup fail if a load-on-startup servlet fails\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1595690 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-05-19 05:16:42","modifiedFileCount":"3","status":"M","submitter":"Sylvain Laurent"},{"authorTime":"2014-12-14 20:32:22","codes":[{"authorDate":"2014-12-14 20:32:22","commitOrder":42,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error( \"Error getConfigured\");\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(\"Error loadOnStartup\");\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2014-12-14 20:32:22","endLine":5206,"groupId":"13962","id":83,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/54/04987b1d792eb571c15ef0078037a2c8abadd5.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if ((loader != null) && (loader instanceof Lifecycle))\n                    ((Lifecycle) loader).start();\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if ((cluster != null) && (cluster instanceof Lifecycle))\n                    ((Lifecycle) cluster).start();\n                Realm realm = getRealmInternal();\n                if ((realm != null) && (realm instanceof Lifecycle))\n                    ((Lifecycle) realm).start();\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error( \"Error getConfigured\");\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if ((manager != null) && (manager instanceof Lifecycle)) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(\"Error loadOnStartup\");\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4906,"status":"M"},{"authorDate":"2014-12-14 20:32:22","commitOrder":42,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2014-12-14 20:32:22","endLine":5427,"groupId":"13887","id":84,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/54/04987b1d792eb571c15ef0078037a2c8abadd5.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager != null && manager instanceof Lifecycle &&\n                    ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if ((realm != null) && (realm instanceof Lifecycle)) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if ((cluster != null) && (cluster instanceof Lifecycle)) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if ((loader != null) && (loader instanceof Lifecycle)) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5316,"status":"M"}],"commitId":"4765802b6648d13d7920cfdf6bd1fe05b7f3af8b","commitMessage":"@@@Remove unnecessary \"x != null\" tests before \"x instanceof ...\" tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1645449 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-12-14 20:32:22","modifiedFileCount":"19","status":"M","submitter":"Mark Thomas"},{"authorTime":"2014-12-14 20:32:22","codes":[{"authorDate":"2015-01-28 03:39:03","commitOrder":43,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error( \"Error getConfigured\");\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(\"Error loadOnStartup\");\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        getResources().backgroundProcess();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2015-01-28 03:39:03","endLine":5228,"groupId":"13962","id":85,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/08/eb41851da616ac383284e2dd687bc9b90bf274.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error( \"Error getConfigured\");\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(\"Error loadOnStartup\");\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4925,"status":"M"},{"authorDate":"2014-12-14 20:32:22","commitOrder":43,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2014-12-14 20:32:22","endLine":5427,"groupId":"13887","id":86,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/54/04987b1d792eb571c15ef0078037a2c8abadd5.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5316,"status":"N"}],"commitId":"478cb393341bef58e8d3111ea3f70b88dd752334","commitMessage":"@@@Start tends to make extensive use of resources. Trigger a clean-up once\nit finishes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1655132 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-01-28 03:39:03","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2014-12-14 20:32:22","codes":[{"authorDate":"2015-01-29 17:28:07","commitOrder":44,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error( \"Error getConfigured\");\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(\"Error loadOnStartup\");\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2015-01-29 17:28:07","endLine":5231,"groupId":"13962","id":87,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/85/5de614944c2f1697325a404545767565f63b05.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error( \"Error getConfigured\");\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(\"Error loadOnStartup\");\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        getResources().backgroundProcess();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4925,"status":"M"},{"authorDate":"2014-12-14 20:32:22","commitOrder":44,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2014-12-14 20:32:22","endLine":5427,"groupId":"13887","id":88,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/54/04987b1d792eb571c15ef0078037a2c8abadd5.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5316,"status":"N"}],"commitId":"fe8bdf12d8c184e2b67ed8f24c648d588e64ba57","commitMessage":"@@@Separate out the gc process from the background process so gc() can be called independently.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1655558 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-01-29 17:28:07","modifiedFileCount":"7","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-03-14 18:59:38","codes":[{"authorDate":"2015-01-29 17:28:07","commitOrder":45,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error( \"Error getConfigured\");\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(\"Error loadOnStartup\");\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2015-01-29 17:28:07","endLine":5231,"groupId":"13962","id":89,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/85/5de614944c2f1697325a404545767565f63b05.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error( \"Error getConfigured\");\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(\"Error loadOnStartup\");\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4925,"status":"N"},{"authorDate":"2015-03-14 18:59:38","commitOrder":45,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2015-03-14 18:59:38","endLine":5464,"groupId":"13887","id":90,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9a/be57a71d6c72e5303a8c9000e6c5ecce6959bd.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        instanceManager = null;\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5353,"status":"M"}],"commitId":"61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57704\nAccess instanceManager via get/set methods.\nFix potential NPEs. In web app start if a problem occur prior to instanceManager initialization then:\n- SCI.onStart will fail if it tries to use instanceManager\n- During web app stop.  StandardContext.listenerStop will fail if it tries to use instanceManager\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1666649 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-14 18:59:38","modifiedFileCount":"2","status":"M","submitter":"Violeta Georgieva Georgieva"},{"authorTime":"2015-03-14 18:59:38","codes":[{"authorDate":"2015-04-23 04:05:02","commitOrder":46,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2015-04-23 04:05:02","endLine":5243,"groupId":"2809","id":91,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c1/fd5622dc21b828d627990527e1606e7cbdae6c.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Error initializing resources: \" + e.getMessage());\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(\"Error in dependencyCheck\", ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error( \"Error getConfigured\");\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error( \"Error listenerStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(\"Error manager.start()\", e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(\"Error filterStart\");\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(\"Error loadOnStartup\");\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4937,"status":"M"},{"authorDate":"2015-03-14 18:59:38","commitOrder":46,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2015-03-14 18:59:38","endLine":5464,"groupId":"13887","id":92,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9a/be57a71d6c72e5303a8c9000e6c5ecce6959bd.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5353,"status":"N"}],"commitId":"3e6d8224cd81232255328817770bc9b7a94b6da3","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57841\nImprove error logging during context start\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1675486 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-23 04:05:02","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-03-14 18:59:38","codes":[{"authorDate":"2015-09-14 17:27:05","commitOrder":47,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new LegacyCookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2015-09-14 17:27:05","endLine":5250,"groupId":"2809","id":93,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/61/fb936f755ce11acc5499820c177413a8491074.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4939,"status":"M"},{"authorDate":"2015-03-14 18:59:38","commitOrder":47,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2015-03-14 18:59:38","endLine":5464,"groupId":"13887","id":94,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9a/be57a71d6c72e5303a8c9000e6c5ecce6959bd.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5353,"status":"N"}],"commitId":"a3173600a93668faff844d397df41cc3688ba662","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58369\nFix a rare data race in the code that obtains the CookieProcessor instance for the Context.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1702881 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-09-14 17:27:05","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-03-14 18:59:38","codes":[{"authorDate":"2015-09-14 17:34:38","commitOrder":48,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2015-09-14 17:34:38","endLine":5250,"groupId":"2809","id":95,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/16/c504e0007d9d983af8aaa8eb963845f39fa181.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new LegacyCookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4939,"status":"M"},{"authorDate":"2015-03-14 18:59:38","commitOrder":48,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2015-03-14 18:59:38","endLine":5464,"groupId":"13887","id":96,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9a/be57a71d6c72e5303a8c9000e6c5ecce6959bd.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5353,"status":"N"}],"commitId":"c58ae0f34c298d3513eb6ab907afc9b4cd92f82e","commitMessage":"@@@Switch the default cookie parser to the one based on RFC6265\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1702884 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-09-14 17:34:38","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-11-06 01:29:20","codes":[{"authorDate":"2015-11-06 01:29:20","commitOrder":49,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2015-11-06 01:29:20","endLine":5258,"groupId":"2809","id":97,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d5/62d87f93bd8adb0b4c2b066df86ffc05b65bfd.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                    getServletContext().setAttribute(\n                            InstanceManager.class.getName(), getInstanceManager());\n                }\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4946,"status":"M"},{"authorDate":"2015-11-06 01:29:20","commitOrder":49,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2015-11-06 01:29:20","endLine":5483,"groupId":"13887","id":98,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d5/62d87f93bd8adb0b4c2b066df86ffc05b65bfd.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ((Lifecycle) loader).stop();\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5368,"status":"M"}],"commitId":"b28cbbaa1c9b1919b3f2aa2931eac98fc6d310c8","commitMessage":"@@@- Add (another.  sorry) classloader keyed static map to retrieve the InstanceManager from anywhere.  as a last resort.\n- Pass along the application classloader during upgrade.  using a token object.\n- Don't use the InstanceManager for internal upgrade handlers (no naming.  etc).  this would optimize websockets and HTTP/2 upgrade.\n- Set a proper context classloader environment for upgrade handler init/destroy and use the InstanceManager.  except for internal handlers where they are responsible for it.\n- Support the InstanceManager for the websockets client endpoints.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1712826 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-06 01:29:20","modifiedFileCount":"16","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2015-11-06 01:29:20","codes":[{"authorDate":"2015-11-21 06:26:21","commitOrder":50,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2015-11-21 06:26:21","endLine":5334,"groupId":"13279","id":99,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/fe3e1f64eb0decee5ea2886457e3b5c6598357.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if (realm instanceof Lifecycle) {\n                    ((Lifecycle) realm).start();\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5004,"status":"M"},{"authorDate":"2015-11-06 01:29:20","commitOrder":50,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2015-11-06 01:29:20","endLine":5483,"groupId":"13887","id":100,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d5/62d87f93bd8adb0b4c2b066df86ffc05b65bfd.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5368,"status":"N"}],"commitId":"e184ed93bb93c3af21624dbae385fad99da8e02e","commitMessage":"@@@Make a web application's CredentialHandler available through a context attribute.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1715434 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-21 06:26:21","modifiedFileCount":"2","status":"M","submitter":"Christopher Schultz"},{"authorTime":"2016-02-16 15:06:31","codes":[{"authorDate":"2016-02-16 15:06:31","commitOrder":51,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2016-02-16 15:06:31","endLine":5271,"groupId":"448","id":101,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/42/80129d3ae5c6248c9e121f1fb5a53d0b4c839a.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Cluster cluster = getClusterInternal();\n                if (cluster instanceof Lifecycle) {\n                    ((Lifecycle) cluster).start();\n                }\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4945,"status":"M"},{"authorDate":"2016-02-16 15:06:31","commitOrder":51,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2016-02-16 15:06:31","endLine":5492,"groupId":"1807","id":102,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/42/80129d3ae5c6248c9e121f1fb5a53d0b4c839a.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Cluster cluster = getClusterInternal();\n            if (cluster instanceof Lifecycle) {\n                ((Lifecycle) cluster).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5381,"status":"M"}],"commitId":"f170d9ec8a0428f6293375b7397968184101802f","commitMessage":"@@@Clean up: Remove unnecessary code. \nThere is no support for context level cluster.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1730638 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-02-16 15:06:31","modifiedFileCount":"1","status":"M","submitter":"Keiichi Fujino"},{"authorTime":"2016-02-16 15:06:31","codes":[{"authorDate":"2016-05-18 04:36:54","commitOrder":52,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2016-05-18 04:36:54","endLine":5293,"groupId":"448","id":103,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/dd/d070e383309595224f42be013d65f8a30af99a.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4965,"status":"M"},{"authorDate":"2016-02-16 15:06:31","commitOrder":52,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2016-02-16 15:06:31","endLine":5492,"groupId":"1807","id":104,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/42/80129d3ae5c6248c9e121f1fb5a53d0b4c839a.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5381,"status":"N"}],"commitId":"da4d66de2c8635dee566d86c80ba93acf957019d","commitMessage":"@@@Make checking for RMI Target memory leaks optional and log a warning if running on Java 9 without the necessary command line options\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1744323 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-05-18 04:36:54","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-02-16 15:06:31","codes":[{"authorDate":"2016-05-20 19:18:55","commitOrder":53,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2016-05-20 19:18:55","endLine":5254,"groupId":"448","id":105,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/34/e3fc2169c2b7928395faa173b5da8133c7ce17.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStatic\",\n                        getClearReferencesStatic());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4928,"status":"M"},{"authorDate":"2016-02-16 15:06:31","commitOrder":53,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2016-02-16 15:06:31","endLine":5492,"groupId":"1807","id":106,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/42/80129d3ae5c6248c9e121f1fb5a53d0b4c839a.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5381,"status":"N"}],"commitId":"6be092a255a4d61e37e556469f33cdd558410671","commitMessage":"@@@Remove clearReferencesStatic option\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1744713 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-05-20 19:18:55","modifiedFileCount":"3","status":"M","submitter":"Mark Thomas"},{"authorTime":"2017-01-10 23:14:52","codes":[{"authorDate":"2016-05-20 19:18:55","commitOrder":54,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2016-05-20 19:18:55","endLine":5254,"groupId":"448","id":107,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/34/e3fc2169c2b7928395faa173b5da8133c7ce17.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4928,"status":"N"},{"authorDate":"2017-01-10 23:14:52","commitOrder":54,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2017-01-10 23:14:52","endLine":5477,"groupId":"1807","id":108,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/40/79c9ddd5c174ea8f76522a47f390e8ac1ff76a.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error reseting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5366,"status":"M"}],"commitId":"ab49af84f86fc882933fc12c28e06192a3d351da","commitMessage":"@@@Spelling fixes. Patch provided by Josh Soref.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1778139 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-01-10 23:14:52","modifiedFileCount":"55","status":"M","submitter":"Violeta Georgieva Georgieva"},{"authorTime":"2017-01-10 23:14:52","codes":[{"authorDate":"2017-07-20 22:13:48","commitOrder":55,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2017-07-20 22:13:48","endLine":5172,"groupId":"448","id":109,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fd/449600a20f73255783e9a0adc4e27e071cd930.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        postWorkDirectory();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4846,"status":"M"},{"authorDate":"2017-01-10 23:14:52","commitOrder":55,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2017-01-10 23:14:52","endLine":5477,"groupId":"1807","id":110,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/40/79c9ddd5c174ea8f76522a47f390e8ac1ff76a.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5366,"status":"N"}],"commitId":"c162d8a9176cdf0806b7b2d4d24c0bc7efe1644b","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60963\nAdd a new WebResourceRoot implementation that extracts JARs to the work directory for improved performance when deploying packed WAR files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1802490 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-07-20 22:13:48","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2017-01-10 23:14:52","codes":[{"authorDate":"2018-03-14 07:24:01","commitOrder":56,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2018-03-14 07:24:01","endLine":5143,"groupId":"10271","id":111,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e2/9dc3c8cfeb0011bd6d6b80b1736660706fdbff.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4815,"status":"M"},{"authorDate":"2017-01-10 23:14:52","commitOrder":56,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2017-01-10 23:14:52","endLine":5477,"groupId":"1807","id":112,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/40/79c9ddd5c174ea8f76522a47f390e8ac1ff76a.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5366,"status":"N"}],"commitId":"06a94aeaaad8e1592e305093214e347751e2aac7","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=51195\nAvoid a false positive report of a web application memory leak by clearing ObjectStreamClass$Caches of classes loaded by the web application when the web application is stopped.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1826688 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-03-14 07:24:01","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2017-01-10 23:14:52","codes":[{"authorDate":"2018-05-15 18:26:30","commitOrder":57,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"skipMemoryLeakChecksOnJvmShutdown\",\n                        getSkipMemoryLeakChecksOnJvmShutdown());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2018-05-15 18:26:30","endLine":5186,"groupId":"0","id":113,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/19/cb2b813632d6db765e09fc3cc30cacf8e4825c.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4856,"status":"M"},{"authorDate":"2017-01-10 23:14:52","commitOrder":57,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2017-01-10 23:14:52","endLine":5477,"groupId":"1807","id":114,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/40/79c9ddd5c174ea8f76522a47f390e8ac1ff76a.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5366,"status":"N"}],"commitId":"8fd5d6273099c504e1739080c07cf4d33cff89bf","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=50175\nAdd a new attribute to the standard context implementation.  skipMemoryLeakChecksOnJvmShutdown.  that allows the user to configure Tomcat to skip the memory leak checks usually performed during web application stop if that stop is triggered by a JVM shutdown.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1831618 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-05-15 18:26:30","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2017-01-10 23:14:52","codes":[{"authorDate":"2018-11-09 19:49:37","commitOrder":58,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2018-11-09 19:49:37","endLine":5208,"groupId":"14559","id":115,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/8f/10e74e6c9afe7ffabb66e491ef82c40cfc1262.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"skipMemoryLeakChecksOnJvmShutdown\",\n                        getSkipMemoryLeakChecksOnJvmShutdown());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4876,"status":"M"},{"authorDate":"2017-01-10 23:14:52","commitOrder":58,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2017-01-10 23:14:52","endLine":5477,"groupId":"1807","id":116,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/40/79c9ddd5c174ea8f76522a47f390e8ac1ff76a.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5366,"status":"N"}],"commitId":"1d96787426f84a0e2beaa3d5beb89eb21243137f","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=62897\nProvide a property clearReferencesThreadLocals on the standard Context implementation that enables the check for memory leaks via ThreadLocals to be disabled because this check depends on the use of an API that has been deprecated in later versions of Java.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1846236 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-11-09 19:49:37","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2017-01-10 23:14:52","codes":[{"authorDate":"2018-12-05 21:07:06","commitOrder":59,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2018-12-05 21:07:06","endLine":5208,"groupId":"2604","id":117,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ff/598eafa321afc472b05909aae21b576c2d2800.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ( (getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(\"standardContext.clusterFail\", ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4876,"status":"M"},{"authorDate":"2017-01-10 23:14:52","commitOrder":59,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2017-01-10 23:14:52","endLine":5477,"groupId":"1807","id":118,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/40/79c9ddd5c174ea8f76522a47f390e8ac1ff76a.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5366,"status":"N"}],"commitId":"5b4e3d5d9516c480a90a611c4a40e3e6ffdf6247","commitMessage":"@@@Add i18n for the core package.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1848208 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-12-05 21:07:06","modifiedFileCount":"12","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2019-01-24 00:33:47","codes":[{"authorDate":"2018-12-05 21:07:06","commitOrder":60,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2018-12-05 21:07:06","endLine":5208,"groupId":"2604","id":119,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ff/598eafa321afc472b05909aae21b576c2d2800.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4876,"status":"N"},{"authorDate":"2019-01-24 00:33:47","commitOrder":60,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2019-01-24 00:33:47","endLine":5450,"groupId":"1807","id":120,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a6/1130c1bd5c743c30c5bd10e9e6976005c2dd08.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5323,"status":"M"}],"commitId":"b4ad8fa8e03b870ee320ac3239059abc08fe1f58","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63003\nExtend the unloadDelay attribute on a Context to include in-flight asynchronous requests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1851947 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2019-01-24 00:33:47","modifiedFileCount":"8","status":"M","submitter":"Mark Thomas"},{"authorTime":"2019-01-24 00:33:47","codes":[{"authorDate":"2019-05-28 00:55:02","commitOrder":61,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2019-05-28 00:55:02","endLine":5220,"groupId":"7865","id":121,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/97/5b81e0c9020dd48ee83816dd2d87709d1d95dc.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    javax.naming.Context context = null;\n                    if (isUseNaming() && getNamingContextListener() != null) {\n                        context = getNamingContextListener().getEnvContext();\n                    }\n                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(\n                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());\n                    setInstanceManager(new DefaultInstanceManager(context,\n                            injectionMap, this, this.getClass().getClassLoader()));\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4895,"status":"M"},{"authorDate":"2019-01-24 00:33:47","commitOrder":61,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2019-01-24 00:33:47","endLine":5450,"groupId":"1807","id":122,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a6/1130c1bd5c743c30c5bd10e9e6976005c2dd08.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5323,"status":"N"}],"commitId":"003e071140520ffc2d02b4b1cee75e647352b2b6","commitMessage":"@@@Add default instance manager factory method\n\nThis can be used for nicer looking framework integration.  instead of\nhacking and replacing the instance manager after the fact (if extending\nthe default instance manager was desired).","date":"2019-05-28 00:55:02","modifiedFileCount":"4","status":"M","submitter":"remm"},{"authorTime":"2019-01-24 00:33:47","codes":[{"authorDate":"2020-02-27 01:43:41","commitOrder":62,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader();\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2020-02-27 01:43:41","endLine":5129,"groupId":"7865","id":123,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ab/b276c92627e315ec8ac8c8891248ee76b08406.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader(getParentClassLoader());\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4804,"status":"M"},{"authorDate":"2019-01-24 00:33:47","commitOrder":62,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2019-01-24 00:33:47","endLine":5450,"groupId":"1807","id":124,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a6/1130c1bd5c743c30c5bd10e9e6976005c2dd08.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5323,"status":"N"}],"commitId":"f6e1482d4c78f1fb459384dd87ef3dc4cad81008","commitMessage":"@@@BZ 64153. Ensure Context.getParentClassLoader() is consistent\n\nDeprecate the setting of the parent class loader via the Loader and if\nit is set via the loader.  keep it in sync with the Context.\nFixes https://bz.apache.org/bugzilla/show_bug.cgi?id=64153","date":"2020-02-27 01:43:41","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2019-01-24 00:33:47","codes":[{"authorDate":"2020-03-03 02:57:43","commitOrder":63,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader();\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n\n                \r\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2020-03-03 02:57:43","endLine":5126,"groupId":"7865","id":125,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f3/9e0d6d258e0e37ae6632f196c9a28ac24756aa.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader();\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok)\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n            if (ok ) {\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4804,"status":"M"},{"authorDate":"2019-01-24 00:33:47","commitOrder":63,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2019-01-24 00:33:47","endLine":5450,"groupId":"1807","id":126,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a6/1130c1bd5c743c30c5bd10e9e6976005c2dd08.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5323,"status":"N"}],"commitId":"62c92fce9f086cf093230ecc7c18ead000e21a8c","commitMessage":"@@@Simplify","date":"2020-03-03 02:57:43","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2019-01-24 00:33:47","codes":[{"authorDate":"2020-03-03 03:39:15","commitOrder":64,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader();\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n\n                \r\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n\n                \r\n                getServletContext().setAttribute(Globals.WEBAPP_VERSION, getWebappVersion());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2020-03-03 03:39:58","endLine":5129,"groupId":"7865","id":127,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/2b/cd59d2f7b3b9e548c402df33875076e0c0b5e5.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader();\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n\n                \r\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4804,"status":"M"},{"authorDate":"2019-01-24 00:33:47","commitOrder":64,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2019-01-24 00:33:47","endLine":5450,"groupId":"1807","id":128,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a6/1130c1bd5c743c30c5bd10e9e6976005c2dd08.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5323,"status":"N"}],"commitId":"eecf5b35914ccb7604b84e4e4de4f0b328980637","commitMessage":"@@@Expose the web application version String as a ServletContext attribute\n\nFixes https://bz.apache.org/bugzilla/show_bug.cgi?id=64189\nAttribute: org.apache.catalina.webappVersion\n","date":"2020-03-03 03:39:58","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2020-04-23 05:49:33","codes":[{"authorDate":"2020-03-03 03:39:15","commitOrder":65,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader();\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n\n                \r\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n\n                \r\n                getServletContext().setAttribute(Globals.WEBAPP_VERSION, getWebappVersion());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2020-03-03 03:39:58","endLine":5129,"groupId":"7865","id":129,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/2b/cd59d2f7b3b9e548c402df33875076e0c0b5e5.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader();\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n\n                \r\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n\n                \r\n                getServletContext().setAttribute(Globals.WEBAPP_VERSION, getWebappVersion());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4804,"status":"N"},{"authorDate":"2020-04-23 05:49:33","commitOrder":65,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (Container child : children) {\n                child.stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2020-05-04 15:18:37","endLine":5422,"groupId":"1807","id":130,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/95/390202067edde54ddb2e1b1032ec1cdcec4fbc.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (int i = 0; i < children.length; i++) {\n                children[i].stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5295,"status":"M"}],"commitId":"af4ecdfe038f1b4bf3e8ce880385b6e095956912","commitMessage":"@@@Replace indexed for loops and iterator while with foreach\n","date":"2020-05-04 15:18:37","modifiedFileCount":"197","status":"M","submitter":"Lars Grefer"},{"authorTime":"2020-04-23 05:49:33","codes":[{"authorDate":"2020-05-18 16:33:29","commitOrder":66,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader();\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n\n                \r\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n\n                \r\n                getServletContext().setAttribute(Globals.WEBAPP_VERSION, getWebappVersion());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n            \r\n            if (this.getObjectName() != null) {\n                Notification notification = new Notification(\"j2ee.object.failed\",\n                        this.getObjectName(), sequenceNumber.getAndIncrement());\n                broadcaster.sendNotification(notification);\n            }\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2020-05-18 16:33:29","endLine":5171,"groupId":"7865","id":131,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e8/4f2b58876d2943c4325488837654bd9879d9bb.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader();\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n\n                \r\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n\n                \r\n                getServletContext().setAttribute(Globals.WEBAPP_VERSION, getWebappVersion());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4840,"status":"M"},{"authorDate":"2020-04-23 05:49:33","commitOrder":66,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (Container child : children) {\n                child.stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2020-05-04 15:18:37","endLine":5422,"groupId":"1807","id":132,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/95/390202067edde54ddb2e1b1032ec1cdcec4fbc.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (Container child : children) {\n                child.stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5295,"status":"N"}],"commitId":"911126bab987ebf89b0c05d4aedd4bfe91af3069","commitMessage":"@@@Send failed JMX notification\n\nCode cleanup. Remove i18n todo.  I doubt it is a good idea at all for\nJMX.  the descriptions are read by a client which may not like the server\nlanguage (the manager webapp uses the client language.  for example).","date":"2020-05-18 16:33:29","modifiedFileCount":"2","status":"M","submitter":"remm"},{"authorTime":"2020-04-23 05:49:33","codes":[{"authorDate":"2021-03-22 19:52:47","commitOrder":67,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader();\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                if (loader.getClassLoader() instanceof WebappClassLoaderBase) {\n                    WebappClassLoaderBase cl = (WebappClassLoaderBase) loader.getClassLoader();\n                    cl.setClearReferencesRmiTargets(getClearReferencesRmiTargets());\n                    cl.setClearReferencesStopThreads(getClearReferencesStopThreads());\n                    cl.setClearReferencesStopTimerThreads(getClearReferencesStopTimerThreads());\n                    cl.setClearReferencesHttpClientKeepAliveThread(getClearReferencesHttpClientKeepAliveThread());\n                    cl.setClearReferencesObjectStreamClassCaches(getClearReferencesObjectStreamClassCaches());\n                    cl.setClearReferencesThreadLocals(getClearReferencesThreadLocals());\n                }\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n\n                \r\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n\n                \r\n                getServletContext().setAttribute(Globals.WEBAPP_VERSION, getWebappVersion());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n            \r\n            if (this.getObjectName() != null) {\n                Notification notification = new Notification(\"j2ee.object.failed\",\n                        this.getObjectName(), sequenceNumber.getAndIncrement());\n                broadcaster.sendNotification(notification);\n            }\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2021-03-22 19:52:47","endLine":5204,"groupId":"13904","id":133,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/42/56193bed79180cf2073d82640a675d13c87e71.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader();\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n                        getClearReferencesRmiTargets());\n                setClassLoaderProperty(\"clearReferencesStopThreads\",\n                        getClearReferencesStopThreads());\n                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n                        getClearReferencesStopTimerThreads());\n                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n                        getClearReferencesHttpClientKeepAliveThread());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n                        getClearReferencesObjectStreamClassCaches());\n                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n                        getClearReferencesThreadLocals());\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n\n                \r\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n\n                \r\n                getServletContext().setAttribute(Globals.WEBAPP_VERSION, getWebappVersion());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n            \r\n            if (this.getObjectName() != null) {\n                Notification notification = new Notification(\"j2ee.object.failed\",\n                        this.getObjectName(), sequenceNumber.getAndIncrement());\n                broadcaster.sendNotification(notification);\n            }\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4878,"status":"M"},{"authorDate":"2020-04-23 05:49:33","commitOrder":67,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (Container child : children) {\n                child.stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","date":"2020-05-04 15:18:37","endLine":5422,"groupId":"1807","id":134,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/95/390202067edde54ddb2e1b1032ec1cdcec4fbc.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (Container child : children) {\n                child.stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5295,"status":"N"}],"commitId":"5803d56dac2261a5b65680fb1d250135b20175ee","commitMessage":"@@@Avoid reflection use for classloader configuration\n\nThis makes the leak related properties depend on the use of a\nclassloader that extends WebappClassLoaderBase.  but this is quite\nobvious this would be the case as it seems insane to reimplement this.\nIn line with removing reflection abuse elsewhere.\nIn turn.  this avoids useless scary logging when using an alternate\nclassloader in embedded or similar.\nBased on a patch submitted by Romain Manni-Bucau.","date":"2021-03-22 19:52:47","modifiedFileCount":"1","status":"M","submitter":"remm"},{"authorTime":"2021-05-25 16:15:13","codes":[{"authorDate":"2021-05-25 16:15:13","commitOrder":68,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled()) {\n            log.debug(\"Starting \" + getBaseName());\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled()) {\n                log.debug(\"Configuring default Resources\");\n            }\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader();\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled()) {\n            log.debug(\"Processing standard container startup\");\n        }\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                if (loader.getClassLoader() instanceof WebappClassLoaderBase) {\n                    WebappClassLoaderBase cl = (WebappClassLoaderBase) loader.getClassLoader();\n                    cl.setClearReferencesRmiTargets(getClearReferencesRmiTargets());\n                    cl.setClearReferencesStopThreads(getClearReferencesStopThreads());\n                    cl.setClearReferencesStopTimerThreads(getClearReferencesStopTimerThreads());\n                    cl.setClearReferencesHttpClientKeepAliveThread(getClearReferencesHttpClientKeepAliveThread());\n                    cl.setClearReferencesObjectStreamClassCaches(getClearReferencesObjectStreamClassCaches());\n                    cl.setClearReferencesThreadLocals(getClearReferencesThreadLocals());\n                }\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n\n                \r\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n\n                \r\n                getServletContext().setAttribute(Globals.WEBAPP_VERSION, getWebappVersion());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Starting completed\");\n            }\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n            \r\n            if (this.getObjectName() != null) {\n                Notification notification = new Notification(\"j2ee.object.failed\",\n                        this.getObjectName(), sequenceNumber.getAndIncrement());\n                broadcaster.sendNotification(notification);\n            }\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2021-05-25 16:15:13","endLine":5263,"groupId":"13904","id":135,"instanceNumber":1,"isCurCommit":0,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a1/2ed93e986871f6f9d6629073006cca10079f2e.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled())\n            log.debug(\"Starting \" + getBaseName());\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled())\n                log.debug(\"Configuring default Resources\");\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader();\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container startup\");\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                if (loader.getClassLoader() instanceof WebappClassLoaderBase) {\n                    WebappClassLoaderBase cl = (WebappClassLoaderBase) loader.getClassLoader();\n                    cl.setClearReferencesRmiTargets(getClearReferencesRmiTargets());\n                    cl.setClearReferencesStopThreads(getClearReferencesStopThreads());\n                    cl.setClearReferencesStopTimerThreads(getClearReferencesStopTimerThreads());\n                    cl.setClearReferencesHttpClientKeepAliveThread(getClearReferencesHttpClientKeepAliveThread());\n                    cl.setClearReferencesObjectStreamClassCaches(getClearReferencesObjectStreamClassCaches());\n                    cl.setClearReferencesThreadLocals(getClearReferencesThreadLocals());\n                }\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n\n                \r\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n\n                \r\n                getServletContext().setAttribute(Globals.WEBAPP_VERSION, getWebappVersion());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled())\n                log.debug(\"Starting completed\");\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n            \r\n            if (this.getObjectName() != null) {\n                Notification notification = new Notification(\"j2ee.object.failed\",\n                        this.getObjectName(), sequenceNumber.getAndIncrement());\n                broadcaster.sendNotification(notification);\n            }\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4933,"status":"M"},{"authorDate":"2021-05-25 16:15:13","commitOrder":68,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (Container child : children) {\n                child.stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled()) {\n                log.debug(\"Processing standard container shutdown\");\n            }\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null) {\n                context.clearAttributes();\n            }\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"Stopping complete\");\n        }\n\n    }\n","date":"2021-05-25 16:15:13","endLine":5505,"groupId":"1807","id":136,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a1/2ed93e986871f6f9d6629073006cca10079f2e.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (Container child : children) {\n                child.stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled())\n                log.debug(\"Processing standard container shutdown\");\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null)\n                context.clearAttributes();\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Stopping complete\");\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5375,"status":"M"}],"commitId":"513a158ee793b52cc1c0fac7780423760818b631","commitMessage":"@@@Code clean-up. Add braces for clarity.","date":"2021-05-25 16:15:13","modifiedFileCount":"37","status":"M","submitter":"Mark Thomas"},{"authorTime":"2021-05-25 16:15:13","codes":[{"authorDate":"2021-07-29 00:57:21","commitOrder":69,"curCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled()) {\n            log.debug(\"Starting \" + getBaseName());\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled()) {\n                log.debug(\"Configuring default Resources\");\n            }\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader();\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled()) {\n            log.debug(\"Processing standard container startup\");\n        }\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                if (loader.getClassLoader() instanceof WebappClassLoaderBase) {\n                    WebappClassLoaderBase cl = (WebappClassLoaderBase) loader.getClassLoader();\n                    cl.setClearReferencesRmiTargets(getClearReferencesRmiTargets());\n                    cl.setClearReferencesStopThreads(getClearReferencesStopThreads());\n                    cl.setClearReferencesStopTimerThreads(getClearReferencesStopTimerThreads());\n                    cl.setClearReferencesHttpClientKeepAliveThread(getClearReferencesHttpClientKeepAliveThread());\n                    cl.setClearReferencesObjectStreamClassCaches(getClearReferencesObjectStreamClassCaches());\n                    cl.setClearReferencesThreadLocals(getClearReferencesThreadLocals());\n                }\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n\n                \r\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n\n                \r\n                getServletContext().setAttribute(Globals.WEBAPP_VERSION, getWebappVersion());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Starting completed\");\n            }\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n            \r\n            if (this.getObjectName() != null) {\n                Notification notification = new Notification(\"j2ee.object.failed\",\n                        this.getObjectName(), sequenceNumber.getAndIncrement());\n                broadcaster.sendNotification(notification);\n            }\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","date":"2021-07-29 00:57:21","endLine":5247,"groupId":"10972","id":137,"instanceNumber":1,"isCurCommit":1,"methodName":"startInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/7e/eb1b2d3a214fc4440fb5d06756dfff5a6a1429.src","preCode":"    protected synchronized void startInternal() throws LifecycleException {\n\n        if(log.isDebugEnabled()) {\n            log.debug(\"Starting \" + getBaseName());\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification = new Notification(\"j2ee.state.starting\",\n                    this.getObjectName(), sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        setConfigured(false);\n        boolean ok = true;\n\n        \r\n        \r\n        if (namingResources != null) {\n            namingResources.start();\n        }\n\n        \r\n        postWorkDirectory();\n\n        \r\n        if (getResources() == null) {   \r\n            if (log.isDebugEnabled()) {\n                log.debug(\"Configuring default Resources\");\n            }\n\n            try {\n                setResources(new StandardRoot(this));\n            } catch (IllegalArgumentException e) {\n                log.error(sm.getString(\"standardContext.resourcesInit\"), e);\n                ok = false;\n            }\n        }\n        if (ok) {\n            resourcesStart();\n        }\n\n        if (getLoader() == null) {\n            WebappLoader webappLoader = new WebappLoader();\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n        \r\n        if (cookieProcessor == null) {\n            cookieProcessor = new Rfc6265CookieProcessor();\n        }\n\n        \r\n        getCharsetMapper();\n\n        \r\n        boolean dependencyCheck = true;\n        try {\n            dependencyCheck = ExtensionValidator.validateApplication\n                (getResources(), this);\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"standardContext.extensionValidationError\"), ioe);\n            dependencyCheck = false;\n        }\n\n        if (!dependencyCheck) {\n            \r\n            ok = false;\n        }\n\n        \r\n        String useNamingProperty = System.getProperty(\"catalina.useNaming\");\n        if ((useNamingProperty != null)\n            && (useNamingProperty.equals(\"false\"))) {\n            useNaming = false;\n        }\n\n        if (ok && isUseNaming()) {\n            if (getNamingContextListener() == null) {\n                NamingContextListener ncl = new NamingContextListener();\n                ncl.setName(getNamingContextName());\n                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());\n                addLifecycleListener(ncl);\n                setNamingContextListener(ncl);\n            }\n        }\n\n        \r\n        if (log.isDebugEnabled()) {\n            log.debug(\"Processing standard container startup\");\n        }\n\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            if (ok) {\n                \r\n                Loader loader = getLoader();\n                if (loader instanceof Lifecycle) {\n                    ((Lifecycle) loader).start();\n                }\n\n                \r\n                \r\n                if (loader.getClassLoader() instanceof WebappClassLoaderBase) {\n                    WebappClassLoaderBase cl = (WebappClassLoaderBase) loader.getClassLoader();\n                    cl.setClearReferencesRmiTargets(getClearReferencesRmiTargets());\n                    cl.setClearReferencesStopThreads(getClearReferencesStopThreads());\n                    cl.setClearReferencesStopTimerThreads(getClearReferencesStopTimerThreads());\n                    cl.setClearReferencesHttpClientKeepAliveThread(getClearReferencesHttpClientKeepAliveThread());\n                    cl.setClearReferencesObjectStreamClassCaches(getClearReferencesObjectStreamClassCaches());\n                    cl.setClearReferencesThreadLocals(getClearReferencesThreadLocals());\n                }\n\n                \r\n                \r\n                unbindThread(oldCCL);\n                oldCCL = bindThread();\n\n                \r\n                \r\n                logger = null;\n                getLogger();\n\n                Realm realm = getRealmInternal();\n                if(null != realm) {\n                    if (realm instanceof Lifecycle) {\n                        ((Lifecycle) realm).start();\n                    }\n\n                    \r\n                    \r\n                    \r\n                    CredentialHandler safeHandler = new CredentialHandler() {\n                        @Override\n                        public boolean matches(String inputCredentials, String storedCredentials) {\n                            return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);\n                        }\n\n                        @Override\n                        public String mutate(String inputCredentials) {\n                            return getRealmInternal().getCredentialHandler().mutate(inputCredentials);\n                        }\n                    };\n                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);\n                }\n\n                \r\n                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);\n\n                \r\n                for (Container child : findChildren()) {\n                    if (!child.getState().isAvailable()) {\n                        child.start();\n                    }\n                }\n\n                \r\n                \r\n                if (pipeline instanceof Lifecycle) {\n                    ((Lifecycle) pipeline).start();\n                }\n\n                \r\n                Manager contextManager = null;\n                Manager manager = getManager();\n                if (manager == null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.cluster.noManager\",\n                                Boolean.valueOf((getCluster() != null)),\n                                Boolean.valueOf(distributable)));\n                    }\n                    if ((getCluster() != null) && distributable) {\n                        try {\n                            contextManager = getCluster().createManager(getName());\n                        } catch (Exception ex) {\n                            log.error(sm.getString(\"standardContext.cluster.managerError\"), ex);\n                            ok = false;\n                        }\n                    } else {\n                        contextManager = new StandardManager();\n                    }\n                }\n\n                \r\n                if (contextManager != null) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"standardContext.manager\",\n                                contextManager.getClass().getName()));\n                    }\n                    setManager(contextManager);\n                }\n\n                if (manager!=null && (getCluster() != null) && distributable) {\n                    \r\n                    \r\n                    getCluster().registerManager(manager);\n                }\n            }\n\n            if (!getConfigured()) {\n                log.error(sm.getString(\"standardContext.configurationFail\"));\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                getServletContext().setAttribute\n                    (Globals.RESOURCES_ATTR, getResources());\n\n                if (getInstanceManager() == null) {\n                    setInstanceManager(createInstanceManager());\n                }\n                getServletContext().setAttribute(\n                        InstanceManager.class.getName(), getInstanceManager());\n                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());\n\n                \r\n                getServletContext().setAttribute(\n                        JarScanner.class.getName(), getJarScanner());\n\n                \r\n                getServletContext().setAttribute(Globals.WEBAPP_VERSION, getWebappVersion());\n            }\n\n            \r\n            mergeParameters();\n\n            \r\n            for (Map.Entry<ServletContainerInitializer, Set<Class<?>>> entry :\n                initializers.entrySet()) {\n                try {\n                    entry.getKey().onStartup(entry.getValue(),\n                            getServletContext());\n                } catch (ServletException e) {\n                    log.error(sm.getString(\"standardContext.sciFail\"), e);\n                    ok = false;\n                    break;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!listenerStart()) {\n                    log.error(sm.getString(\"standardContext.listenerFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            \r\n            \r\n            if (ok) {\n                checkConstraintsForUncoveredMethods(findConstraints());\n            }\n\n            try {\n                \r\n                Manager manager = getManager();\n                if (manager instanceof Lifecycle) {\n                    ((Lifecycle) manager).start();\n                }\n            } catch(Exception e) {\n                log.error(sm.getString(\"standardContext.managerFail\"), e);\n                ok = false;\n            }\n\n            \r\n            if (ok) {\n                if (!filterStart()) {\n                    log.error(sm.getString(\"standardContext.filterFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            if (ok) {\n                if (!loadOnStartup(findChildren())){\n                    log.error(sm.getString(\"standardContext.servletFail\"));\n                    ok = false;\n                }\n            }\n\n            \r\n            super.threadStart();\n        } finally {\n            \r\n            unbindThread(oldCCL);\n        }\n\n        \r\n        if (ok) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Starting completed\");\n            }\n        } else {\n            log.error(sm.getString(\"standardContext.startFailed\", getName()));\n        }\n\n        startTime=System.currentTimeMillis();\n\n        \r\n        if (ok && (this.getObjectName() != null)) {\n            Notification notification =\n                new Notification(\"j2ee.state.running\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        getResources().gc();\n\n        \r\n        if (!ok) {\n            setState(LifecycleState.FAILED);\n            \r\n            if (this.getObjectName() != null) {\n                Notification notification = new Notification(\"j2ee.object.failed\",\n                        this.getObjectName(), sequenceNumber.getAndIncrement());\n                broadcaster.sendNotification(notification);\n            }\n        } else {\n            setState(LifecycleState.STARTING);\n        }\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":4932,"status":"M"},{"authorDate":"2021-05-25 16:15:13","commitOrder":69,"curCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (Container child : children) {\n                child.stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled()) {\n                log.debug(\"Processing standard container shutdown\");\n            }\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null) {\n                context.clearAttributes();\n            }\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"Stopping complete\");\n        }\n\n    }\n","date":"2021-05-25 16:15:13","endLine":5505,"groupId":"10972","id":138,"instanceNumber":2,"isCurCommit":0,"methodName":"stopInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a1/2ed93e986871f6f9d6629073006cca10079f2e.src","preCode":"    protected synchronized void stopInternal() throws LifecycleException {\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopping\", this.getObjectName(),\n                                 sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        \r\n\n        \r\n        long limit = System.currentTimeMillis() + unloadDelay;\n        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                log.info(sm.getString(\"standardContext.stop.asyncWaitInterrupted\"), e);\n                break;\n            }\n        }\n\n        \r\n        \r\n        setState(LifecycleState.STOPPING);\n\n        \r\n        ClassLoader oldCCL = bindThread();\n\n        try {\n            \r\n            final Container[] children = findChildren();\n\n            \r\n            threadStop();\n\n            for (Container child : children) {\n                child.stop();\n            }\n\n            \r\n            filterStop();\n\n            Manager manager = getManager();\n            if (manager instanceof Lifecycle && ((Lifecycle) manager).getState().isAvailable()) {\n                ((Lifecycle) manager).stop();\n            }\n\n            \r\n            listenerStop();\n\n            \r\n            setCharsetMapper(null);\n\n            \r\n            if (log.isDebugEnabled()) {\n                log.debug(\"Processing standard container shutdown\");\n            }\n\n            \r\n            \r\n            \r\n            \r\n            if (namingResources != null) {\n                namingResources.stop();\n            }\n\n            fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n            \r\n            if (pipeline instanceof Lifecycle &&\n                    ((Lifecycle) pipeline).getState().isAvailable()) {\n                ((Lifecycle) pipeline).stop();\n            }\n\n            \r\n            if (context != null) {\n                context.clearAttributes();\n            }\n\n            Realm realm = getRealmInternal();\n            if (realm instanceof Lifecycle) {\n                ((Lifecycle) realm).stop();\n            }\n            Loader loader = getLoader();\n            if (loader instanceof Lifecycle) {\n                ClassLoader classLoader = loader.getClassLoader();\n                ((Lifecycle) loader).stop();\n                if (classLoader != null) {\n                    InstanceManagerBindings.unbind(classLoader);\n                }\n            }\n\n            \r\n            resourcesStop();\n\n        } finally {\n\n            \r\n            unbindThread(oldCCL);\n\n        }\n\n        \r\n        if (this.getObjectName() != null) {\n            Notification notification =\n                new Notification(\"j2ee.state.stopped\", this.getObjectName(),\n                                sequenceNumber.getAndIncrement());\n            broadcaster.sendNotification(notification);\n        }\n\n        \r\n        context = null;\n\n        \r\n        try {\n            resetContext();\n        } catch( Exception ex ) {\n            log.error( \"Error resetting context \" + this + \" \" + ex, ex );\n        }\n\n        \r\n        setInstanceManager(null);\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"Stopping complete\");\n        }\n\n    }\n","realPath":"java/org/apache/catalina/core/StandardContext.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":5375,"status":"N"}],"commitId":"f7100b436c0ab2ef32f44bc03b841e79897cc710","commitMessage":"@@@Remove the ExtensionValidator and associated classes","date":"2021-07-29 00:57:21","modifiedFileCount":"3","status":"M","submitter":"Mark Thomas"}]
