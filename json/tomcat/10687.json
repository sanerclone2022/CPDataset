[{"authorTime":"2016-10-25 21:54:09","codes":[{"authorDate":"2017-03-09 23:27:10","commitOrder":16,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, getWriteTimeout(), TimeUnit.MILLISECONDS,\n                    null, SocketWrapperBase.COMPLETE_WRITE, applicationErrorCompletion,\n                    ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","date":"2017-03-09 23:27:10","endLine":256,"groupId":"15563","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/57/24fbf47c95ea521e1b4ab53b541ec0e0243c9d.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, getWriteTimeout(), TimeUnit.MILLISECONDS,\n                    null, SocketWrapperBase.COMPLETE_WRITE, applicationErrorCompletion,\n                    ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"B"},{"authorDate":"2016-10-25 21:54:09","commitOrder":16,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","date":"2016-10-25 21:54:09","endLine":672,"groupId":"2970","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c8/2fe4f2a1dd3a25483eafeee8c1676bde05857c.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2UpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":640,"status":"NB"}],"commitId":"7590b9aadfaad21d41f66841e555bb4afe5eefa4","commitMessage":"@@@- Pick up an old experiment with IO and NIO2. I decided to revisit it as the topic of TomcatCon came along.\n- Start using it for HTTP/2 output. It seems to work (h2load.  testsuite.  browser).\n- After testing it with h2load.  it does provide a benefit over vanilla NIO2 with only a limited amount of code.  so contribute it.\n- Add some plumbing to allow extending HTTP/2 upgrade handler to replace its IO.  and a minor change to the API to pass the socket wrapper to determine the capabilities of the endpoint. Since it seems to work and NIO2 isn't the default.  enable it with NIO2. Although I left it for now.  it may be better to disable it with SSL (another reason to pass around the socket wrapper).\n- Ultimately.  the strategy is the exact opposite of Coyote (= zero GC).  the protocol handler gets control of everything through the read/write API (syncing.  blocking.  etc) and encourages GC abuse to minimize blocking.\n- If this is too big a change.  I can revert it and discuss it first. Although it got discussed in 2015.  it's a long time ago.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1786186 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-03-09 23:27:10","modifiedFileCount":"4","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2016-10-25 21:54:09","codes":[{"authorDate":"2017-09-05 17:43:49","commitOrder":17,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, protocol.getWriteTimeout(),\n                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,\n                    applicationErrorCompletion, ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","date":"2017-09-05 17:43:49","endLine":182,"groupId":"15563","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/62/02d4be0759a4a9a5502486415dc9ef103faee5.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, getWriteTimeout(), TimeUnit.MILLISECONDS,\n                    null, SocketWrapperBase.COMPLETE_WRITE, applicationErrorCompletion,\n                    ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2016-10-25 21:54:09","commitOrder":17,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","date":"2016-10-25 21:54:09","endLine":672,"groupId":"2970","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c8/2fe4f2a1dd3a25483eafeee8c1676bde05857c.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2UpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":640,"status":"N"}],"commitId":"861bee1c42df3a0df29a84367fac08e1a890effb","commitMessage":"@@@Refactor: Obtain timeouts directly from protocol\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1807326 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-09-05 17:43:49","modifiedFileCount":"3","status":"M","submitter":"Mark Thomas"},{"authorTime":"2019-01-16 23:55:46","codes":[{"authorDate":"2019-01-16 23:55:46","commitOrder":18,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, protocol.getWriteTimeout(),\n                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,\n                    applicationErrorCompletion, ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","date":"2019-01-16 23:55:46","endLine":207,"groupId":"15265","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/15/098f066b275fe7e478d4b5f33e15977f9d4ba6.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, protocol.getWriteTimeout(),\n                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,\n                    applicationErrorCompletion, ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"},{"authorDate":"2019-01-16 23:55:46","commitOrder":18,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","date":"2019-01-16 23:55:46","endLine":661,"groupId":"11868","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/67/695a66a198875c272e6c112c49b7afcd3ca8f3.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2UpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"M"}],"commitId":"897891ac88b58c2a617691bc8b80cd8c4b75dae5","commitMessage":"@@@Refactor - simplification\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1851461 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2019-01-16 23:55:46","modifiedFileCount":"5","status":"M","submitter":"Mark Thomas"},{"authorTime":"2019-02-01 18:28:22","codes":[{"authorDate":"2019-01-16 23:55:46","commitOrder":19,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, protocol.getWriteTimeout(),\n                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,\n                    applicationErrorCompletion, ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","date":"2019-01-16 23:55:46","endLine":207,"groupId":"15265","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/15/098f066b275fe7e478d4b5f33e15977f9d4ba6.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, protocol.getWriteTimeout(),\n                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,\n                    applicationErrorCompletion, ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"N"},{"authorDate":"2019-02-01 18:28:22","commitOrder":19,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n\n        reduceOverheadCount();\n\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","date":"2019-02-01 18:28:22","endLine":679,"groupId":"11868","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/99/7835a06a85d8562ad0bc2ff2a2c5890e5dc1d1.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2UpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":644,"status":"M"}],"commitId":"f9d8c2591f86090e5141f73833407f7ebdffef26","commitMessage":"@@@Track overhead and close connections with excessive overhead\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1852702 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2019-02-01 18:28:22","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2019-08-08 00:02:37","codes":[{"authorDate":"2019-08-08 00:02:37","commitOrder":20,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, protocol.getWriteTimeout(),\n                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,\n                    applicationErrorCompletion, ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","date":"2019-08-08 03:18:25","endLine":226,"groupId":"16645","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/92/ad29c8ba983788e85a0974997cbbdc1c7571f1.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, protocol.getWriteTimeout(),\n                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,\n                    applicationErrorCompletion, ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2019-08-08 00:02:37","commitOrder":20,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n\n        reduceOverheadCount();\n\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","date":"2019-08-08 03:18:25","endLine":736,"groupId":"6275","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f2/7a79e4385a7197dd72c9ca200a3ad456421449.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n\n        reduceOverheadCount();\n\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                activeRemoteStreamCount.decrementAndGet();\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2UpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":701,"status":"M"}],"commitId":"5d7f2eac857cc75757cfc58d003fbf17a23c2720","commitMessage":"@@@Improve HTTP/2 connection timeout handling\n\nTimeouts were not always handled correctly leaving\nsome connections open for longer than expected.\n","date":"2019-08-08 03:18:25","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2020-09-21 21:52:33","codes":[{"authorDate":"2020-09-21 21:52:33","commitOrder":21,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdAsString(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, protocol.getWriteTimeout(),\n                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,\n                    applicationErrorCompletion, ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","date":"2020-09-21 22:55:14","endLine":226,"groupId":"16645","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/95/1c21cd190e3e781beab3c8fb9c45ed3c02684a.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, protocol.getWriteTimeout(),\n                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,\n                    applicationErrorCompletion, ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2020-09-21 21:52:33","commitOrder":21,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdAsString(),\n                    Integer.toString(len)));\n        }\n\n        reduceOverheadCount();\n\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","date":"2020-09-21 22:55:14","endLine":779,"groupId":"6275","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b1/c44d9b1a7873339063b0caa35959071371d586.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdentifier(),\n                    Integer.toString(len)));\n        }\n\n        reduceOverheadCount();\n\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2UpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":744,"status":"M"}],"commitId":"c1aaa4ed16b6410a602074132c75da6c85d6a8ed","commitMessage":"@@@Consistent formatting of stream ID in HTTP/2 debug log messages\n","date":"2020-09-21 22:55:14","modifiedFileCount":"7","status":"M","submitter":"Mark Thomas"},{"authorTime":"2020-09-21 21:52:33","codes":[{"authorDate":"2020-09-24 18:46:31","commitOrder":22,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdAsString(),\n                    Integer.toString(len), Boolean.valueOf(finished)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, protocol.getWriteTimeout(),\n                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,\n                    applicationErrorCompletion, ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","date":"2020-09-24 18:46:31","endLine":226,"groupId":"16645","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9c/274acb38891f1df2bd601fd4745f97cc361d8c.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdAsString(),\n                    Integer.toString(len)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, protocol.getWriteTimeout(),\n                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,\n                    applicationErrorCompletion, ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2020-09-21 21:52:33","commitOrder":22,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdAsString(),\n                    Integer.toString(len)));\n        }\n\n        reduceOverheadCount();\n\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","date":"2020-09-21 22:55:14","endLine":779,"groupId":"6275","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b1/c44d9b1a7873339063b0caa35959071371d586.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdAsString(),\n                    Integer.toString(len)));\n        }\n\n        reduceOverheadCount();\n\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2UpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":744,"status":"N"}],"commitId":"6f178006f246ce9248a349705ba79d054d189b70","commitMessage":"@@@http2: Add 'EndOfStream' to the logs for writeHeaders and writeBody\n\nMark Http2AsyncUpgradeHandler#errorCompletion and #applicationErrorCompletion as final.\nCall streams.size() just once.\nExtract local variables and reuse them instead of calling getters on every usage\n","date":"2020-09-24 18:46:31","modifiedFileCount":"2","status":"M","submitter":"Martin Tzvetanov Grigorov"},{"authorTime":"2021-02-23 00:30:29","codes":[{"authorDate":"2020-09-24 18:46:31","commitOrder":23,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdAsString(),\n                    Integer.toString(len), Boolean.valueOf(finished)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, protocol.getWriteTimeout(),\n                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,\n                    applicationErrorCompletion, ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","date":"2020-09-24 18:46:31","endLine":226,"groupId":"16645","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9c/274acb38891f1df2bd601fd4745f97cc361d8c.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdAsString(),\n                    Integer.toString(len), Boolean.valueOf(finished)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, protocol.getWriteTimeout(),\n                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,\n                    applicationErrorCompletion, ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"N"},{"authorDate":"2021-02-23 00:30:29","commitOrder":23,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdAsString(),\n                    Integer.toString(len), Boolean.valueOf(finished)));\n        }\n\n        reduceOverheadCount();\n\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","date":"2021-02-23 00:30:29","endLine":782,"groupId":"6275","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ea/f7e8827703b56a4c152d4eed8f1417421e6fed.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdAsString(),\n                    Integer.toString(len)));\n        }\n\n        reduceOverheadCount();\n\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2UpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":747,"status":"M"}],"commitId":"23f8eb5c42c6e4bd3c877a95083020912ee67eb1","commitMessage":"@@@Add missing parameter in log message. Fix comment typo.","date":"2021-02-23 00:30:29","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2021-06-15 04:48:21","codes":[{"authorDate":"2020-09-24 18:46:31","commitOrder":24,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdAsString(),\n                    Integer.toString(len), Boolean.valueOf(finished)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, protocol.getWriteTimeout(),\n                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,\n                    applicationErrorCompletion, ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","date":"2020-09-24 18:46:31","endLine":226,"groupId":"10687","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9c/274acb38891f1df2bd601fd4745f97cc361d8c.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdAsString(),\n                    Integer.toString(len), Boolean.valueOf(finished)));\n        }\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            int orgLimit = data.limit();\n            data.limit(data.position() + len);\n            socketWrapper.write(BlockingMode.BLOCK, protocol.getWriteTimeout(),\n                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,\n                    applicationErrorCompletion, ByteBuffer.wrap(header), data);\n            data.limit(orgLimit);\n            handleAsyncException();\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"N"},{"authorDate":"2021-06-15 04:48:21","commitOrder":24,"curCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdAsString(),\n                    Integer.toString(len), Boolean.valueOf(finished)));\n        }\n\n        reduceOverheadCount(FrameType.DATA);\n\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","date":"2021-06-15 15:40:59","endLine":782,"groupId":"10687","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"writeBody","params":"(Streamstream@ByteBufferdata@intlen@booleanfinished)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/34/601ba44381ba538ec5a875f18bc3f23115c2c6.src","preCode":"    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"upgradeHandler.writeBody\", connectionId, stream.getIdAsString(),\n                    Integer.toString(len), Boolean.valueOf(finished)));\n        }\n\n        reduceOverheadCount();\n\n        \r\n        boolean writeable = stream.canWrite();\n        byte[] header = new byte[9];\n        ByteUtil.setThreeBytes(header, 0, len);\n        header[3] = FrameType.DATA.getIdByte();\n        if (finished) {\n            header[4] = FLAG_END_OF_STREAM;\n            stream.sentEndOfStream();\n            if (!stream.isActive()) {\n                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n            }\n        }\n        if (writeable) {\n            ByteUtil.set31Bits(header, 5, stream.getIdAsInt());\n            synchronized (socketWrapper) {\n                try {\n                    socketWrapper.write(true, header, 0, header.length);\n                    int orgLimit = data.limit();\n                    data.limit(data.position() + len);\n                    socketWrapper.write(true, data);\n                    data.limit(orgLimit);\n                    socketWrapper.flush(true);\n                } catch (IOException ioe) {\n                    handleAppInitiatedIOException(ioe);\n                }\n            }\n        }\n    }\n","realPath":"java/org/apache/coyote/http2/Http2UpgradeHandler.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":747,"status":"M"}],"commitId":"a58582b1a4e139e0a48e20abd1f27cb2da866c64","commitMessage":"@@@Add debug logging for overhead count\n","date":"2021-06-15 15:40:59","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"}]
