[{"authorTime":"2010-12-18 06:01:59","codes":[{"authorDate":"2011-03-31 05:40:59","commitOrder":6,"curCode":"    public static boolean setProperty(Object o, String name, String value,boolean invokeSetProperty) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = new Boolean(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];    \n                    }\n                    \n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return (Boolean) setPropertyMethodBool.invoke(o, params);\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    } \n","date":"2011-03-31 05:40:59","endLine":207,"groupId":"15692","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue@booleaninvokeSetProperty)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/5f/d7007c55b17be2a80f1258202fa77ebc4b273a.src","preCode":"    public static boolean setProperty(Object o, String name, String value,boolean invokeSetProperty) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = new Boolean(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];    \n                    }\n                    \n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return (Boolean) setPropertyMethodBool.invoke(o, params);\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    } \n","realPath":"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2010-12-18 06:01:59","commitOrder":6,"curCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];    \n                    }\n                    \n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2010-12-18 06:01:59","endLine":393,"groupId":"13669","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/3a/b087c70b30c6dd4c83baee8c86d0dbc7b5c4ab.src","preCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];    \n                    }\n                    \n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"test/org/apache/catalina/tribes/demos/IntrospectionUtils.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"NB"}],"commitId":"9b48dfd98aecd2b5d2c69dff3472f0a4409f6ffa","commitMessage":"@@@Add in ability to build with Maven\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1087090 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-03-31 05:40:59","modifiedFileCount":"0","status":"M","submitter":"Filip Hanik"},{"authorTime":"2010-12-18 06:01:59","codes":[{"authorDate":"2011-10-10 05:38:17","commitOrder":7,"curCode":"    public static boolean setProperty(Object o, String name, String value,boolean invokeSetProperty) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = new Boolean(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];    \n                    }\n                    \n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    } \n","date":"2011-10-10 05:38:17","endLine":208,"groupId":"15692","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue@booleaninvokeSetProperty)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/2e/e0b93317f0049723948414d54f5cd245ba80c0.src","preCode":"    public static boolean setProperty(Object o, String name, String value,boolean invokeSetProperty) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = new Boolean(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];    \n                    }\n                    \n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return (Boolean) setPropertyMethodBool.invoke(o, params);\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    } \n","realPath":"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2010-12-18 06:01:59","commitOrder":7,"curCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];    \n                    }\n                    \n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2010-12-18 06:01:59","endLine":393,"groupId":"13669","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/3a/b087c70b30c6dd4c83baee8c86d0dbc7b5c4ab.src","preCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];    \n                    }\n                    \n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"test/org/apache/catalina/tribes/demos/IntrospectionUtils.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"N"}],"commitId":"b983ac529413afdecbc4c9d14f30b3d5dbe79d56","commitMessage":"@@@Fix various IDE warings\n- add missing @Override\n- remove unused code\n- avoid auto-(un)boxing\n- fix some generics issues\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1180721 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-10-10 05:38:17","modifiedFileCount":"19","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-12-18 06:01:59","codes":[{"authorDate":"2011-10-23 07:24:31","commitOrder":8,"curCode":"    public static boolean setProperty(Object o, String name, String value,boolean invokeSetProperty) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2011-10-23 07:24:31","endLine":208,"groupId":"13669","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue@booleaninvokeSetProperty)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/08/267139499fe617754718eb10c2ac10b4793baf.src","preCode":"    public static boolean setProperty(Object o, String name, String value,boolean invokeSetProperty) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = new Boolean(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2010-12-18 06:01:59","commitOrder":8,"curCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];    \n                    }\n                    \n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2010-12-18 06:01:59","endLine":393,"groupId":"13669","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/3a/b087c70b30c6dd4c83baee8c86d0dbc7b5c4ab.src","preCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];    \n                    }\n                    \n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"test/org/apache/catalina/tribes/demos/IntrospectionUtils.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"N"}],"commitId":"140374e1fb3ff972e6bdeed698de4384ef6e4879","commitMessage":"@@@Fix some low-hanging FindBugs fruit\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1187826 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-10-23 07:24:31","modifiedFileCount":"5","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-12-18 06:01:59","codes":[{"authorDate":"2011-11-14 03:50:48","commitOrder":9,"curCode":"    public static boolean setProperty(Object o, String name, String value,boolean invokeSetProperty) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2011-11-14 03:50:48","endLine":215,"groupId":"13669","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue@booleaninvokeSetProperty)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/8d/e99812b1f31443e36be301074a76b81d26d0ba.src","preCode":"    public static boolean setProperty(Object o, String name, String value,boolean invokeSetProperty) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2010-12-18 06:01:59","commitOrder":9,"curCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];    \n                    }\n                    \n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2010-12-18 06:01:59","endLine":393,"groupId":"13669","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/3a/b087c70b30c6dd4c83baee8c86d0dbc7b5c4ab.src","preCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];    \n                    }\n                    \n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"test/org/apache/catalina/tribes/demos/IntrospectionUtils.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"N"}],"commitId":"d4ecf7cf48d2f1f6d26f723e474b224a3f1ccf16","commitMessage":"@@@Improve processing of errors that are wrapped into InvocationTargetException.\nTrapException interceptor: Rethrow them as an Error. Do not wrap them into RuntimeException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1201493 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-11-14 03:50:48","modifiedFileCount":"2","status":"M","submitter":"Konstantin Kolinko"},{"authorTime":"2011-11-14 09:10:51","codes":[{"authorDate":"2011-11-14 03:50:48","commitOrder":10,"curCode":"    public static boolean setProperty(Object o, String name, String value,boolean invokeSetProperty) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2011-11-14 03:50:48","endLine":215,"groupId":"13669","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue@booleaninvokeSetProperty)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/8d/e99812b1f31443e36be301074a76b81d26d0ba.src","preCode":"    public static boolean setProperty(Object o, String name, String value,boolean invokeSetProperty) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"N"},{"authorDate":"2011-11-14 09:10:51","commitOrder":10,"curCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2011-11-14 09:10:51","endLine":179,"groupId":"13669","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/bf/5ef3dcf1f3cff9bd521bb5280687a701a330db.src","preCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"test/org/apache/catalina/tribes/demos/IntrospectionUtils.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"a309501e1577a5a700f9ca97cce864981f8dcff9","commitMessage":"@@@Improve processing of errors that are wrapped into InvocationTargetException.\nRethrow errors that must be rethrown.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1201568 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-11-14 09:10:51","modifiedFileCount":"4","status":"M","submitter":"Konstantin Kolinko"},{"authorTime":"2011-11-14 09:10:51","codes":[{"authorDate":"2012-10-25 16:17:13","commitOrder":11,"curCode":"    private static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2012-10-25 16:17:13","endLine":216,"groupId":"13669","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ef/6a6653dd29e0a0adb691eda07ccb877e0bc27a.src","preCode":"    public static boolean setProperty(Object o, String name, String value,boolean invokeSetProperty) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2011-11-14 09:10:51","commitOrder":11,"curCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2011-11-14 09:10:51","endLine":179,"groupId":"13669","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/bf/5ef3dcf1f3cff9bd521bb5280687a701a330db.src","preCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"test/org/apache/catalina/tribes/demos/IntrospectionUtils.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"N"}],"commitId":"5d6dcfe7916b9ac2ea1841f74a4a90b313a1f786","commitMessage":"@@@Fix some Eclipse warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1402014 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-10-25 16:17:13","modifiedFileCount":"6","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2017-04-12 04:40:36","codes":[{"authorDate":"2017-04-12 04:40:36","commitOrder":12,"curCode":"    private static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = Long.valueOf(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2017-04-12 04:40:36","endLine":223,"groupId":"751","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/38/329d2f88156fc344001680e882565d0505a06f.src","preCode":"    private static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2017-04-12 04:40:36","commitOrder":12,"curCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = Long.valueOf(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2017-04-12 04:40:36","endLine":181,"groupId":"751","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a4/43c05613238d33c8c47503bb0f68ca095258bd.src","preCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = new Integer(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = new Long(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"test/org/apache/catalina/tribes/demos/IntrospectionUtils.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"fc6a761cbac8f41ba9fe180a4c86fa11fd795d28","commitMessage":"@@@Refactoring in preparation for Java 9. Refactor to avoid using some methods that will be deprecated in Java 9 onwards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1791027 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-04-12 04:40:36","modifiedFileCount":"9","status":"M","submitter":"Mark Thomas"},{"authorTime":"2017-04-12 04:40:36","codes":[{"authorDate":"2020-04-27 15:17:12","commitOrder":13,"curCode":"    private static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method[] methods = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?>[] paramT = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object[] params = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = Long.valueOf(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object[] params = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2020-04-27 15:17:12","endLine":222,"groupId":"12570","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f2/e54d32f1d98cac5bf6946ba66394f0a959f625.src","preCode":"    private static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = Long.valueOf(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2017-04-12 04:40:36","commitOrder":13,"curCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = Long.valueOf(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2017-04-12 04:40:36","endLine":181,"groupId":"751","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a4/43c05613238d33c8c47503bb0f68ca095258bd.src","preCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = Long.valueOf(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"test/org/apache/catalina/tribes/demos/IntrospectionUtils.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"}],"commitId":"4684537a5b71a8bd980c5985365f6a5921a84cd9","commitMessage":"@@@Merge pull request #286 from XavierChengZW/master\n\noptimized code. replace some c-style array","date":"2020-04-27 15:17:12","modifiedFileCount":"1","status":"M","submitter":"Martin Grigorov"},{"authorTime":"2020-04-23 05:49:33","codes":[{"authorDate":"2020-04-27 15:17:12","commitOrder":14,"curCode":"    private static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method[] methods = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?>[] paramT = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object[] params = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = Long.valueOf(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object[] params = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2020-04-27 15:17:12","endLine":222,"groupId":"12570","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f2/e54d32f1d98cac5bf6946ba66394f0a959f625.src","preCode":"    private static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method[] methods = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?>[] paramT = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object[] params = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = Long.valueOf(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object[] params = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"N"},{"authorDate":"2020-04-23 05:49:33","commitOrder":14,"curCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (Method item : methods) {\n                Class<?> paramT[] = item.getParameterTypes();\n                if (setter.equals(item.getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    item.invoke(o, new Object[]{value});\n                    return true;\n                }\n            }\n\n            \r\n            for (Method method : methods) {\n                boolean ok = true;\n                if (setter.equals(method.getName())\n                        && method.getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = method.getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                        \r\n                    }\n                    else if (\"java.lang.Long\".equals(paramType.getName())\n                            || \"long\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Long.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n\n                        \r\n                    }\n                    else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    }\n                    else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        method.invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(method.getName())) {\n                    if (method.getReturnType() == Boolean.TYPE) {\n                        setPropertyMethodBool = method;\n                    } else {\n                        setPropertyMethodVoid = method;\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2020-05-04 15:18:37","endLine":184,"groupId":"16614","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/9221871816a163d85e8f2d2f2f723c6abd8a8e.src","preCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = Long.valueOf(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"test/org/apache/catalina/tribes/demos/IntrospectionUtils.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"af4ecdfe038f1b4bf3e8ce880385b6e095956912","commitMessage":"@@@Replace indexed for loops and iterator while with foreach\n","date":"2020-05-04 15:18:37","modifiedFileCount":"197","status":"M","submitter":"Lars Grefer"},{"authorTime":"2020-04-23 05:49:33","codes":[{"authorDate":"2021-05-27 04:53:09","commitOrder":15,"curCode":"    private static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n        }\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method[] methods = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?>[] paramT = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object[] params = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = Long.valueOf(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled()) {\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            }\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled()) {\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                        }\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object[] params = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n            }\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n            }\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled()) {\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n            }\n        }\n        return false;\n    }\n","date":"2021-05-27 04:53:09","endLine":228,"groupId":"12570","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/83/7fc5611a495c90444049edf0cdf3184488a645.src","preCode":"    private static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method[] methods = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?>[] paramT = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object[] params = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = Long.valueOf(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object[] params = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-04-23 05:49:33","commitOrder":15,"curCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (Method item : methods) {\n                Class<?> paramT[] = item.getParameterTypes();\n                if (setter.equals(item.getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    item.invoke(o, new Object[]{value});\n                    return true;\n                }\n            }\n\n            \r\n            for (Method method : methods) {\n                boolean ok = true;\n                if (setter.equals(method.getName())\n                        && method.getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = method.getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                        \r\n                    }\n                    else if (\"java.lang.Long\".equals(paramType.getName())\n                            || \"long\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Long.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n\n                        \r\n                    }\n                    else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    }\n                    else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        method.invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(method.getName())) {\n                    if (method.getReturnType() == Boolean.TYPE) {\n                        setPropertyMethodBool = method;\n                    } else {\n                        setPropertyMethodVoid = method;\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","date":"2020-05-04 15:18:37","endLine":184,"groupId":"16614","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/03/9221871816a163d85e8f2d2f2f723c6abd8a8e.src","preCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (Method item : methods) {\n                Class<?> paramT[] = item.getParameterTypes();\n                if (setter.equals(item.getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    item.invoke(o, new Object[]{value});\n                    return true;\n                }\n            }\n\n            \r\n            for (Method method : methods) {\n                boolean ok = true;\n                if (setter.equals(method.getName())\n                        && method.getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = method.getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                        \r\n                    }\n                    else if (\"java.lang.Long\".equals(paramType.getName())\n                            || \"long\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Long.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n\n                        \r\n                    }\n                    else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    }\n                    else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        method.invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(method.getName())) {\n                    if (method.getReturnType() == Boolean.TYPE) {\n                        setPropertyMethodBool = method;\n                    } else {\n                        setPropertyMethodVoid = method;\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"test/org/apache/catalina/tribes/demos/IntrospectionUtils.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"}],"commitId":"da39289475ed046e756ef9327fe8f468af2d1df8","commitMessage":"@@@Code clean-up. Add braces to improve readability.\n\nAnother test of the CI.","date":"2021-05-27 04:53:09","modifiedFileCount":"26","status":"M","submitter":"Mark Thomas"},{"authorTime":"2021-05-27 06:41:15","codes":[{"authorDate":"2021-05-27 04:53:09","commitOrder":16,"curCode":"    private static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n        }\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method[] methods = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?>[] paramT = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object[] params = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = Long.valueOf(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled()) {\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            }\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled()) {\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                        }\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object[] params = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n            }\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n            }\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled()) {\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n            }\n        }\n        return false;\n    }\n","date":"2021-05-27 04:53:09","endLine":228,"groupId":"1294","id":21,"instanceNumber":1,"isCurCommit":1,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/83/7fc5611a495c90444049edf0cdf3184488a645.src","preCode":"    private static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n        }\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method[] methods = o.getClass().getMethods();\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                Class<?>[] paramT = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    methods[i].invoke(o, new Object[] { value });\n                    return true;\n                }\n            }\n\n            \r\n            for (int i = 0; i < methods.length; i++) {\n                boolean ok = true;\n                if (setter.equals(methods[i].getName())\n                        && methods[i].getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = methods[i].getParameterTypes()[0];\n                    Object[] params = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                    \r\n                    }else if (\"java.lang.Long\".equals(paramType.getName())\n                                || \"long\".equals(paramType.getName())) {\n                            try {\n                                params[0] = Long.valueOf(value);\n                            } catch (NumberFormatException ex) {\n                                ok = false;\n                            }\n\n                        \r\n                    } else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    } else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled()) {\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            }\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled()) {\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                        }\n                    }\n\n                    if (ok) {\n                        methods[i].invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(methods[i].getName())) {\n                    if (methods[i].getReturnType()==Boolean.TYPE){\n                        setPropertyMethodBool = methods[i];\n                    }else {\n                        setPropertyMethodVoid = methods[i];\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object[] params = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n            }\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n            }\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled()) {\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n            }\n        }\n        return false;\n    }\n","realPath":"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"N"},{"authorDate":"2021-05-27 06:41:15","commitOrder":16,"curCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"IntrospectionUtils: setProperty(\" +\n                  o.getClass() + \" \" + name + \"=\" + value + \")\");\n        }\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (Method item : methods) {\n                Class<?> paramT[] = item.getParameterTypes();\n                if (setter.equals(item.getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    item.invoke(o, new Object[]{value});\n                    return true;\n                }\n            }\n\n            \r\n            for (Method method : methods) {\n                boolean ok = true;\n                if (setter.equals(method.getName())\n                        && method.getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = method.getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                        \r\n                    }\n                    else if (\"java.lang.Long\".equals(paramType.getName())\n                            || \"long\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Long.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n\n                        \r\n                    }\n                    else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    }\n                    else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled()) {\n                              log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            }\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled()) {\n                          log.debug(\"IntrospectionUtils: Unknown type \" +\n                                  paramType.getName());\n                        }\n                    }\n\n                    if (ok) {\n                        method.invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(method.getName())) {\n                    if (method.getReturnType() == Boolean.TYPE) {\n                        setPropertyMethodBool = method;\n                    } else {\n                        setPropertyMethodVoid = method;\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled()) {\n              log.debug(\"IntrospectionUtils: SecurityException for \" +\n                      o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n            }\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled()) {\n              log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                      o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n            }\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                      o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n            }\n        }\n        return false;\n    }\n","date":"2021-05-27 06:41:15","endLine":190,"groupId":"1294","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"setProperty","params":"(Objecto@Stringname@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/7c/7c7569f8167cd723f03bf6f93a74b67815ba9a.src","preCode":"    public static boolean setProperty(Object o, String name, String value) {\n        if (log.isDebugEnabled())\n            log.debug(\"IntrospectionUtils: setProperty(\" +\n                    o.getClass() + \" \" + name + \"=\" + value + \")\");\n\n        String setter = \"set\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method setPropertyMethodVoid = null;\n            Method setPropertyMethodBool = null;\n\n            \r\n            for (Method item : methods) {\n                Class<?> paramT[] = item.getParameterTypes();\n                if (setter.equals(item.getName()) && paramT.length == 1\n                        && \"java.lang.String\".equals(paramT[0].getName())) {\n\n                    item.invoke(o, new Object[]{value});\n                    return true;\n                }\n            }\n\n            \r\n            for (Method method : methods) {\n                boolean ok = true;\n                if (setter.equals(method.getName())\n                        && method.getParameterTypes().length == 1) {\n\n                    \r\n                    Class<?> paramType = method.getParameterTypes()[0];\n                    Object params[] = new Object[1];\n\n                    \r\n                    if (\"java.lang.Integer\".equals(paramType.getName())\n                            || \"int\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Integer.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n                        \r\n                    }\n                    else if (\"java.lang.Long\".equals(paramType.getName())\n                            || \"long\".equals(paramType.getName())) {\n                        try {\n                            params[0] = Long.valueOf(value);\n                        } catch (NumberFormatException ex) {\n                            ok = false;\n                        }\n\n                        \r\n                    }\n                    else if (\"java.lang.Boolean\".equals(paramType.getName())\n                            || \"boolean\".equals(paramType.getName())) {\n                        params[0] = Boolean.valueOf(value);\n\n                        \r\n                    }\n                    else if (\"java.net.InetAddress\".equals(paramType\n                            .getName())) {\n                        try {\n                            params[0] = InetAddress.getByName(value);\n                        } catch (UnknownHostException exc) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"IntrospectionUtils: Unable to resolve host name:\" + value);\n                            ok = false;\n                        }\n\n                        \r\n                    } else {\n                        if (log.isDebugEnabled())\n                            log.debug(\"IntrospectionUtils: Unknown type \" +\n                                    paramType.getName());\n                    }\n\n                    if (ok) {\n                        method.invoke(o, params);\n                        return true;\n                    }\n                }\n\n                \r\n                if (\"setProperty\".equals(method.getName())) {\n                    if (method.getReturnType() == Boolean.TYPE) {\n                        setPropertyMethodBool = method;\n                    } else {\n                        setPropertyMethodVoid = method;\n                    }\n\n                }\n            }\n\n            \r\n            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {\n                Object params[] = new Object[2];\n                params[0] = name;\n                params[1] = value;\n                if (setPropertyMethodBool != null) {\n                    try {\n                        return ((Boolean) setPropertyMethodBool.invoke(o,\n                                params)).booleanValue();\n                    }catch (IllegalArgumentException biae) {\n                        \r\n                        \r\n                        if (setPropertyMethodVoid!=null) {\n                            setPropertyMethodVoid.invoke(o, params);\n                            return true;\n                        }else {\n                            throw biae;\n                        }\n                    }\n                } else {\n                    setPropertyMethodVoid.invoke(o, params);\n                    return true;\n                }\n            }\n\n        } catch (IllegalArgumentException ex2) {\n            log.warn(\"IAE \" + o + \" \" + name + \" \" + value, ex2);\n        } catch (SecurityException ex1) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: SecurityException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ex1);\n        } catch (IllegalAccessException iae) {\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: IllegalAccessException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", iae);\n        } catch (InvocationTargetException ie) {\n            Throwable cause = ie.getCause();\n            if (cause instanceof ThreadDeath) {\n                throw (ThreadDeath) cause;\n            }\n            if (cause instanceof VirtualMachineError) {\n                throw (VirtualMachineError) cause;\n            }\n            if (log.isDebugEnabled())\n                log.debug(\"IntrospectionUtils: InvocationTargetException for \" +\n                        o.getClass() + \" \" + name + \"=\" + value + \")\", ie);\n        }\n        return false;\n    }\n","realPath":"test/org/apache/catalina/tribes/demos/IntrospectionUtils.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"bf09aa74650461b433ae6b52418e0726e6a32417","commitMessage":"@@@Code clean-up. Add braces for clarity. Enable check now all are fixed.\n\nHopefully final test of the CI.","date":"2021-05-27 06:41:15","modifiedFileCount":"65","status":"M","submitter":"Mark Thomas"}]
