[{"authorTime":"2012-01-15 02:15:08","codes":[{"authorDate":"2012-01-15 02:15:08","commitOrder":1,"curCode":"    public void doTestNonLogin(String user, String pwd, String uri,\n            boolean expectedReject, int expectedRC)\n            throws Exception {\n\n        Map<String,List<String>> reqHeaders =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedReject) {\n            assertEquals(expectedRC, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n}\n","date":"2012-01-15 02:15:08","endLine":165,"groupId":"12337","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonLogin","params":"(Stringuser@Stringpwd@Stringuri@booleanexpectedReject@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/67/b6a58660c72a62eb75308afadb29b6c1385192.src","preCode":"    public void doTestNonLogin(String user, String pwd, String uri,\n            boolean expectedReject, int expectedRC)\n            throws Exception {\n\n        Map<String,List<String>> reqHeaders =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedReject) {\n            assertEquals(expectedRC, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n}\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"},{"authorDate":"2012-01-15 02:15:08","commitOrder":1,"curCode":"    public void doTestBasic(String user, String pwd, String uri,\n            boolean expectedReject1, int expectedRC1,\n            boolean expectedReject2, int expectedRC2) throws Exception {\n\n        \r\n        Map<String,List<String>> reqHeaders1 =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders1 =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders1,\n                respHeaders1);\n\n        if (expectedReject1) {\n            assertEquals(expectedRC1, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n            return;\n        }\n\n        \r\n        String credentials = USER + \":\" + PWD;\n        byte[] credentialsBytes = ByteChunk.convertToBytes(credentials);\n        String base64auth = Base64.encode(credentialsBytes);\n        String authLine = \"Basic \" + base64auth;\n\n        List<String> auth = new ArrayList<String>();\n        auth.add(authLine);\n        Map<String,List<String>> reqHeaders2 = new HashMap<String,List<String>>();\n        reqHeaders2.put(CLIENT_AUTH_HEADER, auth);\n\n        Map<String,List<String>> respHeaders2 =\n            new HashMap<String,List<String>>();\n\n        bc.reset();\n        rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders2,\n                respHeaders2);\n\n        if (expectedReject2) {\n            assertEquals(expectedRC2, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2012-01-15 02:15:08","endLine":217,"groupId":"1328","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestBasic","params":"(Stringuser@Stringpwd@Stringuri@booleanexpectedReject1@intexpectedRC1@booleanexpectedReject2@intexpectedRC2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/67/b6a58660c72a62eb75308afadb29b6c1385192.src","preCode":"    public void doTestBasic(String user, String pwd, String uri,\n            boolean expectedReject1, int expectedRC1,\n            boolean expectedReject2, int expectedRC2) throws Exception {\n\n        \r\n        Map<String,List<String>> reqHeaders1 =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders1 =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders1,\n                respHeaders1);\n\n        if (expectedReject1) {\n            assertEquals(expectedRC1, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n            return;\n        }\n\n        \r\n        String credentials = USER + \":\" + PWD;\n        byte[] credentialsBytes = ByteChunk.convertToBytes(credentials);\n        String base64auth = Base64.encode(credentialsBytes);\n        String authLine = \"Basic \" + base64auth;\n\n        List<String> auth = new ArrayList<String>();\n        auth.add(authLine);\n        Map<String,List<String>> reqHeaders2 = new HashMap<String,List<String>>();\n        reqHeaders2.put(CLIENT_AUTH_HEADER, auth);\n\n        Map<String,List<String>> respHeaders2 =\n            new HashMap<String,List<String>>();\n\n        bc.reset();\n        rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders2,\n                respHeaders2);\n\n        if (expectedReject2) {\n            assertEquals(expectedRC2, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"B"}],"commitId":"4c30db5245e995cd6cdca2e65ff349fa789ad09f","commitMessage":"@@@Add non-SSO test cases for BASIC and non-Login authenticators\nPatch provided by Brian Burch\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1231543 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-01-15 02:15:08","modifiedFileCount":"0","status":"B","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-01-15 02:22:02","codes":[{"authorDate":"2012-01-15 02:22:02","commitOrder":2,"curCode":"    public void doTestNonLogin(String uri, boolean expectedReject,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedReject) {\n            assertEquals(expectedRC, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n}\n","date":"2012-01-15 02:22:02","endLine":162,"groupId":"12337","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonLogin","params":"(Stringuri@booleanexpectedReject@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/93/5a209d997f7c8f51f4f0c49a2cedafeea884e3.src","preCode":"    public void doTestNonLogin(String user, String pwd, String uri,\n            boolean expectedReject, int expectedRC)\n            throws Exception {\n\n        Map<String,List<String>> reqHeaders =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedReject) {\n            assertEquals(expectedRC, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n}\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2012-01-15 02:22:02","commitOrder":2,"curCode":"    public void doTestBasic(String user, String pwd, String uri,\n            boolean expectedReject1, int expectedRC1,\n            boolean expectedReject2, int expectedRC2) throws Exception {\n\n        \r\n        Map<String,List<String>> reqHeaders1 =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders1 =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders1,\n                respHeaders1);\n\n        if (expectedReject1) {\n            assertEquals(expectedRC1, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n            return;\n        }\n\n        \r\n        String credentials = user + \":\" + pwd;\n        byte[] credentialsBytes = ByteChunk.convertToBytes(credentials);\n        String base64auth = Base64.encode(credentialsBytes);\n        String authLine = \"Basic \" + base64auth;\n\n        List<String> auth = new ArrayList<String>();\n        auth.add(authLine);\n        Map<String,List<String>> reqHeaders2 = new HashMap<String,List<String>>();\n        reqHeaders2.put(CLIENT_AUTH_HEADER, auth);\n\n        Map<String,List<String>> respHeaders2 =\n            new HashMap<String,List<String>>();\n\n        bc.reset();\n        rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders2,\n                respHeaders2);\n\n        if (expectedReject2) {\n            assertEquals(expectedRC2, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2012-01-15 02:22:02","endLine":214,"groupId":"1328","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestBasic","params":"(Stringuser@Stringpwd@Stringuri@booleanexpectedReject1@intexpectedRC1@booleanexpectedReject2@intexpectedRC2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/93/5a209d997f7c8f51f4f0c49a2cedafeea884e3.src","preCode":"    public void doTestBasic(String user, String pwd, String uri,\n            boolean expectedReject1, int expectedRC1,\n            boolean expectedReject2, int expectedRC2) throws Exception {\n\n        \r\n        Map<String,List<String>> reqHeaders1 =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders1 =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders1,\n                respHeaders1);\n\n        if (expectedReject1) {\n            assertEquals(expectedRC1, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n            return;\n        }\n\n        \r\n        String credentials = USER + \":\" + PWD;\n        byte[] credentialsBytes = ByteChunk.convertToBytes(credentials);\n        String base64auth = Base64.encode(credentialsBytes);\n        String authLine = \"Basic \" + base64auth;\n\n        List<String> auth = new ArrayList<String>();\n        auth.add(authLine);\n        Map<String,List<String>> reqHeaders2 = new HashMap<String,List<String>>();\n        reqHeaders2.put(CLIENT_AUTH_HEADER, auth);\n\n        Map<String,List<String>> respHeaders2 =\n            new HashMap<String,List<String>>();\n\n        bc.reset();\n        rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders2,\n                respHeaders2);\n\n        if (expectedReject2) {\n            assertEquals(expectedRC2, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"7d18a8de5ecb66236d110d3a9a6c1cfa88996d2b","commitMessage":"@@@Fix unused code warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1231547 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-01-15 02:22:02","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-01-15 11:54:17","codes":[{"authorDate":"2012-01-15 11:54:17","commitOrder":3,"curCode":"    private void doTestNonLogin(String uri, boolean expectedReject,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedReject) {\n            assertEquals(expectedRC, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2012-01-15 11:54:17","endLine":163,"groupId":"12337","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonLogin","params":"(Stringuri@booleanexpectedReject@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/8f/e5b766b90f583d3460a2acca16cf69ec6747bc.src","preCode":"    public void doTestNonLogin(String uri, boolean expectedReject,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedReject) {\n            assertEquals(expectedRC, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n}\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2012-01-15 11:54:17","commitOrder":3,"curCode":"    private void doTestBasic(String user, String pwd, String uri,\n            boolean expectedReject1, int expectedRC1,\n            boolean expectedReject2, int expectedRC2) throws Exception {\n\n        \r\n        Map<String,List<String>> reqHeaders1 =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders1 =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders1,\n                respHeaders1);\n\n        if (expectedReject1) {\n            assertEquals(expectedRC1, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n            return;\n        }\n\n        \r\n        String credentials = user + \":\" + pwd;\n        byte[] credentialsBytes = ByteChunk.convertToBytes(credentials);\n        String base64auth = Base64.encode(credentialsBytes);\n        String authLine = \"Basic \" + base64auth;\n\n        List<String> auth = new ArrayList<String>();\n        auth.add(authLine);\n        Map<String,List<String>> reqHeaders2 = new HashMap<String,List<String>>();\n        reqHeaders2.put(CLIENT_AUTH_HEADER, auth);\n\n        Map<String,List<String>> respHeaders2 =\n            new HashMap<String,List<String>>();\n\n        bc.reset();\n        rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders2,\n                respHeaders2);\n\n        if (expectedReject2) {\n            assertEquals(expectedRC2, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2012-01-15 11:54:17","endLine":215,"groupId":"1328","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestBasic","params":"(Stringuser@Stringpwd@Stringuri@booleanexpectedReject1@intexpectedRC1@booleanexpectedReject2@intexpectedRC2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/8f/e5b766b90f583d3460a2acca16cf69ec6747bc.src","preCode":"    public void doTestBasic(String user, String pwd, String uri,\n            boolean expectedReject1, int expectedRC1,\n            boolean expectedReject2, int expectedRC2) throws Exception {\n\n        \r\n        Map<String,List<String>> reqHeaders1 =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders1 =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders1,\n                respHeaders1);\n\n        if (expectedReject1) {\n            assertEquals(expectedRC1, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n            return;\n        }\n\n        \r\n        String credentials = user + \":\" + pwd;\n        byte[] credentialsBytes = ByteChunk.convertToBytes(credentials);\n        String base64auth = Base64.encode(credentialsBytes);\n        String authLine = \"Basic \" + base64auth;\n\n        List<String> auth = new ArrayList<String>();\n        auth.add(authLine);\n        Map<String,List<String>> reqHeaders2 = new HashMap<String,List<String>>();\n        reqHeaders2.put(CLIENT_AUTH_HEADER, auth);\n\n        Map<String,List<String>> respHeaders2 =\n            new HashMap<String,List<String>>();\n\n        bc.reset();\n        rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders2,\n                respHeaders2);\n\n        if (expectedReject2) {\n            assertEquals(expectedRC2, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"176aa2d7e6d0f957a57e8a280fc543b1dc20b1f6","commitMessage":"@@@In TestNonLoginAndBasicAuthenticator:\nReduce visibility of methods that are not called from outside. Fix javadoc formatting.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1231620 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-01-15 11:54:17","modifiedFileCount":"1","status":"M","submitter":"Konstantin Kolinko"},{"authorTime":"2012-03-06 02:45:27","codes":[{"authorDate":"2012-03-06 02:45:27","commitOrder":4,"curCode":"    private void doTestNonLogin(String uri, boolean expectedReject,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedReject) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2012-03-06 02:45:27","endLine":163,"groupId":"12337","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonLogin","params":"(Stringuri@booleanexpectedReject@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/7f/92f4f151118307cac87d763b522a1c0647425d.src","preCode":"    private void doTestNonLogin(String uri, boolean expectedReject,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedReject) {\n            assertEquals(expectedRC, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2012-03-06 02:45:27","commitOrder":4,"curCode":"    private void doTestBasic(String user, String pwd, String uri,\n            boolean expectedReject1, int expectedRC1,\n            boolean expectedReject2, int expectedRC2) throws Exception {\n\n        \r\n        Map<String,List<String>> reqHeaders1 =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders1 =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders1,\n                respHeaders1);\n\n        if (expectedReject1) {\n            assertEquals(expectedRC1, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n            return;\n        }\n\n        \r\n        String credentials = user + \":\" + pwd;\n        byte[] credentialsBytes = ByteChunk.convertToBytes(credentials);\n        String base64auth = Base64.encode(credentialsBytes);\n        String authLine = \"Basic \" + base64auth;\n\n        List<String> auth = new ArrayList<String>();\n        auth.add(authLine);\n        Map<String,List<String>> reqHeaders2 = new HashMap<String,List<String>>();\n        reqHeaders2.put(CLIENT_AUTH_HEADER, auth);\n\n        Map<String,List<String>> respHeaders2 =\n            new HashMap<String,List<String>>();\n\n        bc.recycle();\n        rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders2,\n                respHeaders2);\n\n        if (expectedReject2) {\n            assertEquals(expectedRC2, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2012-03-06 02:45:27","endLine":215,"groupId":"1328","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestBasic","params":"(Stringuser@Stringpwd@Stringuri@booleanexpectedReject1@intexpectedRC1@booleanexpectedReject2@intexpectedRC2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/7f/92f4f151118307cac87d763b522a1c0647425d.src","preCode":"    private void doTestBasic(String user, String pwd, String uri,\n            boolean expectedReject1, int expectedRC1,\n            boolean expectedReject2, int expectedRC2) throws Exception {\n\n        \r\n        Map<String,List<String>> reqHeaders1 =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders1 =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders1,\n                respHeaders1);\n\n        if (expectedReject1) {\n            assertEquals(expectedRC1, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n            return;\n        }\n\n        \r\n        String credentials = user + \":\" + pwd;\n        byte[] credentialsBytes = ByteChunk.convertToBytes(credentials);\n        String base64auth = Base64.encode(credentialsBytes);\n        String authLine = \"Basic \" + base64auth;\n\n        List<String> auth = new ArrayList<String>();\n        auth.add(authLine);\n        Map<String,List<String>> reqHeaders2 = new HashMap<String,List<String>>();\n        reqHeaders2.put(CLIENT_AUTH_HEADER, auth);\n\n        Map<String,List<String>> respHeaders2 =\n            new HashMap<String,List<String>>();\n\n        bc.reset();\n        rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders2,\n                respHeaders2);\n\n        if (expectedReject2) {\n            assertEquals(expectedRC2, rc);\n            assertNull(bc.toString());\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"4807b2f0a3d3544a90c834e220f62d30010c8e40","commitMessage":"@@@Fix some test failures now response bodies are available for error\nresponses.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1297158 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-03-06 02:45:27","modifiedFileCount":"3","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-06-04 00:44:49","codes":[{"authorDate":"2012-03-06 02:45:27","commitOrder":5,"curCode":"    private void doTestNonLogin(String uri, boolean expectedReject,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedReject) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2012-03-06 02:45:27","endLine":163,"groupId":"12337","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonLogin","params":"(Stringuri@booleanexpectedReject@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/7f/92f4f151118307cac87d763b522a1c0647425d.src","preCode":"    private void doTestNonLogin(String uri, boolean expectedReject,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedReject) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"},{"authorDate":"2012-06-04 00:44:49","commitOrder":5,"curCode":"    private void doTestBasic(String user, String pwd, String uri,\n            boolean verifyAuthSchemeCase,\n            boolean expectedReject1, int expectedRC1,\n            boolean expectedReject2, int expectedRC2) throws Exception {\n\n        \r\n        Map<String,List<String>> reqHeaders1 =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders1 =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders1,\n                respHeaders1);\n\n        if (expectedReject1) {\n            assertEquals(expectedRC1, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n            return;\n        }\n\n        \r\n        String credentials = user + \":\" + pwd;\n        byte[] credentialsBytes = ByteChunk.convertToBytes(credentials);\n        String base64auth = Base64.encode(credentialsBytes);\n        String authScheme = verifyAuthSchemeCase ? \"bAsIc \" : \"Basic \";\n        String authLine = authScheme + base64auth;\n\n        List<String> auth = new ArrayList<String>();\n        auth.add(authLine);\n        Map<String,List<String>> reqHeaders2 = new HashMap<String,List<String>>();\n        reqHeaders2.put(CLIENT_AUTH_HEADER, auth);\n\n        Map<String,List<String>> respHeaders2 =\n            new HashMap<String,List<String>>();\n\n        bc.recycle();\n        rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders2,\n                respHeaders2);\n\n        if (expectedReject2) {\n            assertEquals(expectedRC2, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2012-06-04 00:44:49","endLine":229,"groupId":"1328","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestBasic","params":"(Stringuser@Stringpwd@Stringuri@booleanverifyAuthSchemeCase@booleanexpectedReject1@intexpectedRC1@booleanexpectedReject2@intexpectedRC2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/99/e29176797edee8469d2c5da0808dfd6e43b78e.src","preCode":"    private void doTestBasic(String user, String pwd, String uri,\n            boolean expectedReject1, int expectedRC1,\n            boolean expectedReject2, int expectedRC2) throws Exception {\n\n        \r\n        Map<String,List<String>> reqHeaders1 =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders1 =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders1,\n                respHeaders1);\n\n        if (expectedReject1) {\n            assertEquals(expectedRC1, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n            return;\n        }\n\n        \r\n        String credentials = user + \":\" + pwd;\n        byte[] credentialsBytes = ByteChunk.convertToBytes(credentials);\n        String base64auth = Base64.encode(credentialsBytes);\n        String authLine = \"Basic \" + base64auth;\n\n        List<String> auth = new ArrayList<String>();\n        auth.add(authLine);\n        Map<String,List<String>> reqHeaders2 = new HashMap<String,List<String>>();\n        reqHeaders2.put(CLIENT_AUTH_HEADER, auth);\n\n        Map<String,List<String>> respHeaders2 =\n            new HashMap<String,List<String>>();\n\n        bc.recycle();\n        rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders2,\n                respHeaders2);\n\n        if (expectedReject2) {\n            assertEquals(expectedRC2, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"}],"commitId":"a1c61657fe1cfd6d796863695dbb4b72335f31ef","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53008\nExtend test cases for BASIC auth and RFC2617 compliance\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1345704 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-06-04 00:44:49","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-08-28 04:23:42","codes":[{"authorDate":"2012-08-28 04:23:42","commitOrder":6,"curCode":"    private void doTestNonLogin(String uri, boolean expectedReject,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedReject) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2012-08-28 04:23:42","endLine":173,"groupId":"12337","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonLogin","params":"(Stringuri@booleanexpectedReject@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c8/9cd60ad5af768d1f152c322f3ba7a327a2d93f.src","preCode":"    private void doTestNonLogin(String uri, boolean expectedReject,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedReject) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2012-08-28 04:23:42","commitOrder":6,"curCode":"    private void doTestBasic(String user, String pwd, String uri,\n            boolean verifyAuthSchemeCase,\n            boolean expectedReject1, int expectedRC1,\n            boolean expectedReject2, int expectedRC2) throws Exception {\n\n        \r\n        Map<String,List<String>> reqHeaders1 = new HashMap<>();\n        Map<String,List<String>> respHeaders1 = new HashMap<>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders1,\n                respHeaders1);\n\n        if (expectedReject1) {\n            assertEquals(expectedRC1, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n            return;\n        }\n\n        \r\n        String credentials = user + \":\" + pwd;\n        byte[] credentialsBytes = ByteChunk.convertToBytes(credentials);\n        String base64auth = Base64.encode(credentialsBytes);\n        String authScheme = verifyAuthSchemeCase ? \"bAsIc \" : \"Basic \";\n        String authLine = authScheme + base64auth;\n\n        List<String> auth = new ArrayList<>();\n        auth.add(authLine);\n        Map<String,List<String>> reqHeaders2 = new HashMap<>();\n        reqHeaders2.put(CLIENT_AUTH_HEADER, auth);\n\n        Map<String,List<String>> respHeaders2 = new HashMap<>();\n\n        bc.recycle();\n        rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders2,\n                respHeaders2);\n\n        if (expectedReject2) {\n            assertEquals(expectedRC2, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2012-08-28 04:23:42","endLine":224,"groupId":"1328","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestBasic","params":"(Stringuser@Stringpwd@Stringuri@booleanverifyAuthSchemeCase@booleanexpectedReject1@intexpectedRC1@booleanexpectedReject2@intexpectedRC2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c8/9cd60ad5af768d1f152c322f3ba7a327a2d93f.src","preCode":"    private void doTestBasic(String user, String pwd, String uri,\n            boolean verifyAuthSchemeCase,\n            boolean expectedReject1, int expectedRC1,\n            boolean expectedReject2, int expectedRC2) throws Exception {\n\n        \r\n        Map<String,List<String>> reqHeaders1 =\n                new HashMap<String,List<String>>();\n        Map<String,List<String>> respHeaders1 =\n                new HashMap<String,List<String>>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders1,\n                respHeaders1);\n\n        if (expectedReject1) {\n            assertEquals(expectedRC1, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n            return;\n        }\n\n        \r\n        String credentials = user + \":\" + pwd;\n        byte[] credentialsBytes = ByteChunk.convertToBytes(credentials);\n        String base64auth = Base64.encode(credentialsBytes);\n        String authScheme = verifyAuthSchemeCase ? \"bAsIc \" : \"Basic \";\n        String authLine = authScheme + base64auth;\n\n        List<String> auth = new ArrayList<String>();\n        auth.add(authLine);\n        Map<String,List<String>> reqHeaders2 = new HashMap<String,List<String>>();\n        reqHeaders2.put(CLIENT_AUTH_HEADER, auth);\n\n        Map<String,List<String>> respHeaders2 =\n            new HashMap<String,List<String>>();\n\n        bc.recycle();\n        rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders2,\n                respHeaders2);\n\n        if (expectedReject2) {\n            assertEquals(expectedRC2, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"803209f0db915c6471524c0e5e7befad1ea79cbf","commitMessage":"@@@Java 7 <>\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1377826 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-08-28 04:23:42","modifiedFileCount":"4","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-11-29 22:21:45","codes":[{"authorDate":"2012-11-29 22:21:45","commitOrder":7,"curCode":"    private void doTestNonLogin(String uri, boolean useCookie,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie && (cookies != null)) {\n            reqHeaders.put(CLIENT_COOKIE_HEADER + \":\", cookies);\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2012-11-29 22:21:45","endLine":420,"groupId":"5839","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonLogin","params":"(Stringuri@booleanuseCookie@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a1/963ff53bd2c4eb3dd96fa8e431676c80cb8538.src","preCode":"    private void doTestNonLogin(String uri, boolean expectedReject,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedReject) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"M"},{"authorDate":"2012-11-29 22:21:45","commitOrder":7,"curCode":"    private void doTestBasic(String user, String pwd, String uri,\n            BasicCredentials credentials, boolean useCookie,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie && (cookies != null)) {\n            reqHeaders.put(CLIENT_COOKIE_HEADER + \":\", cookies);\n        }\n        else {\n            if (credentials != null) {\n                List<String> auth = new ArrayList<>();\n                auth.add(credentials.getCredentials());\n                reqHeaders.put(CLIENT_AUTH_HEADER, auth);\n            }\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n            if (expectedRC == HttpServletResponse.SC_UNAUTHORIZED) {\n                \r\n                boolean methodFound = false;\n                List<String> authHeaders = respHeaders.get(SERVER_AUTH_HEADER);\n                for (String authHeader : authHeaders) {\n                    if (authHeader.indexOf(NICE_METHOD) > -1) {\n                        methodFound = true;\n                    }\n                }\n                assertTrue(methodFound);\n            }\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n            List<String> newCookies = respHeaders.get(SERVER_COOKIE_HEADER);\n            if (newCookies != null) {\n                \r\n                cookies = newCookies;\n            }\n        }\n    }\n","date":"2012-11-29 22:21:45","endLine":467,"groupId":"5836","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestBasic","params":"(Stringuser@Stringpwd@Stringuri@BasicCredentialscredentials@booleanuseCookie@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a1/963ff53bd2c4eb3dd96fa8e431676c80cb8538.src","preCode":"    private void doTestBasic(String user, String pwd, String uri,\n            boolean verifyAuthSchemeCase,\n            boolean expectedReject1, int expectedRC1,\n            boolean expectedReject2, int expectedRC2) throws Exception {\n\n        \r\n        Map<String,List<String>> reqHeaders1 = new HashMap<>();\n        Map<String,List<String>> respHeaders1 = new HashMap<>();\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders1,\n                respHeaders1);\n\n        if (expectedReject1) {\n            assertEquals(expectedRC1, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n            return;\n        }\n\n        \r\n        String credentials = user + \":\" + pwd;\n        byte[] credentialsBytes = ByteChunk.convertToBytes(credentials);\n        String base64auth = Base64.encode(credentialsBytes);\n        String authScheme = verifyAuthSchemeCase ? \"bAsIc \" : \"Basic \";\n        String authLine = authScheme + base64auth;\n\n        List<String> auth = new ArrayList<>();\n        auth.add(authLine);\n        Map<String,List<String>> reqHeaders2 = new HashMap<>();\n        reqHeaders2.put(CLIENT_AUTH_HEADER, auth);\n\n        Map<String,List<String>> respHeaders2 = new HashMap<>();\n\n        bc.recycle();\n        rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders2,\n                respHeaders2);\n\n        if (expectedReject2) {\n            assertEquals(expectedRC2, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(200, rc);\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"M"}],"commitId":"46d69fc7cc550b24b0745f76b61245d696415c99","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54190\nImprove unit tests.\nPatch by Brian Burch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1415177 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-11-29 22:21:45","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-11-29 22:28:53","codes":[{"authorDate":"2012-11-29 22:21:45","commitOrder":8,"curCode":"    private void doTestNonLogin(String uri, boolean useCookie,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie && (cookies != null)) {\n            reqHeaders.put(CLIENT_COOKIE_HEADER + \":\", cookies);\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2012-11-29 22:21:45","endLine":420,"groupId":"5839","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonLogin","params":"(Stringuri@booleanuseCookie@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a1/963ff53bd2c4eb3dd96fa8e431676c80cb8538.src","preCode":"    private void doTestNonLogin(String uri, boolean useCookie,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie && (cookies != null)) {\n            reqHeaders.put(CLIENT_COOKIE_HEADER + \":\", cookies);\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"N"},{"authorDate":"2012-11-29 22:28:53","commitOrder":8,"curCode":"    private void doTestBasic(String uri, BasicCredentials credentials,\n            boolean useCookie, int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie && (cookies != null)) {\n            reqHeaders.put(CLIENT_COOKIE_HEADER + \":\", cookies);\n        }\n        else {\n            if (credentials != null) {\n                List<String> auth = new ArrayList<>();\n                auth.add(credentials.getCredentials());\n                reqHeaders.put(CLIENT_AUTH_HEADER, auth);\n            }\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n            if (expectedRC == HttpServletResponse.SC_UNAUTHORIZED) {\n                \r\n                boolean methodFound = false;\n                List<String> authHeaders = respHeaders.get(SERVER_AUTH_HEADER);\n                for (String authHeader : authHeaders) {\n                    if (authHeader.indexOf(NICE_METHOD) > -1) {\n                        methodFound = true;\n                    }\n                }\n                assertTrue(methodFound);\n            }\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n            List<String> newCookies = respHeaders.get(SERVER_COOKIE_HEADER);\n            if (newCookies != null) {\n                \r\n                cookies = newCookies;\n            }\n        }\n    }\n","date":"2012-11-29 22:28:53","endLine":466,"groupId":"5836","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestBasic","params":"(Stringuri@BasicCredentialscredentials@booleanuseCookie@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6f/8c568a0e46c8d5966dae9feb1451eb43092055.src","preCode":"    private void doTestBasic(String user, String pwd, String uri,\n            BasicCredentials credentials, boolean useCookie,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie && (cookies != null)) {\n            reqHeaders.put(CLIENT_COOKIE_HEADER + \":\", cookies);\n        }\n        else {\n            if (credentials != null) {\n                List<String> auth = new ArrayList<>();\n                auth.add(credentials.getCredentials());\n                reqHeaders.put(CLIENT_AUTH_HEADER, auth);\n            }\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n            if (expectedRC == HttpServletResponse.SC_UNAUTHORIZED) {\n                \r\n                boolean methodFound = false;\n                List<String> authHeaders = respHeaders.get(SERVER_AUTH_HEADER);\n                for (String authHeader : authHeaders) {\n                    if (authHeader.indexOf(NICE_METHOD) > -1) {\n                        methodFound = true;\n                    }\n                }\n                assertTrue(methodFound);\n            }\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n            List<String> newCookies = respHeaders.get(SERVER_COOKIE_HEADER);\n            if (newCookies != null) {\n                \r\n                cookies = newCookies;\n            }\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"M"}],"commitId":"f6ca87cf4fd75557be6a335cc246887e6b5fa327","commitMessage":"@@@Removed unused code\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1415179 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-11-29 22:28:53","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-06-18 15:18:09","codes":[{"authorDate":"2012-11-29 22:21:45","commitOrder":9,"curCode":"    private void doTestNonLogin(String uri, boolean useCookie,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie && (cookies != null)) {\n            reqHeaders.put(CLIENT_COOKIE_HEADER + \":\", cookies);\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2012-11-29 22:21:45","endLine":420,"groupId":"5839","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonLogin","params":"(Stringuri@booleanuseCookie@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a1/963ff53bd2c4eb3dd96fa8e431676c80cb8538.src","preCode":"    private void doTestNonLogin(String uri, boolean useCookie,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie && (cookies != null)) {\n            reqHeaders.put(CLIENT_COOKIE_HEADER + \":\", cookies);\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"N"},{"authorDate":"2013-06-18 15:18:09","commitOrder":9,"curCode":"    private void doTestBasic(String uri, BasicCredentials credentials,\n            boolean useCookie, int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie && (cookies != null)) {\n            reqHeaders.put(CLIENT_COOKIE_HEADER + \":\", cookies);\n        }\n        else {\n            if (credentials != null) {\n                List<String> auth = new ArrayList<>();\n                auth.add(credentials.getCredentials());\n                reqHeaders.put(CLIENT_AUTH_HEADER, auth);\n            }\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n            if (expectedRC == HttpServletResponse.SC_UNAUTHORIZED) {\n                \r\n                boolean methodFound = false;\n                List<String> authHeaders = respHeaders.get(SERVER_AUTH_HEADER);\n                for (String authHeader : authHeaders) {\n                    if (authHeader.indexOf(NICE_METHOD) > -1) {\n                        methodFound = true;\n                        break;\n                    }\n                }\n                assertTrue(methodFound);\n            }\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n            List<String> newCookies = respHeaders.get(SERVER_COOKIE_HEADER);\n            if (newCookies != null) {\n                \r\n                cookies = newCookies;\n            }\n        }\n    }\n","date":"2013-06-18 15:18:09","endLine":474,"groupId":"5836","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestBasic","params":"(Stringuri@BasicCredentialscredentials@booleanuseCookie@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/99/740d98e45edad239a3e9a7bb7371ee5b906afc.src","preCode":"    private void doTestBasic(String uri, BasicCredentials credentials,\n            boolean useCookie, int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie && (cookies != null)) {\n            reqHeaders.put(CLIENT_COOKIE_HEADER + \":\", cookies);\n        }\n        else {\n            if (credentials != null) {\n                List<String> auth = new ArrayList<>();\n                auth.add(credentials.getCredentials());\n                reqHeaders.put(CLIENT_AUTH_HEADER, auth);\n            }\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n            if (expectedRC == HttpServletResponse.SC_UNAUTHORIZED) {\n                \r\n                boolean methodFound = false;\n                List<String> authHeaders = respHeaders.get(SERVER_AUTH_HEADER);\n                for (String authHeader : authHeaders) {\n                    if (authHeader.indexOf(NICE_METHOD) > -1) {\n                        methodFound = true;\n                    }\n                }\n                assertTrue(methodFound);\n            }\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n            List<String> newCookies = respHeaders.get(SERVER_COOKIE_HEADER);\n            if (newCookies != null) {\n                \r\n                cookies = newCookies;\n            }\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"M"}],"commitId":"c48a2ed8ab60c62bb8097389319c5ef030bfd4c4","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55110\nSmall performance improvements\nPatch provided by Adrian Nistor\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1494044 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-06-18 15:18:09","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2015-09-14 23:36:35","codes":[{"authorDate":"2015-09-14 23:36:35","commitOrder":10,"curCode":"    private void doTestNonLogin(String uri, boolean useCookie,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie) {\n            addCookies(reqHeaders);\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2015-09-14 23:36:35","endLine":374,"groupId":"9513","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonLogin","params":"(Stringuri@booleanuseCookie@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/87/92d323290a5ce631c1769377231a7f8bd188ad.src","preCode":"    private void doTestNonLogin(String uri, boolean useCookie,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie && (cookies != null)) {\n            reqHeaders.put(CLIENT_COOKIE_HEADER + \":\", cookies);\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"M"},{"authorDate":"2015-09-14 23:36:35","commitOrder":10,"curCode":"    private void doTestBasic(String uri, BasicCredentials credentials,\n            boolean useCookie, int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie) {\n            addCookies(reqHeaders);\n        }\n        else {\n            if (credentials != null) {\n                List<String> auth = new ArrayList<>();\n                auth.add(credentials.getCredentials());\n                reqHeaders.put(CLIENT_AUTH_HEADER, auth);\n            }\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n            if (expectedRC == HttpServletResponse.SC_UNAUTHORIZED) {\n                \r\n                boolean methodFound = false;\n                List<String> authHeaders = respHeaders.get(SERVER_AUTH_HEADER);\n                for (String authHeader : authHeaders) {\n                    if (authHeader.indexOf(NICE_METHOD) > -1) {\n                        methodFound = true;\n                        break;\n                    }\n                }\n                assertTrue(methodFound);\n            }\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n            List<String> newCookies = respHeaders.get(SERVER_COOKIE_HEADER);\n            if (newCookies != null) {\n                \r\n                saveCookies(respHeaders);\n            }\n        }\n    }\n","date":"2015-09-14 23:36:35","endLine":421,"groupId":"5836","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestBasic","params":"(Stringuri@BasicCredentialscredentials@booleanuseCookie@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/87/92d323290a5ce631c1769377231a7f8bd188ad.src","preCode":"    private void doTestBasic(String uri, BasicCredentials credentials,\n            boolean useCookie, int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie && (cookies != null)) {\n            reqHeaders.put(CLIENT_COOKIE_HEADER + \":\", cookies);\n        }\n        else {\n            if (credentials != null) {\n                List<String> auth = new ArrayList<>();\n                auth.add(credentials.getCredentials());\n                reqHeaders.put(CLIENT_AUTH_HEADER, auth);\n            }\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n            if (expectedRC == HttpServletResponse.SC_UNAUTHORIZED) {\n                \r\n                boolean methodFound = false;\n                List<String> authHeaders = respHeaders.get(SERVER_AUTH_HEADER);\n                for (String authHeader : authHeaders) {\n                    if (authHeader.indexOf(NICE_METHOD) > -1) {\n                        methodFound = true;\n                        break;\n                    }\n                }\n                assertTrue(methodFound);\n            }\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n            List<String> newCookies = respHeaders.get(SERVER_COOKIE_HEADER);\n            if (newCookies != null) {\n                \r\n                cookies = newCookies;\n            }\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"}],"commitId":"279ab2edceabed0a6529c8fe06dad224ad639c72","commitMessage":"@@@Fix various cookie related issues in Authenticator tests now the RFC6265 cookie parser is used by default\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1702970 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-09-14 23:36:35","modifiedFileCount":"3","status":"M","submitter":"Mark Thomas"},{"authorTime":"2017-05-11 15:23:21","codes":[{"authorDate":"2015-09-14 23:36:35","commitOrder":11,"curCode":"    private void doTestNonLogin(String uri, boolean useCookie,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie) {\n            addCookies(reqHeaders);\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2015-09-14 23:36:35","endLine":374,"groupId":"9513","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonLogin","params":"(Stringuri@booleanuseCookie@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/87/92d323290a5ce631c1769377231a7f8bd188ad.src","preCode":"    private void doTestNonLogin(String uri, boolean useCookie,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie) {\n            addCookies(reqHeaders);\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"N"},{"authorDate":"2017-05-11 15:23:21","commitOrder":11,"curCode":"    private void doTestBasic(String uri, BasicCredentials credentials,\n            boolean useCookie, int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie) {\n            addCookies(reqHeaders);\n        }\n        else {\n            if (credentials != null) {\n                List<String> auth = new ArrayList<>();\n                auth.add(credentials.getCredentials());\n                reqHeaders.put(CLIENT_AUTH_HEADER, auth);\n            }\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n            if (expectedRC == HttpServletResponse.SC_UNAUTHORIZED) {\n                \r\n                boolean methodFound = false;\n                List<String> authHeaders = respHeaders.get(SERVER_AUTH_HEADER);\n                for (String authHeader : authHeaders) {\n                    if (authHeader.contains(NICE_METHOD)) {\n                        methodFound = true;\n                        break;\n                    }\n                }\n                assertTrue(methodFound);\n            }\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n            List<String> newCookies = respHeaders.get(SERVER_COOKIE_HEADER);\n            if (newCookies != null) {\n                \r\n                saveCookies(respHeaders);\n            }\n        }\n    }\n","date":"2017-05-11 15:23:21","endLine":425,"groupId":"5836","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestBasic","params":"(Stringuri@BasicCredentialscredentials@booleanuseCookie@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/27/98003f8a7027c5b822fd9dede761a6b4d51ba2.src","preCode":"    private void doTestBasic(String uri, BasicCredentials credentials,\n            boolean useCookie, int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie) {\n            addCookies(reqHeaders);\n        }\n        else {\n            if (credentials != null) {\n                List<String> auth = new ArrayList<>();\n                auth.add(credentials.getCredentials());\n                reqHeaders.put(CLIENT_AUTH_HEADER, auth);\n            }\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n            if (expectedRC == HttpServletResponse.SC_UNAUTHORIZED) {\n                \r\n                boolean methodFound = false;\n                List<String> authHeaders = respHeaders.get(SERVER_AUTH_HEADER);\n                for (String authHeader : authHeaders) {\n                    if (authHeader.indexOf(NICE_METHOD) > -1) {\n                        methodFound = true;\n                        break;\n                    }\n                }\n                assertTrue(methodFound);\n            }\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n            List<String> newCookies = respHeaders.get(SERVER_COOKIE_HEADER);\n            if (newCookies != null) {\n                \r\n                saveCookies(respHeaders);\n            }\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"}],"commitId":"8ec82f4b9080e219d1147fc65dc2bf2370a5b142","commitMessage":"@@@Use String.contains() instead of indexOf()\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1794791 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-05-11 15:23:21","modifiedFileCount":"19","status":"M","submitter":"Emmanuel Bourg"},{"authorTime":"2017-11-13 18:49:13","codes":[{"authorDate":"2017-11-13 18:49:13","commitOrder":12,"curCode":"    private void doTestNonLogin(String uri, boolean useCookie,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie) {\n            addCookies(reqHeaders);\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            Assert.assertEquals(expectedRC, rc);\n            Assert.assertTrue(bc.getLength() > 0);\n        }\n        else {\n            Assert.assertEquals(\"OK\", bc.toString());\n        }\n    }\n","date":"2017-11-13 18:49:13","endLine":376,"groupId":"102005","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonLogin","params":"(Stringuri@booleanuseCookie@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d1/b90774344b5199c1b9b79e0f9ef818b36d35dd.src","preCode":"    private void doTestNonLogin(String uri, boolean useCookie,\n            int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie) {\n            addCookies(reqHeaders);\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":355,"status":"M"},{"authorDate":"2017-11-13 18:49:13","commitOrder":12,"curCode":"    private void doTestBasic(String uri, BasicCredentials credentials,\n            boolean useCookie, int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie) {\n            addCookies(reqHeaders);\n        }\n        else {\n            if (credentials != null) {\n                List<String> auth = new ArrayList<>();\n                auth.add(credentials.getCredentials());\n                reqHeaders.put(CLIENT_AUTH_HEADER, auth);\n            }\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            Assert.assertEquals(expectedRC, rc);\n            Assert.assertTrue(bc.getLength() > 0);\n            if (expectedRC == HttpServletResponse.SC_UNAUTHORIZED) {\n                \r\n                boolean methodFound = false;\n                List<String> authHeaders = respHeaders.get(SERVER_AUTH_HEADER);\n                for (String authHeader : authHeaders) {\n                    if (authHeader.contains(NICE_METHOD)) {\n                        methodFound = true;\n                        break;\n                    }\n                }\n                Assert.assertTrue(methodFound);\n            }\n        }\n        else {\n            Assert.assertEquals(\"OK\", bc.toString());\n            List<String> newCookies = respHeaders.get(SERVER_COOKIE_HEADER);\n            if (newCookies != null) {\n                \r\n                saveCookies(respHeaders);\n            }\n        }\n    }\n","date":"2017-11-13 18:49:13","endLine":423,"groupId":"102005","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestBasic","params":"(Stringuri@BasicCredentialscredentials@booleanuseCookie@intexpectedRC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d1/b90774344b5199c1b9b79e0f9ef818b36d35dd.src","preCode":"    private void doTestBasic(String uri, BasicCredentials credentials,\n            boolean useCookie, int expectedRC) throws Exception {\n\n        Map<String,List<String>> reqHeaders = new HashMap<>();\n        Map<String,List<String>> respHeaders = new HashMap<>();\n\n        if (useCookie) {\n            addCookies(reqHeaders);\n        }\n        else {\n            if (credentials != null) {\n                List<String> auth = new ArrayList<>();\n                auth.add(credentials.getCredentials());\n                reqHeaders.put(CLIENT_AUTH_HEADER, auth);\n            }\n        }\n\n        ByteChunk bc = new ByteChunk();\n        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,\n                respHeaders);\n\n        if (expectedRC != HttpServletResponse.SC_OK) {\n            assertEquals(expectedRC, rc);\n            assertTrue(bc.getLength() > 0);\n            if (expectedRC == HttpServletResponse.SC_UNAUTHORIZED) {\n                \r\n                boolean methodFound = false;\n                List<String> authHeaders = respHeaders.get(SERVER_AUTH_HEADER);\n                for (String authHeader : authHeaders) {\n                    if (authHeader.contains(NICE_METHOD)) {\n                        methodFound = true;\n                        break;\n                    }\n                }\n                assertTrue(methodFound);\n            }\n        }\n        else {\n            assertEquals(\"OK\", bc.toString());\n            List<String> newCookies = respHeaders.get(SERVER_COOKIE_HEADER);\n            if (newCookies != null) {\n                \r\n                saveCookies(respHeaders);\n            }\n        }\n    }\n","realPath":"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"M"}],"commitId":"e1b3882ee74368e5d4e7fd90679e009280cdd69b","commitMessage":"@@@Remove use of all static Assert.* imports\n- fixes Gump errors with latest Checkstyle\n- doesn't introduce errors for older Checkstyle\n- makes unit tests consistent mwith use of Assert\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1815079 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-11-13 18:49:13","modifiedFileCount":"105","status":"M","submitter":"Mark Thomas"}]
