[{"authorTime":"2009-11-05 10:03:12","codes":[{"authorDate":"2009-11-06 04:35:09","commitOrder":2,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIPHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIPHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIPHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderSslValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                          + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                          + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n                          + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n                          + request.getHeader(protocolHeader) + \"' will be seen as newRemoteAddr='\" + xRequest.getRemoteAddr()\n                          + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\" + xRequest.getScheme() + \"', newSecure='\"\n                          + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\" + xRequest.getHeader(remoteIPHeader) + \", new[\"\n                          + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            chain.doFilter(request, response);\n        }\n        \n    }\n","date":"2009-11-06 04:35:09","endLine":772,"groupId":"11359","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ef/34340e8725a200f73cf36785b1f5fc4e373826.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIPHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIPHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIPHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderSslValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                          + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                          + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n                          + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n                          + request.getHeader(protocolHeader) + \"' will be seen as newRemoteAddr='\" + xRequest.getRemoteAddr()\n                          + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\" + xRequest.getScheme() + \"', newSecure='\"\n                          + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\" + xRequest.getHeader(remoteIPHeader) + \", new[\"\n                          + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            chain.doFilter(request, response);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":699,"status":"B"},{"authorDate":"2009-11-05 10:03:12","commitOrder":2,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2009-11-05 10:03:12","endLine":612,"groupId":"4291","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/44/a3cff50b71fbaaf5ae839fca5b5d9d5ca0e0f2.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":527,"status":"NB"}],"commitId":"a34b357ec855c269140ca2568c08d30308aecc43","commitMessage":"@@@https://issues.apache.org/bugzilla/show_bug.cgi?id=47330\nAdd RemoteIpFilter\nPatch provided by Cyrille Le Clerc\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@833155 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-11-06 04:35:09","modifiedFileCount":"0","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2009-11-05 10:03:12","codes":[{"authorDate":"2009-11-09 22:31:40","commitOrder":3,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIPHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIPHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIPHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderSslValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n                        + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\"\n                        + xRequest.getHeader(remoteIPHeader) + \", new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            chain.doFilter(request, response);\n        }\n        \n    }\n","date":"2009-11-09 22:31:40","endLine":768,"groupId":"11359","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/77/10febf9e1a3a1158888adaf3b7c2403e824a9d.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIPHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIPHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIPHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderSslValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                          + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                          + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n                          + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n                          + request.getHeader(protocolHeader) + \"' will be seen as newRemoteAddr='\" + xRequest.getRemoteAddr()\n                          + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\" + xRequest.getScheme() + \"', newSecure='\"\n                          + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\" + xRequest.getHeader(remoteIPHeader) + \", new[\"\n                          + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            chain.doFilter(request, response);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":695,"status":"M"},{"authorDate":"2009-11-05 10:03:12","commitOrder":3,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2009-11-05 10:03:12","endLine":612,"groupId":"4291","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/44/a3cff50b71fbaaf5ae839fca5b5d9d5ca0e0f2.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":527,"status":"N"}],"commitId":"535b9a14314296ef787381f8834e5b4404b502cb","commitMessage":"@@@Patch provided by Cyrille Le Clerc\n* fix NPE in log statement if protocolHeader has not been defined and the servlet container does not support request.getHeader(null)\n* fix mismatch between javadoc  and code for filter parameter name \"allowedInternalProxies\" -> \"internalProxies\"\n* finish javadoc refactoring \"XForwardedFilter\" -> \"RemoteIpFilter\"\nAlso fix some Eclipse warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@834081 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-11-09 22:31:40","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2009-11-05 10:03:12","codes":[{"authorDate":"2009-12-15 05:18:34","commitOrder":4,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIPHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIPHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIPHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n                        + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\"\n                        + xRequest.getHeader(remoteIPHeader) + \", new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            chain.doFilter(request, response);\n        }\n        \n    }\n","date":"2009-12-15 05:18:34","endLine":769,"groupId":"11359","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9f/0d20dc8db30be841289750947fca36651d0cfe.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIPHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIPHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIPHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderSslValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n                        + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\"\n                        + xRequest.getHeader(remoteIPHeader) + \", new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            chain.doFilter(request, response);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":696,"status":"M"},{"authorDate":"2009-11-05 10:03:12","commitOrder":4,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2009-11-05 10:03:12","endLine":612,"groupId":"4291","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/44/a3cff50b71fbaaf5ae839fca5b5d9d5ca0e0f2.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":527,"status":"N"}],"commitId":"803d64d9adcf9698d2d3d5b60db7a5cbb5446bc6","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48387\nMake configuration attributes consistent between Filter and Valves\nPatch provided by Cyrille Le Clerc\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@890483 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-12-15 05:18:34","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2009-11-05 10:03:12","codes":[{"authorDate":"2010-02-02 21:25:42","commitOrder":5,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIPHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIPHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIPHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n                        + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\"\n                        + xRequest.getHeader(remoteIPHeader) + \", new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            chain.doFilter(request, response);\n        }\n        \n    }\n","date":"2010-02-02 21:25:42","endLine":795,"groupId":"7363","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e5/4a5effa3bbd174244ce80dfc7afedf3d3261d0.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIPHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIPHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIPHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n                        + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\"\n                        + xRequest.getHeader(remoteIPHeader) + \", new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            chain.doFilter(request, response);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":716,"status":"M"},{"authorDate":"2009-11-05 10:03:12","commitOrder":5,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2009-11-05 10:03:12","endLine":612,"groupId":"4291","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/44/a3cff50b71fbaaf5ae839fca5b5d9d5ca0e0f2.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":527,"status":"N"}],"commitId":"7aa1206c1c591f44ce2dec8bc2716fd9aa947c14","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48647\nRemoteIpFilter : request.secure and request.scheme are not forced to \"false\" and \"http\" if X-Forwarded-Proto=http\nPatch provided by Cyrille Le Clerc \n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@905625 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-02-02 21:25:42","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-02-02 21:28:55","codes":[{"authorDate":"2010-02-02 21:25:42","commitOrder":6,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIPHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIPHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIPHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n                        + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\"\n                        + xRequest.getHeader(remoteIPHeader) + \", new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            chain.doFilter(request, response);\n        }\n        \n    }\n","date":"2010-02-02 21:25:42","endLine":795,"groupId":"7363","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e5/4a5effa3bbd174244ce80dfc7afedf3d3261d0.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIPHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIPHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIPHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n                        + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\"\n                        + xRequest.getHeader(remoteIPHeader) + \", new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            chain.doFilter(request, response);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":716,"status":"N"},{"authorDate":"2010-02-02 21:28:55","commitOrder":6,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2010-02-02 21:28:55","endLine":644,"groupId":"4291","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ac/30d373f832f104647a6e96fe9a6cf3a8dbcacd.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue != null && protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":550,"status":"M"}],"commitId":"1789bd8c04d07d1ca4e44a3d11803824ff834222","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48653\nRemoteIpValve : request.secure and request.scheme are not forced to \"false\" and \"http\" if X-Forwarded-Proto=http\nPatch provided by Cyrille Le Clerc\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@905627 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-02-02 21:28:55","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-04-04 18:25:56","codes":[{"authorDate":"2010-04-04 18:25:56","commitOrder":7,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIPHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIPHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIPHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n                        + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\"\n                        + xRequest.getHeader(remoteIPHeader) + \", new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","date":"2010-04-04 18:25:56","endLine":799,"groupId":"7363","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b6/f9dfc3a525842181bce7321b51f2070d7f073e.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIPHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIPHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIPHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n                        + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\"\n                        + xRequest.getHeader(remoteIPHeader) + \", new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            chain.doFilter(request, response);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":716,"status":"M"},{"authorDate":"2010-04-04 18:25:56","commitOrder":7,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2010-04-04 18:25:56","endLine":649,"groupId":"4291","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/7c/0c25856051d311217f171234cb0487d19209ab.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":550,"status":"M"}],"commitId":"9a42719225c54c485d9940484dd949d99b469e8f","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48983\nAdditional debug logging for when RemoteIp(Valve|Filter) is not invoked\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@930657 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-04-04 18:25:56","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-06-18 19:19:38","codes":[{"authorDate":"2010-06-18 19:19:38","commitOrder":8,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + request.getHeader(remoteIpHeader) + \", original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \", new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","date":"2010-06-18 19:19:38","endLine":799,"groupId":"7363","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/59/7b33440ac2b1abfb9ed596e1075fffd47d06cb.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIPHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIPHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIPHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n                        + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\"\n                        + xRequest.getHeader(remoteIPHeader) + \", new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":716,"status":"M"},{"authorDate":"2010-06-18 19:19:38","commitOrder":8,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2010-06-18 19:19:38","endLine":649,"groupId":"4291","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f8/d533b507661fed97cd6b05c9635ee72e9e7b01.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIPHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":550,"status":"M"}],"commitId":"27091e7b89c9acceca4381bdb26b9a2d8bb8c10e","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49443\nUse remoteIp... rather then remoteIP... consistently\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@955937 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-06-18 19:19:38","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-01-05 23:05:42","codes":[{"authorDate":"2011-01-05 23:05:42","commitOrder":9,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuffer concatRemoteIpHeaderValue = new StringBuffer();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","date":"2011-01-05 23:05:42","endLine":809,"groupId":"990","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/97/d6aa73c5ab549d39b1795a064d9542eae4c5ed.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + request.getHeader(remoteIpHeader) + \", original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \", new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":717,"status":"M"},{"authorDate":"2011-01-05 23:05:42","commitOrder":9,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuffer concatRemoteIpHeaderValue = new StringBuffer();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2011-01-05 23:05:42","endLine":649,"groupId":"4291","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/dcc1b3c48eddea63a3df5bd4a21f60a2907ffb.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            \n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":541,"status":"M"}],"commitId":"3541fc6110d302db0c1c0efb1d20eeebfc1447c1","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50453\nCorrectly handle multiple X-Forwarded-For headers\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1055482 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-01-05 23:05:42","modifiedFileCount":"4","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-01-07 00:05:41","codes":[{"authorDate":"2011-01-07 00:05:41","commitOrder":10,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuffer concatRemoteIpHeaderValue = new StringBuffer();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","date":"2011-01-07 00:05:41","endLine":780,"groupId":"990","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d5/6e62465662b620738616c7a046edb9f0d18f7f.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (matchesOne(request.getRemoteAddr(), internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuffer concatRemoteIpHeaderValue = new StringBuffer();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":686,"status":"M"},{"authorDate":"2011-01-07 00:05:41","commitOrder":10,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuffer concatRemoteIpHeaderValue = new StringBuffer();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2011-01-07 00:05:41","endLine":618,"groupId":"4291","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0b/dfa7ef1014d3e497639b1af7bb07c9f6ab8f73.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (matchesOne(originalRemoteAddr, internalProxies)) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuffer concatRemoteIpHeaderValue = new StringBuffer();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (matchesOne(currentRemoteIp, internalProxies)) {\n                    \r\n                } else if (matchesOne(currentRemoteIp, trustedProxies)) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":508,"status":"M"}],"commitId":"0e846b01afa959e3479d0d1796f95af3995c5dca","commitMessage":"@@@Switch all configuration options that use regular expression to require a single regular expression (using java.util.regex<) rather than a list of comma-separated or semi-colon-separated expressions.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1055923 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-01-07 00:05:41","modifiedFileCount":"9","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-01-09 01:02:10","codes":[{"authorDate":"2011-01-09 01:02:10","commitOrder":11,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","date":"2011-01-09 01:02:10","endLine":780,"groupId":"990","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/59/d2e51bc49638a75fa4d9f8f71a9e0e6b08c769.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuffer concatRemoteIpHeaderValue = new StringBuffer();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":686,"status":"M"},{"authorDate":"2011-01-09 01:02:10","commitOrder":11,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2011-01-09 01:02:10","endLine":618,"groupId":"4291","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ac/676812331835de874a8896af5eb37968fb3f6e.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuffer concatRemoteIpHeaderValue = new StringBuffer();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":508,"status":"M"}],"commitId":"f67a08f57db0d55847ef99a379dcdfaa413e97e5","commitMessage":"@@@StringBuffer -> StringBuilder for consistency\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1056735 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-01-09 01:02:10","modifiedFileCount":"3","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-07 02:11:52","codes":[{"authorDate":"2011-01-09 01:02:10","commitOrder":12,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","date":"2011-01-09 01:02:10","endLine":780,"groupId":"990","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/59/d2e51bc49638a75fa4d9f8f71a9e0e6b08c769.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":686,"status":"N"},{"authorDate":"2011-02-07 02:11:52","commitOrder":12,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(\"org.apache.catalina.RemoteAddr\",\n                    request.getRemoteAddr());\n            request.setAttribute(\"org.apache.catalina.RemoteHost\",\n                    request.getRemoteHost());\n            request.setAttribute(\"org.apache.catalina.Protocol\",\n                    request.getProtocol());\n            request.setAttribute(\"org.apache.catalina.ServerPort\",\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2011-02-07 02:11:52","endLine":647,"groupId":"4291","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/7f/c138ba7ca03bb0258cc0cd1c841ea773730a5a.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":527,"status":"M"}],"commitId":"f1b7a515f49cf8e8ac77287a2e58375411970554","commitMessage":"@@@Initial attempt to fix RemoteIp issues observed with ASF Jira\nDocs.  filter and changelog commits to follow once it works\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1067718 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-02-07 02:11:52","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-07 02:46:42","codes":[{"authorDate":"2011-01-09 01:02:10","commitOrder":13,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","date":"2011-01-09 01:02:10","endLine":780,"groupId":"990","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/59/d2e51bc49638a75fa4d9f8f71a9e0e6b08c769.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":686,"status":"N"},{"authorDate":"2011-02-07 02:46:42","commitOrder":13,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2011-02-07 02:46:42","endLine":648,"groupId":"4291","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/a4615867ce44d4796a79554298481fb3e4f92f.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(\"org.apache.catalina.RemoteAddr\",\n                    request.getRemoteAddr());\n            request.setAttribute(\"org.apache.catalina.RemoteHost\",\n                    request.getRemoteHost());\n            request.setAttribute(\"org.apache.catalina.Protocol\",\n                    request.getProtocol());\n            request.setAttribute(\"org.apache.catalina.ServerPort\",\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":528,"status":"M"}],"commitId":"0dc6dbef18d8277037fa2023b76d9bb444622b32","commitMessage":"@@@Move attribute name definitions to AccessLog interface\nAccessLog implementations need to be aware of attributes since they aren't always set (e.g. if request is rejected early in the connector)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1067725 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-02-07 02:46:42","modifiedFileCount":"5","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-02-07 02:46:42","codes":[{"authorDate":"2011-02-07 03:08:13","commitOrder":14,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        request.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        request.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        request.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(request.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","date":"2011-02-07 03:08:13","endLine":820,"groupId":"990","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/da/2a1bed50271ceb84eaf2e665d09998f6943a3c.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":716,"status":"M"},{"authorDate":"2011-02-07 02:46:42","commitOrder":14,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2011-02-07 02:46:42","endLine":648,"groupId":"4291","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/a4615867ce44d4796a79554298481fb3e4f92f.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":528,"status":"N"}],"commitId":"98b583e5cfdd0250c3a7a24f85ce2963f9f8ca72","commitMessage":"@@@Tweak defaults. Document.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1067732 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-02-07 03:08:13","modifiedFileCount":"3","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-05-09 18:09:44","codes":[{"authorDate":"2011-02-07 03:08:13","commitOrder":15,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        request.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        request.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        request.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(request.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","date":"2011-02-07 03:08:13","endLine":820,"groupId":"990","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/da/2a1bed50271ceb84eaf2e665d09998f6943a3c.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        request.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        request.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        request.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(request.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":716,"status":"N"},{"authorDate":"2011-05-09 18:09:44","commitOrder":15,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    setPorts(request, httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2011-05-09 18:09:44","endLine":693,"groupId":"9693","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/bb/b619541d25723f81a100e2ec4858af2da6e962.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    request.setServerPort(httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    request.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"M"}],"commitId":"b633755935a2f39b8678c8458ac65f2f00d64c06","commitMessage":"@@@Add additional configuration options to the RemoteIpValve to control ports.\nThese are required by my TCK test environment since I have multiple connectors (with different ports) configured all using the one Valve.\nIf this has the desired effect.  I'll port the changes to the RemoteIpFilter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1100940 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-05-09 18:09:44","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-05-09 18:09:44","codes":[{"authorDate":"2011-05-09 20:32:49","commitOrder":16,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        request.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        request.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        request.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(request.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","date":"2011-05-09 20:32:49","endLine":840,"groupId":"5914","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/34/278990b351c17ac9be5d76be8b69875026a411.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        \n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            \n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n                \n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n                \n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    xRequest.setServerPort(httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    xRequest.setServerPort(httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        request.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        request.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        request.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(request.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n        \n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":736,"status":"M"},{"authorDate":"2011-05-09 18:09:44","commitOrder":16,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    setPorts(request, httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2011-05-09 18:09:44","endLine":693,"groupId":"9693","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/bb/b619541d25723f81a100e2ec4858af2da6e962.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    setPorts(request, httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"N"}],"commitId":"f053a71761c6882b587788d6f08781a778e632da","commitMessage":"@@@Port RemoteIpValve changes to RemoteIpFilter\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1100988 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-05-09 20:32:49","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-05-09 18:09:44","codes":[{"authorDate":"2012-07-14 04:51:19","commitOrder":17,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        request.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        request.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        request.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(request.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2012-07-14 04:51:19","endLine":840,"groupId":"5914","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f2/23390469e77f3ba2cda4f8e238ae4e3e72d9a4.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        request.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        request.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        request.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(request.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":736,"status":"M"},{"authorDate":"2011-05-09 18:09:44","commitOrder":17,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    setPorts(request, httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2011-05-09 18:09:44","endLine":693,"groupId":"9693","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/bb/b619541d25723f81a100e2ec4858af2da6e962.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        \n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n            \n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n                \n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n                \n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n            \n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    \n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    \n                    setPorts(request, httpServerPort);\n                }\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            \n            request.setSecure(originalSecure);\n            \n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            \n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"N"}],"commitId":"339177dd5b45577231f573c7474d4592aee62fa7","commitMessage":"@@@Code clean-up for o.a.catalina.filters\n - Add final prompted by UCDetector\n - Java 7 use of <>\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1361394 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-07-14 04:51:19","modifiedFileCount":"3","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-08-10 04:05:31","codes":[{"authorDate":"2012-07-14 04:51:19","commitOrder":18,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        request.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        request.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        request.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(request.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2012-07-14 04:51:19","endLine":840,"groupId":"5914","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f2/23390469e77f3ba2cda4f8e238ae4e3e72d9a4.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        request.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        request.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        request.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(request.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":736,"status":"N"},{"authorDate":"2012-08-10 04:05:31","commitOrder":18,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2012-08-10 04:05:31","endLine":679,"groupId":"2758","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/54/66f51546a438afd9f109976316914d13c06a44.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"M"}],"commitId":"3a5392518b41a0b38424f2217ca5b9540d820cec","commitMessage":"@@@Code clean-up for o.a.catalina.valves\n - Add final prompted by UCDetector\n - Java 7 use of <>\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1371422 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-08-10 04:05:31","modifiedFileCount":"5","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-08-10 04:05:31","codes":[{"authorDate":"2013-01-09 04:24:10","commitOrder":19,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2013-01-09 04:24:10","endLine":840,"groupId":"5914","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/94/8d968ea2cbabfa2426e3305b6bfe20e623b3da.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        request.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        request.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        request.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(request.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":736,"status":"M"},{"authorDate":"2012-08-10 04:05:31","commitOrder":19,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2012-08-10 04:05:31","endLine":679,"groupId":"2758","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/54/66f51546a438afd9f109976316914d13c06a44.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"N"}],"commitId":"95e60568c62d6b70788ea2c1f76b9284825875d7","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54377\nCorrectly set request attributes for AccessLog in RemoteIpFilter\nPatch by Violeta Georgieva\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1430487 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-01-09 04:24:10","modifiedFileCount":"3","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2014-01-20 22:02:45","codes":[{"authorDate":"2014-01-20 22:02:45","commitOrder":20,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2014-01-20 22:02:45","endLine":849,"groupId":"5914","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ab/83d0f0fba735139f1d7a8662d05a9d00c4472e.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":743,"status":"M"},{"authorDate":"2014-01-20 22:02:45","commitOrder":20,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2014-01-20 22:02:45","endLine":688,"groupId":"2758","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/5d/67938d20a2474aa875b8c11ae62d165e326042.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"M"}],"commitId":"8c2f409a9eaaec7e89f47eeb2368ea5a6ac6cb17","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55956\nMake the forwarded remote IP available on the Manager status page\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1559697 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-20 22:02:45","modifiedFileCount":"6","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2014-01-20 22:02:45","codes":[{"authorDate":"2015-04-28 04:13:05","commitOrder":21,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            HttpServletResponse xResponse;\n            if (xRequest.getScheme() != request.getScheme() ||\n                    xRequest.getServerPort() != request.getServerPort()) {\n                xResponse = new XForwardedResponse(response, xRequest.getScheme(), xRequest.getServerPort());\n            } else {\n                xResponse = response;\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, xResponse);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2015-04-28 04:13:05","endLine":900,"groupId":"0","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/8e/5fb0430541d78f354995f722ff04cf932eb2fe.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":786,"status":"M"},{"authorDate":"2014-01-20 22:02:45","commitOrder":21,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n        }\n    }\n","date":"2014-01-20 22:02:45","endLine":688,"groupId":"2758","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/5d/67938d20a2474aa875b8c11ae62d165e326042.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"N"}],"commitId":"4921e131879a1aa4a77db51ae2ac3a226176f619","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57856\nEnsure that any scheme/port changes implemented by the RemoteIpFilter also affect HttpServletResponse.sendRedirect()\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1676364 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-28 04:13:05","modifiedFileCount":"3","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-05-18 21:55:12","codes":[{"authorDate":"2015-04-28 04:13:05","commitOrder":22,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            HttpServletResponse xResponse;\n            if (xRequest.getScheme() != request.getScheme() ||\n                    xRequest.getServerPort() != request.getServerPort()) {\n                xResponse = new XForwardedResponse(response, xRequest.getScheme(), xRequest.getServerPort());\n            } else {\n                xResponse = response;\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, xResponse);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2015-04-28 04:13:05","endLine":900,"groupId":"0","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/8e/5fb0430541d78f354995f722ff04cf932eb2fe.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            HttpServletResponse xResponse;\n            if (xRequest.getScheme() != request.getScheme() ||\n                    xRequest.getServerPort() != request.getServerPort()) {\n                xResponse = new XForwardedResponse(response, xRequest.getScheme(), xRequest.getServerPort());\n            } else {\n                xResponse = response;\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, xResponse);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":786,"status":"N"},{"authorDate":"2015-05-18 21:55:12","commitOrder":22,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","date":"2015-05-18 21:55:12","endLine":701,"groupId":"2758","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/67/f737df524740f36b445ec8fd6445ad2e2a65a2.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":564,"status":"M"}],"commitId":"9ddbf1c5cd104197ad2013a8a01bf69bbcd87e8c","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57926\nRestore the original X-Forwarded-By and X-Forwarded-For headers after processing along with the other original values.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1680034 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-05-18 21:55:12","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-05-18 21:55:12","codes":[{"authorDate":"2015-06-25 02:44:18","commitOrder":23,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            HttpServletResponse xResponse;\n            if (!xRequest.getScheme().equals(request.getScheme()) ||\n                    xRequest.getServerPort() != request.getServerPort()) {\n                xResponse = new XForwardedResponse(response, xRequest.getScheme(), xRequest.getServerPort());\n            } else {\n                xResponse = response;\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, xResponse);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2015-06-25 02:44:18","endLine":900,"groupId":"5259","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b8/88a915bf0cba1dd66fb60ec3a3b69b2fc07c9f.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            HttpServletResponse xResponse;\n            if (xRequest.getScheme() != request.getScheme() ||\n                    xRequest.getServerPort() != request.getServerPort()) {\n                xResponse = new XForwardedResponse(response, xRequest.getScheme(), xRequest.getServerPort());\n            } else {\n                xResponse = response;\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, xResponse);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":786,"status":"M"},{"authorDate":"2015-05-18 21:55:12","commitOrder":23,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","date":"2015-05-18 21:55:12","endLine":701,"groupId":"2758","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/67/f737df524740f36b445ec8fd6445ad2e2a65a2.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":564,"status":"N"}],"commitId":"0cc544aa73c4a612c3fde60c858eb6cdba8273ed","commitMessage":"@@@Fix FindBugs warning. Don't use != with Strings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1687340 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-25 02:44:18","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-05-18 21:55:12","codes":[{"authorDate":"2015-06-25 16:21:01","commitOrder":24,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            HttpServletResponse xResponse;\n            if (xRequest.getScheme() != null &&\n                    (!xRequest.getScheme().equals(request.getScheme()) ||\n                    xRequest.getServerPort() != request.getServerPort())) {\n                xResponse = new XForwardedResponse(response, xRequest.getScheme(), xRequest.getServerPort());\n            } else {\n                xResponse = response;\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, xResponse);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2015-06-25 16:21:01","endLine":901,"groupId":"5259","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/cb/4e8fdb3a2e6393ddc0e43064c2dfa77fba614f.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            HttpServletResponse xResponse;\n            if (!xRequest.getScheme().equals(request.getScheme()) ||\n                    xRequest.getServerPort() != request.getServerPort()) {\n                xResponse = new XForwardedResponse(response, xRequest.getScheme(), xRequest.getServerPort());\n            } else {\n                xResponse = response;\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, xResponse);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":786,"status":"M"},{"authorDate":"2015-05-18 21:55:12","commitOrder":24,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","date":"2015-05-18 21:55:12","endLine":701,"groupId":"2758","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/67/f737df524740f36b445ec8fd6445ad2e2a65a2.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":564,"status":"N"}],"commitId":"e0c4e8ba55b18172258b52abf25b8015cb961dd5","commitMessage":"@@@Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1687434 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-25 16:21:01","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-05-18 21:55:12","codes":[{"authorDate":"2015-12-01 00:25:19","commitOrder":25,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2015-12-01 00:25:19","endLine":870,"groupId":"5914","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/48/d4b2159a0b68838d9d404c1fd5cbd4ffbe6508.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            HttpServletResponse xResponse;\n            if (xRequest.getScheme() != null &&\n                    (!xRequest.getScheme().equals(request.getScheme()) ||\n                    xRequest.getServerPort() != request.getServerPort())) {\n                xResponse = new XForwardedResponse(response, xRequest.getScheme(), xRequest.getServerPort());\n            } else {\n                xResponse = response;\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, xResponse);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":764,"status":"M"},{"authorDate":"2015-05-18 21:55:12","commitOrder":25,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","date":"2015-05-18 21:55:12","endLine":701,"groupId":"2758","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/67/f737df524740f36b445ec8fd6445ad2e2a65a2.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":564,"status":"N"}],"commitId":"39fbc5ed2de5375674f1ebaec463b0744b7f7a95","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58655\nFix an IllegalStateException when calling HttpServletResponse.sendRedirect() with the RemoteIpFilter. This was caused by trying to correctly generate the absolute URI for the redirect. With the fix for 56917.  redirects may now be relative making the sendRedirect() implementation for the RemoteIpFilter much simpler. This also addresses issues where the redirect may not have behaved as expected when redirecting from http to https to from https to http.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1717290 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-01 00:25:19","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2018-06-05 02:57:59","codes":[{"authorDate":"2018-06-05 02:57:59","commitOrder":26,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2018-06-05 02:57:59","endLine":875,"groupId":"5914","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/df/329b3e351b2de4e5446c0d481dbe98dddcfc07.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":763,"status":"M"},{"authorDate":"2018-06-05 02:57:59","commitOrder":26,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","date":"2018-06-05 02:57:59","endLine":710,"groupId":"2758","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f9/ea0e577ed0d6dba86d35d853d87fe538de173b.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n\n        if (internalProxies !=null &&\n                internalProxies.matcher(originalRemoteAddr).matches()) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":568,"status":"M"}],"commitId":"1286f76368716c26770c2a15970806fdabe8512f","commitMessage":"@@@Correctly handle the case when the request passes through one or more trustedProxies but no internalProxies.\nBased on a patch by zhanhb\nThis closes #45\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1832882 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-06-05 02:57:59","modifiedFileCount":"4","status":"M","submitter":"Mark Thomas"},{"authorTime":"2018-12-06 22:30:51","codes":[{"authorDate":"2018-06-05 02:57:59","commitOrder":27,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2018-06-05 02:57:59","endLine":875,"groupId":"5914","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/df/329b3e351b2de4e5446c0d481dbe98dddcfc07.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":763,"status":"N"},{"authorDate":"2018-12-06 22:30:51","commitOrder":27,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","date":"2018-12-06 22:30:51","endLine":710,"groupId":"958","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/79/8c15be685526bc3adec360a0ec8c57c3ac2708.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":568,"status":"M"}],"commitId":"c935bd5a1055fd1996c0c82daf53f2017a0c2a79","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=62978\nUpdate the RemoteIpValve to handle multiple values in the x-forwarded-proto header.\nPatch provided by Tom Groot.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1848320 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-12-06 22:30:51","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2018-12-06 22:33:50","codes":[{"authorDate":"2018-06-05 02:57:59","commitOrder":28,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2018-06-05 02:57:59","endLine":875,"groupId":"5914","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/df/329b3e351b2de4e5446c0d481dbe98dddcfc07.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":763,"status":"N"},{"authorDate":"2018-12-06 22:33:50","commitOrder":28,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.setServerPort(originalServerPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","date":"2018-12-06 22:33:50","endLine":700,"groupId":"958","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/55/7f1a5744ac459aa195f8848525d66116fb5f07.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                \r\n                \r\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    \r\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n\n            request.setSecure(originalSecure);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            \r\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n\n            request.setServerPort(originalServerPort);\n\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":568,"status":"M"}],"commitId":"3b86f09891c0f91ab6fc9f06cb8bf07f0dc684c5","commitMessage":"@@@Remove out of date comments\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1848321 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-12-06 22:33:50","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2018-12-06 22:33:50","codes":[{"authorDate":"2018-12-06 22:39:29","commitOrder":29,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2018-12-06 22:39:29","endLine":852,"groupId":"15393","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/37/fd82457f9cfd0deb4565d9aba7e70c19b3ad30.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":739,"status":"M"},{"authorDate":"2018-12-06 22:33:50","commitOrder":29,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.setServerPort(originalServerPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","date":"2018-12-06 22:33:50","endLine":700,"groupId":"958","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/55/7f1a5744ac459aa195f8848525d66116fb5f07.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.setServerPort(originalServerPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":568,"status":"N"}],"commitId":"01695d680dc9e2ac31abc05ba1eb11e591eb38bf","commitMessage":"@@@Update the RemoteIpFilter to handle multiple values in the x-forwarded-proto header.\nBased on a patch provided by Tom Groot.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1848322 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-12-06 22:39:29","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2019-07-09 20:59:09","codes":[{"authorDate":"2019-07-09 20:59:09","commitOrder":30,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2019-07-10 04:07:30","endLine":858,"groupId":"0","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1a/fe033d024ed66df98af44cce619a41807e82dc.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":743,"status":"M"},{"authorDate":"2019-07-09 20:59:09","commitOrder":30,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.setServerPort(originalServerPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","date":"2019-07-10 04:07:30","endLine":704,"groupId":"958","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/cd/08cc7f1e39f8eb242ed982da15f3819ff20842.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.setServerPort(originalServerPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"M"}],"commitId":"6c891b6cec5695cd9afb49ce9d0baa37f6cad1f1","commitMessage":"@@@BZ 63556: Mark request as forwarded in RemoteIpValve and RemoteIpFilter\n","date":"2019-07-10 04:07:30","modifiedFileCount":"5","status":"M","submitter":"Michael Osipov"},{"authorTime":"2019-07-31 04:42:37","codes":[{"authorDate":"2019-07-31 04:42:37","commitOrder":31,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpFilter.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        xRequest.setServerName(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            xRequest.setLocalName(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + request.getRemoteAddr() +\n                        \"], originalRemoteHost=[\" + request.getRemoteHost() + \"], originalSecure=[\" + request.isSecure() +\n                        \"], originalScheme=[\" + request.getScheme() + \"], originalServerName=[\" + request.getServerName() +\n                        \"], originalServerPort=[\" + request.getServerPort() +\n                        \"] will be seen as newRemoteAddr=[\" + xRequest.getRemoteAddr() +\n                        \"], newRemoteHost=[\" + xRequest.getRemoteHost() + \"], newSecure=[\" + xRequest.isSecure() +\n                        \"], newScheme=[\" + xRequest.getScheme() + \"], newServerName=[\" + xRequest.getServerName() +\n                        \"], newServerPort=[\" + xRequest.getServerPort() + \"]\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                        xRequest.getServerName());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2019-07-31 04:42:37","endLine":913,"groupId":"4178","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/46/64a85b1df2b95254ea682b001473cb8862fc93.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":776,"status":"M"},{"authorDate":"2019-07-31 04:42:37","commitOrder":31,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final String originalServerName = request.getServerName();\n        final String originalLocalName = request.getLocalName();\n        final int originalServerPort = request.getServerPort();\n        final int originalLocalPort = request.getLocalPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpValve.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        request.getCoyoteRequest().serverName().setString(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            request.getCoyoteRequest().localName().setString(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + originalRemoteAddr +\n                          \"], originalRemoteHost=[\" + originalRemoteHost + \"], originalSecure=[\" + originalSecure +\n                          \"], originalScheme=[\" + originalScheme + \"], originalServerName=[\" + originalServerName +\n                          \"], originalServerPort=[\" + originalServerPort +\n                          \"] will be seen as newRemoteAddr=[\" + request.getRemoteAddr() +\n                          \"], newRemoteHost=[\" + request.getRemoteHost() + \"], newSecure=[\" + request.isSecure() +\n                          \"], newScheme=[\" + request.getScheme() + \"], newServerName=[\" + request.getServerName() +\n                          \"], newServerPort=[\" + request.getServerPort() + \"]\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                    Integer.valueOf(request.getServerName()));\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.getCoyoteRequest().serverName().setString(originalServerName);\n            request.getCoyoteRequest().localName().setString(originalLocalName);\n            request.setServerPort(originalServerPort);\n            request.setLocalPort(originalLocalPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","date":"2019-07-31 04:42:37","endLine":771,"groupId":"6318","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/89/aa4b4fa3a2f4b8d447eb237c2e1eb3b5be32b0.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final int originalServerPort = request.getServerPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + originalRemoteAddr\n                          + \"', originalRemoteHost='\" + originalRemoteHost + \"', originalSecure='\" + originalSecure + \"', originalScheme='\"\n                          + originalScheme + \"' will be seen as newRemoteAddr='\" + request.getRemoteAddr() + \"', newRemoteHost='\"\n                          + request.getRemoteHost() + \"', newScheme='\" + request.getScheme() + \"', newSecure='\" + request.isSecure() + \"'\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.setServerPort(originalServerPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"M"}],"commitId":"67c3af97230135af8f6f7566c77a79a69722a713","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57665\n\nImplement X-Forwarded-Host support for RemoteIpFilter and RemoteIpValve","date":"2019-07-31 04:42:37","modifiedFileCount":"6","status":"M","submitter":"Mark Thomas"},{"authorTime":"2019-07-31 18:43:15","codes":[{"authorDate":"2019-07-31 04:42:37","commitOrder":32,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpFilter.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        xRequest.setServerName(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            xRequest.setLocalName(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + request.getRemoteAddr() +\n                        \"], originalRemoteHost=[\" + request.getRemoteHost() + \"], originalSecure=[\" + request.isSecure() +\n                        \"], originalScheme=[\" + request.getScheme() + \"], originalServerName=[\" + request.getServerName() +\n                        \"], originalServerPort=[\" + request.getServerPort() +\n                        \"] will be seen as newRemoteAddr=[\" + xRequest.getRemoteAddr() +\n                        \"], newRemoteHost=[\" + xRequest.getRemoteHost() + \"], newSecure=[\" + xRequest.isSecure() +\n                        \"], newScheme=[\" + xRequest.getScheme() + \"], newServerName=[\" + xRequest.getServerName() +\n                        \"], newServerPort=[\" + xRequest.getServerPort() + \"]\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                        xRequest.getServerName());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2019-07-31 04:42:37","endLine":913,"groupId":"4178","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/46/64a85b1df2b95254ea682b001473cb8862fc93.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpFilter.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        xRequest.setServerName(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            xRequest.setLocalName(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + request.getRemoteAddr() +\n                        \"], originalRemoteHost=[\" + request.getRemoteHost() + \"], originalSecure=[\" + request.isSecure() +\n                        \"], originalScheme=[\" + request.getScheme() + \"], originalServerName=[\" + request.getServerName() +\n                        \"], originalServerPort=[\" + request.getServerPort() +\n                        \"] will be seen as newRemoteAddr=[\" + xRequest.getRemoteAddr() +\n                        \"], newRemoteHost=[\" + xRequest.getRemoteHost() + \"], newSecure=[\" + xRequest.isSecure() +\n                        \"], newScheme=[\" + xRequest.getScheme() + \"], newServerName=[\" + xRequest.getServerName() +\n                        \"], newServerPort=[\" + xRequest.getServerPort() + \"]\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                        xRequest.getServerName());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":776,"status":"N"},{"authorDate":"2019-07-31 18:43:15","commitOrder":32,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final String originalServerName = request.getServerName();\n        final String originalLocalName = request.getLocalName();\n        final int originalServerPort = request.getServerPort();\n        final int originalLocalPort = request.getLocalPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpValve.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        request.getCoyoteRequest().serverName().setString(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            request.getCoyoteRequest().localName().setString(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + originalRemoteAddr +\n                          \"], originalRemoteHost=[\" + originalRemoteHost + \"], originalSecure=[\" + originalSecure +\n                          \"], originalScheme=[\" + originalScheme + \"], originalServerName=[\" + originalServerName +\n                          \"], originalServerPort=[\" + originalServerPort +\n                          \"] will be seen as newRemoteAddr=[\" + request.getRemoteAddr() +\n                          \"], newRemoteHost=[\" + request.getRemoteHost() + \"], newSecure=[\" + request.isSecure() +\n                          \"], newScheme=[\" + request.getScheme() + \"], newServerName=[\" + request.getServerName() +\n                          \"], newServerPort=[\" + request.getServerPort() + \"]\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                    request.getServerName());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.getCoyoteRequest().serverName().setString(originalServerName);\n            request.getCoyoteRequest().localName().setString(originalLocalName);\n            request.setServerPort(originalServerPort);\n            request.setLocalPort(originalLocalPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","date":"2019-07-31 18:43:15","endLine":771,"groupId":"6318","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ae/5bacc16df6f9ccfc7fcccbfbb9326e8fd274db.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final String originalServerName = request.getServerName();\n        final String originalLocalName = request.getLocalName();\n        final int originalServerPort = request.getServerPort();\n        final int originalLocalPort = request.getLocalPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpValve.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        request.getCoyoteRequest().serverName().setString(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            request.getCoyoteRequest().localName().setString(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + originalRemoteAddr +\n                          \"], originalRemoteHost=[\" + originalRemoteHost + \"], originalSecure=[\" + originalSecure +\n                          \"], originalScheme=[\" + originalScheme + \"], originalServerName=[\" + originalServerName +\n                          \"], originalServerPort=[\" + originalServerPort +\n                          \"] will be seen as newRemoteAddr=[\" + request.getRemoteAddr() +\n                          \"], newRemoteHost=[\" + request.getRemoteHost() + \"], newSecure=[\" + request.isSecure() +\n                          \"], newScheme=[\" + request.getScheme() + \"], newServerName=[\" + request.getServerName() +\n                          \"], newServerPort=[\" + request.getServerPort() + \"]\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                    Integer.valueOf(request.getServerName()));\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.getCoyoteRequest().serverName().setString(originalServerName);\n            request.getCoyoteRequest().localName().setString(originalLocalName);\n            request.setServerPort(originalServerPort);\n            request.setLocalPort(originalLocalPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"M"}],"commitId":"645034e2a24e33897fb48ae667895cadbf124092","commitMessage":"@@@Fix copy/paste error","date":"2019-07-31 18:43:15","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2020-11-27 02:57:25","codes":[{"authorDate":"2020-11-27 02:57:25","commitOrder":33,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                if (getEnableLookups()) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    try {\n                        InetAddress inetAddress = InetAddress.getByName(remoteIp);\n                        \r\n                        xRequest.setRemoteHost(inetAddress.getCanonicalHostName());\n                    } catch (UnknownHostException e) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidRemoteAddress\", remoteIp), e);\n                        xRequest.setRemoteHost(remoteIp);\n                    }\n                } else {\n                    xRequest.setRemoteHost(remoteIp);\n                }\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpFilter.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        xRequest.setServerName(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            xRequest.setLocalName(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + request.getRemoteAddr() +\n                        \"], originalRemoteHost=[\" + request.getRemoteHost() + \"], originalSecure=[\" + request.isSecure() +\n                        \"], originalScheme=[\" + request.getScheme() + \"], originalServerName=[\" + request.getServerName() +\n                        \"], originalServerPort=[\" + request.getServerPort() +\n                        \"] will be seen as newRemoteAddr=[\" + xRequest.getRemoteAddr() +\n                        \"], newRemoteHost=[\" + xRequest.getRemoteHost() + \"], newSecure=[\" + xRequest.isSecure() +\n                        \"], newScheme=[\" + xRequest.getScheme() + \"], newServerName=[\" + xRequest.getServerName() +\n                        \"], newServerPort=[\" + xRequest.getServerPort() + \"]\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                        xRequest.getServerName());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2020-11-27 02:57:25","endLine":941,"groupId":"10811","id":63,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e2/0faee98dffe9d2b10442ab2c7e2d3646b6f9a6.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpFilter.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        xRequest.setServerName(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            xRequest.setLocalName(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + request.getRemoteAddr() +\n                        \"], originalRemoteHost=[\" + request.getRemoteHost() + \"], originalSecure=[\" + request.isSecure() +\n                        \"], originalScheme=[\" + request.getScheme() + \"], originalServerName=[\" + request.getServerName() +\n                        \"], originalServerPort=[\" + request.getServerPort() +\n                        \"] will be seen as newRemoteAddr=[\" + xRequest.getRemoteAddr() +\n                        \"], newRemoteHost=[\" + xRequest.getRemoteHost() + \"], newSecure=[\" + xRequest.isSecure() +\n                        \"], newScheme=[\" + xRequest.getScheme() + \"], newServerName=[\" + xRequest.getServerName() +\n                        \"], newServerPort=[\" + xRequest.getServerPort() + \"]\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                        xRequest.getServerName());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":789,"status":"M"},{"authorDate":"2020-11-27 02:57:25","commitOrder":33,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final String originalServerName = request.getServerName();\n        final String originalLocalName = request.getLocalName();\n        final int originalServerPort = request.getServerPort();\n        final int originalLocalPort = request.getLocalPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                if (request.getConnector().getEnableLookups()) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    try {\n                        InetAddress inetAddress = InetAddress.getByName(remoteIp);\n                        \r\n                        request.setRemoteHost(inetAddress.getCanonicalHostName());\n                    } catch (UnknownHostException e) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidRemoteAddress\", remoteIp), e);\n                        request.setRemoteHost(remoteIp);\n                    }\n                } else {\n                    request.setRemoteHost(remoteIp);\n                }\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpValve.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        request.getCoyoteRequest().serverName().setString(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            request.getCoyoteRequest().localName().setString(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + originalRemoteAddr +\n                          \"], originalRemoteHost=[\" + originalRemoteHost + \"], originalSecure=[\" + originalSecure +\n                          \"], originalScheme=[\" + originalScheme + \"], originalServerName=[\" + originalServerName +\n                          \"], originalServerPort=[\" + originalServerPort +\n                          \"] will be seen as newRemoteAddr=[\" + request.getRemoteAddr() +\n                          \"], newRemoteHost=[\" + request.getRemoteHost() + \"], newSecure=[\" + request.isSecure() +\n                          \"], newScheme=[\" + request.getScheme() + \"], newServerName=[\" + request.getServerName() +\n                          \"], newServerPort=[\" + request.getServerPort() + \"]\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                    request.getServerName());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.getCoyoteRequest().serverName().setString(originalServerName);\n            request.getCoyoteRequest().localName().setString(originalLocalName);\n            request.setServerPort(originalServerPort);\n            request.setLocalPort(originalLocalPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","date":"2020-11-27 02:57:25","endLine":788,"groupId":"6318","id":64,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d9/a52b15acfd989bc65e3b024322259e012f0b06.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final String originalServerName = request.getServerName();\n        final String originalLocalName = request.getLocalName();\n        final int originalServerPort = request.getServerPort();\n        final int originalLocalPort = request.getLocalPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                request.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpValve.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        request.getCoyoteRequest().serverName().setString(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            request.getCoyoteRequest().localName().setString(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + originalRemoteAddr +\n                          \"], originalRemoteHost=[\" + originalRemoteHost + \"], originalSecure=[\" + originalSecure +\n                          \"], originalScheme=[\" + originalScheme + \"], originalServerName=[\" + originalServerName +\n                          \"], originalServerPort=[\" + originalServerPort +\n                          \"] will be seen as newRemoteAddr=[\" + request.getRemoteAddr() +\n                          \"], newRemoteHost=[\" + request.getRemoteHost() + \"], newSecure=[\" + request.isSecure() +\n                          \"], newScheme=[\" + request.getScheme() + \"], newServerName=[\" + request.getServerName() +\n                          \"], newServerPort=[\" + request.getServerPort() + \"]\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                    request.getServerName());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.getCoyoteRequest().serverName().setString(originalServerName);\n            request.getCoyoteRequest().localName().setString(originalLocalName);\n            request.setServerPort(originalServerPort);\n            request.setLocalPort(originalLocalPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"M"}],"commitId":"479a6a932181ee76d316dfec3bfeeaf39c0a2a6d","commitMessage":"@@@Fix BZ 56181 - return correct remoteHost with RemoteIP[Valve|Filter]\n\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=56181","date":"2020-11-27 02:57:25","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2021-05-20 22:13:34","codes":[{"authorDate":"2020-11-27 02:57:25","commitOrder":34,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                if (getEnableLookups()) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    try {\n                        InetAddress inetAddress = InetAddress.getByName(remoteIp);\n                        \r\n                        xRequest.setRemoteHost(inetAddress.getCanonicalHostName());\n                    } catch (UnknownHostException e) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidRemoteAddress\", remoteIp), e);\n                        xRequest.setRemoteHost(remoteIp);\n                    }\n                } else {\n                    xRequest.setRemoteHost(remoteIp);\n                }\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpFilter.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        xRequest.setServerName(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            xRequest.setLocalName(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + request.getRemoteAddr() +\n                        \"], originalRemoteHost=[\" + request.getRemoteHost() + \"], originalSecure=[\" + request.isSecure() +\n                        \"], originalScheme=[\" + request.getScheme() + \"], originalServerName=[\" + request.getServerName() +\n                        \"], originalServerPort=[\" + request.getServerPort() +\n                        \"] will be seen as newRemoteAddr=[\" + xRequest.getRemoteAddr() +\n                        \"], newRemoteHost=[\" + xRequest.getRemoteHost() + \"], newSecure=[\" + xRequest.isSecure() +\n                        \"], newScheme=[\" + xRequest.getScheme() + \"], newServerName=[\" + xRequest.getServerName() +\n                        \"], newServerPort=[\" + xRequest.getServerPort() + \"]\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                        xRequest.getServerName());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2020-11-27 02:57:25","endLine":941,"groupId":"10811","id":65,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e2/0faee98dffe9d2b10442ab2c7e2d3646b6f9a6.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                if (getEnableLookups()) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    try {\n                        InetAddress inetAddress = InetAddress.getByName(remoteIp);\n                        \r\n                        xRequest.setRemoteHost(inetAddress.getCanonicalHostName());\n                    } catch (UnknownHostException e) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidRemoteAddress\", remoteIp), e);\n                        xRequest.setRemoteHost(remoteIp);\n                    }\n                } else {\n                    xRequest.setRemoteHost(remoteIp);\n                }\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpFilter.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        xRequest.setServerName(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            xRequest.setLocalName(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + request.getRemoteAddr() +\n                        \"], originalRemoteHost=[\" + request.getRemoteHost() + \"], originalSecure=[\" + request.isSecure() +\n                        \"], originalScheme=[\" + request.getScheme() + \"], originalServerName=[\" + request.getServerName() +\n                        \"], originalServerPort=[\" + request.getServerPort() +\n                        \"] will be seen as newRemoteAddr=[\" + xRequest.getRemoteAddr() +\n                        \"], newRemoteHost=[\" + xRequest.getRemoteHost() + \"], newSecure=[\" + xRequest.isSecure() +\n                        \"], newScheme=[\" + xRequest.getScheme() + \"], newServerName=[\" + xRequest.getServerName() +\n                        \"], newServerPort=[\" + xRequest.getServerPort() + \"]\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                        xRequest.getServerName());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":789,"status":"N"},{"authorDate":"2021-05-20 22:13:34","commitOrder":34,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final String originalServerName = request.getServerName();\n        final String originalLocalName = isChangeLocalName() ? request.getLocalName() : null;\n        final int originalServerPort = request.getServerPort();\n        final int originalLocalPort = request.getLocalPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                if (request.getConnector().getEnableLookups()) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    try {\n                        InetAddress inetAddress = InetAddress.getByName(remoteIp);\n                        \r\n                        request.setRemoteHost(inetAddress.getCanonicalHostName());\n                    } catch (UnknownHostException e) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidRemoteAddress\", remoteIp), e);\n                        request.setRemoteHost(remoteIp);\n                    }\n                } else {\n                    request.setRemoteHost(remoteIp);\n                }\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpValve.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        request.getCoyoteRequest().serverName().setString(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            request.getCoyoteRequest().localName().setString(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + originalRemoteAddr +\n                          \"], originalRemoteHost=[\" + originalRemoteHost + \"], originalSecure=[\" + originalSecure +\n                          \"], originalScheme=[\" + originalScheme + \"], originalServerName=[\" + originalServerName +\n                          \"], originalServerPort=[\" + originalServerPort +\n                          \"] will be seen as newRemoteAddr=[\" + request.getRemoteAddr() +\n                          \"], newRemoteHost=[\" + request.getRemoteHost() + \"], newSecure=[\" + request.isSecure() +\n                          \"], newScheme=[\" + request.getScheme() + \"], newServerName=[\" + request.getServerName() +\n                          \"], newServerPort=[\" + request.getServerPort() + \"]\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                    request.getServerName());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.getCoyoteRequest().serverName().setString(originalServerName);\n            if (isChangeLocalName()) {\n                request.getCoyoteRequest().localName().setString(originalLocalName);\n            }\n            request.setServerPort(originalServerPort);\n            request.setLocalPort(originalLocalPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","date":"2021-05-20 22:13:34","endLine":790,"groupId":"6318","id":66,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/61/dcbfba9a1d8186f54d5d27986f7dde40816fdc.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final String originalServerName = request.getServerName();\n        final String originalLocalName = request.getLocalName();\n        final int originalServerPort = request.getServerPort();\n        final int originalLocalPort = request.getLocalPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                if (request.getConnector().getEnableLookups()) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    try {\n                        InetAddress inetAddress = InetAddress.getByName(remoteIp);\n                        \r\n                        request.setRemoteHost(inetAddress.getCanonicalHostName());\n                    } catch (UnknownHostException e) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidRemoteAddress\", remoteIp), e);\n                        request.setRemoteHost(remoteIp);\n                    }\n                } else {\n                    request.setRemoteHost(remoteIp);\n                }\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpValve.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        request.getCoyoteRequest().serverName().setString(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            request.getCoyoteRequest().localName().setString(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + originalRemoteAddr +\n                          \"], originalRemoteHost=[\" + originalRemoteHost + \"], originalSecure=[\" + originalSecure +\n                          \"], originalScheme=[\" + originalScheme + \"], originalServerName=[\" + originalServerName +\n                          \"], originalServerPort=[\" + originalServerPort +\n                          \"] will be seen as newRemoteAddr=[\" + request.getRemoteAddr() +\n                          \"], newRemoteHost=[\" + request.getRemoteHost() + \"], newSecure=[\" + request.isSecure() +\n                          \"], newScheme=[\" + request.getScheme() + \"], newServerName=[\" + request.getServerName() +\n                          \"], newServerPort=[\" + request.getServerPort() + \"]\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                    request.getServerName());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.getCoyoteRequest().serverName().setString(originalServerName);\n            request.getCoyoteRequest().localName().setString(originalLocalName);\n            request.setServerPort(originalServerPort);\n            request.setLocalPort(originalLocalPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"M"}],"commitId":"a7511a76e41269b842a8721ad729f8e54a2a8c8b","commitMessage":"@@@Avoid using local host name when not needed\n\nBZ65301","date":"2021-05-20 22:13:34","modifiedFileCount":"1","status":"M","submitter":"remm"},{"authorTime":"2021-06-16 03:46:27","codes":[{"authorDate":"2020-11-27 02:57:25","commitOrder":35,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                if (getEnableLookups()) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    try {\n                        InetAddress inetAddress = InetAddress.getByName(remoteIp);\n                        \r\n                        xRequest.setRemoteHost(inetAddress.getCanonicalHostName());\n                    } catch (UnknownHostException e) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidRemoteAddress\", remoteIp), e);\n                        xRequest.setRemoteHost(remoteIp);\n                    }\n                } else {\n                    xRequest.setRemoteHost(remoteIp);\n                }\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpFilter.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        xRequest.setServerName(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            xRequest.setLocalName(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + request.getRemoteAddr() +\n                        \"], originalRemoteHost=[\" + request.getRemoteHost() + \"], originalSecure=[\" + request.isSecure() +\n                        \"], originalScheme=[\" + request.getScheme() + \"], originalServerName=[\" + request.getServerName() +\n                        \"], originalServerPort=[\" + request.getServerPort() +\n                        \"] will be seen as newRemoteAddr=[\" + xRequest.getRemoteAddr() +\n                        \"], newRemoteHost=[\" + xRequest.getRemoteHost() + \"], newSecure=[\" + xRequest.isSecure() +\n                        \"], newScheme=[\" + xRequest.getScheme() + \"], newServerName=[\" + xRequest.getServerName() +\n                        \"], newServerPort=[\" + xRequest.getServerPort() + \"]\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                        xRequest.getServerName());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2020-11-27 02:57:25","endLine":941,"groupId":"10811","id":67,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e2/0faee98dffe9d2b10442ab2c7e2d3646b6f9a6.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                if (getEnableLookups()) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    try {\n                        InetAddress inetAddress = InetAddress.getByName(remoteIp);\n                        \r\n                        xRequest.setRemoteHost(inetAddress.getCanonicalHostName());\n                    } catch (UnknownHostException e) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidRemoteAddress\", remoteIp), e);\n                        xRequest.setRemoteHost(remoteIp);\n                    }\n                } else {\n                    xRequest.setRemoteHost(remoteIp);\n                }\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpFilter.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        xRequest.setServerName(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            xRequest.setLocalName(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + request.getRemoteAddr() +\n                        \"], originalRemoteHost=[\" + request.getRemoteHost() + \"], originalSecure=[\" + request.isSecure() +\n                        \"], originalScheme=[\" + request.getScheme() + \"], originalServerName=[\" + request.getServerName() +\n                        \"], originalServerPort=[\" + request.getServerPort() +\n                        \"] will be seen as newRemoteAddr=[\" + xRequest.getRemoteAddr() +\n                        \"], newRemoteHost=[\" + xRequest.getRemoteHost() + \"], newSecure=[\" + xRequest.isSecure() +\n                        \"], newScheme=[\" + xRequest.getScheme() + \"], newServerName=[\" + xRequest.getServerName() +\n                        \"], newServerPort=[\" + xRequest.getServerPort() + \"]\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                        xRequest.getServerName());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":789,"status":"N"},{"authorDate":"2021-06-16 03:46:27","commitOrder":35,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final String originalServerName = request.getServerName();\n        final String originalLocalName = isChangeLocalName() ? request.getLocalName() : null;\n        final int originalServerPort = request.getServerPort();\n        final int originalLocalPort = request.getLocalPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                if (request.getConnector().getEnableLookups()) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    try {\n                        InetAddress inetAddress = InetAddress.getByName(remoteIp);\n                        \r\n                        request.setRemoteHost(inetAddress.getCanonicalHostName());\n                    } catch (UnknownHostException e) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidRemoteAddress\", remoteIp), e);\n                        request.setRemoteHost(remoteIp);\n                    }\n                } else {\n                    request.setRemoteHost(remoteIp);\n                }\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = StringUtils.join(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = StringUtils.join(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpValve.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        request.getCoyoteRequest().serverName().setString(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            request.getCoyoteRequest().localName().setString(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + originalRemoteAddr +\n                          \"], originalRemoteHost=[\" + originalRemoteHost + \"], originalSecure=[\" + originalSecure +\n                          \"], originalScheme=[\" + originalScheme + \"], originalServerName=[\" + originalServerName +\n                          \"], originalServerPort=[\" + originalServerPort +\n                          \"] will be seen as newRemoteAddr=[\" + request.getRemoteAddr() +\n                          \"], newRemoteHost=[\" + request.getRemoteHost() + \"], newSecure=[\" + request.isSecure() +\n                          \"], newScheme=[\" + request.getScheme() + \"], newServerName=[\" + request.getServerName() +\n                          \"], newServerPort=[\" + request.getServerPort() + \"]\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                    request.getServerName());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.getCoyoteRequest().serverName().setString(originalServerName);\n            if (isChangeLocalName()) {\n                request.getCoyoteRequest().localName().setString(originalLocalName);\n            }\n            request.setServerPort(originalServerPort);\n            request.setLocalPort(originalLocalPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","date":"2021-06-16 03:46:27","endLine":795,"groupId":"6318","id":68,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/77/0c7c44c4f2bd2ad3ba814d8d899f8af7df53c5.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final String originalServerName = request.getServerName();\n        final String originalLocalName = isChangeLocalName() ? request.getLocalName() : null;\n        final int originalServerPort = request.getServerPort();\n        final int originalLocalPort = request.getLocalPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                if (request.getConnector().getEnableLookups()) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    try {\n                        InetAddress inetAddress = InetAddress.getByName(remoteIp);\n                        \r\n                        request.setRemoteHost(inetAddress.getCanonicalHostName());\n                    } catch (UnknownHostException e) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidRemoteAddress\", remoteIp), e);\n                        request.setRemoteHost(remoteIp);\n                    }\n                } else {\n                    request.setRemoteHost(remoteIp);\n                }\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpValve.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        request.getCoyoteRequest().serverName().setString(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            request.getCoyoteRequest().localName().setString(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + originalRemoteAddr +\n                          \"], originalRemoteHost=[\" + originalRemoteHost + \"], originalSecure=[\" + originalSecure +\n                          \"], originalScheme=[\" + originalScheme + \"], originalServerName=[\" + originalServerName +\n                          \"], originalServerPort=[\" + originalServerPort +\n                          \"] will be seen as newRemoteAddr=[\" + request.getRemoteAddr() +\n                          \"], newRemoteHost=[\" + request.getRemoteHost() + \"], newSecure=[\" + request.isSecure() +\n                          \"], newScheme=[\" + request.getScheme() + \"], newServerName=[\" + request.getServerName() +\n                          \"], newServerPort=[\" + request.getServerPort() + \"]\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                    request.getServerName());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.getCoyoteRequest().serverName().setString(originalServerName);\n            if (isChangeLocalName()) {\n                request.getCoyoteRequest().localName().setString(originalLocalName);\n            }\n            request.setServerPort(originalServerPort);\n            request.setLocalPort(originalLocalPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"}],"commitId":"0c39935431c8b15bb405325623727a8667d02e0e","commitMessage":"@@@Use the standard utility method for List to comma separated string","date":"2021-06-16 03:46:27","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2021-06-16 03:54:46","codes":[{"authorDate":"2020-11-27 02:57:25","commitOrder":36,"curCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                if (getEnableLookups()) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    try {\n                        InetAddress inetAddress = InetAddress.getByName(remoteIp);\n                        \r\n                        xRequest.setRemoteHost(inetAddress.getCanonicalHostName());\n                    } catch (UnknownHostException e) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidRemoteAddress\", remoteIp), e);\n                        xRequest.setRemoteHost(remoteIp);\n                    }\n                } else {\n                    xRequest.setRemoteHost(remoteIp);\n                }\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpFilter.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        xRequest.setServerName(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            xRequest.setLocalName(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + request.getRemoteAddr() +\n                        \"], originalRemoteHost=[\" + request.getRemoteHost() + \"], originalSecure=[\" + request.isSecure() +\n                        \"], originalScheme=[\" + request.getScheme() + \"], originalServerName=[\" + request.getServerName() +\n                        \"], originalServerPort=[\" + request.getServerPort() +\n                        \"] will be seen as newRemoteAddr=[\" + xRequest.getRemoteAddr() +\n                        \"], newRemoteHost=[\" + xRequest.getRemoteHost() + \"], newSecure=[\" + xRequest.isSecure() +\n                        \"], newScheme=[\" + xRequest.getScheme() + \"], newServerName=[\" + xRequest.getServerName() +\n                        \"], newServerPort=[\" + xRequest.getServerPort() + \"]\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                        xRequest.getServerName());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","date":"2020-11-27 02:57:25","endLine":941,"groupId":"10728","id":69,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(HttpServletRequestrequest@HttpServletResponseresponse@FilterChainchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e2/0faee98dffe9d2b10442ab2c7e2d3646b6f9a6.src","preCode":"    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(request.getRemoteAddr()).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(request.getRemoteAddr());\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                if (getEnableLookups()) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    try {\n                        InetAddress inetAddress = InetAddress.getByName(remoteIp);\n                        \r\n                        xRequest.setRemoteHost(inetAddress.getCanonicalHostName());\n                    } catch (UnknownHostException e) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidRemoteAddress\", remoteIp), e);\n                        xRequest.setRemoteHost(remoteIp);\n                    }\n                } else {\n                    xRequest.setRemoteHost(remoteIp);\n                }\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpFilter.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        xRequest.setServerName(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            xRequest.setLocalName(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpFilter.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + request.getRemoteAddr() +\n                        \"], originalRemoteHost=[\" + request.getRemoteHost() + \"], originalSecure=[\" + request.isSecure() +\n                        \"], originalScheme=[\" + request.getScheme() + \"], originalServerName=[\" + request.getServerName() +\n                        \"], originalServerPort=[\" + request.getServerPort() +\n                        \"] will be seen as newRemoteAddr=[\" + xRequest.getRemoteAddr() +\n                        \"], newRemoteHost=[\" + xRequest.getRemoteHost() + \"], newSecure=[\" + xRequest.isSecure() +\n                        \"], newScheme=[\" + xRequest.getScheme() + \"], newServerName=[\" + xRequest.getServerName() +\n                        \"], newServerPort=[\" + xRequest.getServerPort() + \"]\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                        xRequest.getServerName());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }\n","realPath":"java/org/apache/catalina/filters/RemoteIpFilter.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":789,"status":"N"},{"authorDate":"2021-06-16 03:54:46","commitOrder":36,"curCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final String originalServerName = request.getServerName();\n        final String originalLocalName = isChangeLocalName() ? request.getLocalName() : null;\n        final int originalServerPort = request.getServerPort();\n        final int originalLocalPort = request.getLocalPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            Deque<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                if (request.getConnector().getEnableLookups()) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    try {\n                        InetAddress inetAddress = InetAddress.getByName(remoteIp);\n                        \r\n                        request.setRemoteHost(inetAddress.getCanonicalHostName());\n                    } catch (UnknownHostException e) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidRemoteAddress\", remoteIp), e);\n                        request.setRemoteHost(remoteIp);\n                    }\n                } else {\n                    request.setRemoteHost(remoteIp);\n                }\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = StringUtils.join(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = StringUtils.join(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpValve.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        request.getCoyoteRequest().serverName().setString(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            request.getCoyoteRequest().localName().setString(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + originalRemoteAddr +\n                          \"], originalRemoteHost=[\" + originalRemoteHost + \"], originalSecure=[\" + originalSecure +\n                          \"], originalScheme=[\" + originalScheme + \"], originalServerName=[\" + originalServerName +\n                          \"], originalServerPort=[\" + originalServerPort +\n                          \"] will be seen as newRemoteAddr=[\" + request.getRemoteAddr() +\n                          \"], newRemoteHost=[\" + request.getRemoteHost() + \"], newSecure=[\" + request.isSecure() +\n                          \"], newScheme=[\" + request.getScheme() + \"], newServerName=[\" + request.getServerName() +\n                          \"], newServerPort=[\" + request.getServerPort() + \"]\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                    request.getServerName());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.getCoyoteRequest().serverName().setString(originalServerName);\n            if (isChangeLocalName()) {\n                request.getCoyoteRequest().localName().setString(originalLocalName);\n            }\n            request.setServerPort(originalServerPort);\n            request.setLocalPort(originalLocalPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","date":"2021-06-16 03:54:46","endLine":795,"groupId":"10728","id":70,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Requestrequest@Responseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fc/ae2288e679a520b38cf2d29f9577f20584768a.src","preCode":"    public void invoke(Request request, Response response) throws IOException, ServletException {\n        final String originalRemoteAddr = request.getRemoteAddr();\n        final String originalRemoteHost = request.getRemoteHost();\n        final String originalScheme = request.getScheme();\n        final boolean originalSecure = request.isSecure();\n        final String originalServerName = request.getServerName();\n        final String originalLocalName = isChangeLocalName() ? request.getLocalName() : null;\n        final int originalServerPort = request.getServerPort();\n        final int originalLocalPort = request.getLocalPort();\n        final String originalProxiesHeader = request.getHeader(proxiesHeader);\n        final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);\n        boolean isInternal = internalProxies != null &&\n                internalProxies.matcher(originalRemoteAddr).matches();\n\n        if (isInternal || (trustedProxies != null &&\n                trustedProxies.matcher(originalRemoteAddr).matches())) {\n            String remoteIp = null;\n            \r\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            if (!isInternal) {\n                proxiesHeaderValue.addFirst(originalRemoteAddr);\n            }\n            \r\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {\n                    \r\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; \r\n                    break;\n                }\n            }\n            \r\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n            if (remoteIp != null) {\n\n                request.setRemoteAddr(remoteIp);\n                if (request.getConnector().getEnableLookups()) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    try {\n                        InetAddress inetAddress = InetAddress.getByName(remoteIp);\n                        \r\n                        request.setRemoteHost(inetAddress.getCanonicalHostName());\n                    } catch (UnknownHostException e) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidRemoteAddress\", remoteIp), e);\n                        request.setRemoteHost(remoteIp);\n                    }\n                } else {\n                    request.setRemoteHost(remoteIp);\n                }\n\n                if (proxiesHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = StringUtils.join(proxiesHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = StringUtils.join(newRemoteIpHeaderValue);\n                    request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    \r\n                    \r\n                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {\n                    request.setSecure(true);\n                    request.getCoyoteRequest().scheme().setString(\"https\");\n                    setPorts(request, httpsServerPort);\n                } else {\n                    request.setSecure(false);\n                    request.getCoyoteRequest().scheme().setString(\"http\");\n                    setPorts(request, httpServerPort);\n                }\n            }\n\n            if (hostHeader != null) {\n                String hostHeaderValue = request.getHeader(hostHeader);\n                if (hostHeaderValue != null) {\n                    try {\n                        int portIndex = Host.parse(hostHeaderValue);\n                        if (portIndex > -1) {\n                            log.debug(sm.getString(\"remoteIpValve.invalidHostWithPort\", hostHeaderValue, hostHeader));\n                            hostHeaderValue = hostHeaderValue.substring(0, portIndex);\n                        }\n\n                        request.getCoyoteRequest().serverName().setString(hostHeaderValue);\n                        if (isChangeLocalName()) {\n                            request.getCoyoteRequest().localName().setString(hostHeaderValue);\n                        }\n\n                    } catch (IllegalArgumentException iae) {\n                        log.debug(sm.getString(\"remoteIpValve.invalidHostHeader\", hostHeaderValue, hostHeader));\n                    }\n                }\n            }\n\n            request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr [\" + originalRemoteAddr +\n                          \"], originalRemoteHost=[\" + originalRemoteHost + \"], originalSecure=[\" + originalSecure +\n                          \"], originalScheme=[\" + originalScheme + \"], originalServerName=[\" + originalServerName +\n                          \"], originalServerPort=[\" + originalServerPort +\n                          \"] will be seen as newRemoteAddr=[\" + request.getRemoteAddr() +\n                          \"], newRemoteHost=[\" + request.getRemoteHost() + \"], newSecure=[\" + request.isSecure() +\n                          \"], newScheme=[\" + request.getScheme() + \"], newServerName=[\" + request.getServerName() +\n                          \"], newServerPort=[\" + request.getServerPort() + \"]\");\n            }\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpValve for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n        }\n        if (requestAttributesEnabled) {\n            request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                    request.getRemoteAddr());\n            request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                    request.getRemoteHost());\n            request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                    request.getProtocol());\n            request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE,\n                    request.getServerName());\n            request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                    Integer.valueOf(request.getServerPort()));\n        }\n        try {\n            getNext().invoke(request, response);\n        } finally {\n            request.setRemoteAddr(originalRemoteAddr);\n            request.setRemoteHost(originalRemoteHost);\n            request.setSecure(originalSecure);\n            request.getCoyoteRequest().scheme().setString(originalScheme);\n            request.getCoyoteRequest().serverName().setString(originalServerName);\n            if (isChangeLocalName()) {\n                request.getCoyoteRequest().localName().setString(originalLocalName);\n            }\n            request.setServerPort(originalServerPort);\n            request.setLocalPort(originalLocalPort);\n\n            MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();\n            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {\n                headers.removeHeader(proxiesHeader);\n            } else {\n                headers.setValue(proxiesHeader).setString(originalProxiesHeader);\n            }\n\n            if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {\n                headers.removeHeader(remoteIpHeader);\n            } else {\n                headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/valves/RemoteIpValve.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":612,"status":"M"}],"commitId":"d82d20ecfcf5d4c9fd39e37d4e480a4c838c26e3","commitMessage":"@@@Act on rather old TODO comment","date":"2021-06-16 03:54:46","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"}]
