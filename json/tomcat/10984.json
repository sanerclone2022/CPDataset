[{"authorTime":"2014-03-27 05:22:31","codes":[{"authorDate":"2014-09-08 19:13:06","commitOrder":3,"curCode":"    private final void clearReferencesJdbc() {\n        \r\n        \r\n        byte[] classBytes = new byte[2048];\n        int offset = 0;\n        try (InputStream is = getResourceAsStream(\n                \"org/apache/catalina/loader/JdbcLeakPrevention.class\")) {\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass =\n                defineClass(\"org.apache.catalina.loader.JdbcLeakPrevention\",\n                    classBytes, 0, offset, this.getClass().getProtectionDomain());\n            Object obj = lpClass.newInstance();\n            @SuppressWarnings(\"unchecked\")\n            List<String> driverNames = (List<String>) obj.getClass().getMethod(\n                    \"clearJdbcDriverRegistrations\").invoke(obj);\n            for (String name : driverNames) {\n                log.warn(sm.getString(\"webappClassLoader.clearJdbc\",\n                        getContextName(), name));\n            }\n        } catch (Exception e) {\n            \r\n            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);\n            ExceptionUtils.handleThrowable(t);\n            log.warn(sm.getString(\n                    \"webappClassLoader.jdbcRemoveFailed\", getContextName()), t);\n        }\n    }\n","date":"2014-09-08 19:13:06","endLine":1615,"groupId":"16159","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"clearReferencesJdbc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/4c/8109cbc7e303b20d10db554f87e9f935abe184.src","preCode":"    private final void clearReferencesJdbc() {\n        \r\n        \r\n        byte[] classBytes = new byte[2048];\n        int offset = 0;\n        try (InputStream is = getResourceAsStream(\n                \"org/apache/catalina/loader/JdbcLeakPrevention.class\")) {\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass =\n                defineClass(\"org.apache.catalina.loader.JdbcLeakPrevention\",\n                    classBytes, 0, offset, this.getClass().getProtectionDomain());\n            Object obj = lpClass.newInstance();\n            @SuppressWarnings(\"unchecked\")\n            List<String> driverNames = (List<String>) obj.getClass().getMethod(\n                    \"clearJdbcDriverRegistrations\").invoke(obj);\n            for (String name : driverNames) {\n                log.warn(sm.getString(\"webappClassLoader.clearJdbc\",\n                        getContextName(), name));\n            }\n        } catch (Exception e) {\n            \r\n            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);\n            ExceptionUtils.handleThrowable(t);\n            log.warn(sm.getString(\n                    \"webappClassLoader.jdbcRemoveFailed\", getContextName()), t);\n        }\n    }\n","realPath":"java/org/apache/catalina/loader/WebappClassLoaderBase.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1579,"status":"B"},{"authorDate":"2014-03-27 05:22:31","commitOrder":3,"curCode":"    private void loadClass(String name, WebappClassLoader cl) throws Exception {\n        try (InputStream is = cl.getResourceAsStream(\n                \"org/apache/tomcat/unittest/\" + name + \".class\")) {\n            \r\n            \r\n            byte[] classBytes = new byte[2048];\n            int offset = 0;\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass = cl.doDefineClass(\n                    \"org.apache.tomcat.unittest.\" + name, classBytes, 0,\n                    offset, cl.getClass().getProtectionDomain());\n            \r\n            Object obj = lpClass.newInstance();\n            obj.toString();\n        }\n    }\n","date":"2014-03-27 05:22:31","endLine":186,"groupId":"101","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadClass","params":"(Stringname@WebappClassLoadercl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b5/17f58093289dac493027c70a3db6e3269befc3.src","preCode":"    private void loadClass(String name, WebappClassLoader cl) throws Exception {\n        try (InputStream is = cl.getResourceAsStream(\n                \"org/apache/tomcat/unittest/\" + name + \".class\")) {\n            \r\n            \r\n            byte[] classBytes = new byte[2048];\n            int offset = 0;\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass = cl.doDefineClass(\n                    \"org.apache.tomcat.unittest.\" + name, classBytes, 0,\n                    offset, cl.getClass().getProtectionDomain());\n            \r\n            Object obj = lpClass.newInstance();\n            obj.toString();\n        }\n    }\n","realPath":"test/org/apache/catalina/loader/TestWebappClassLoaderThreadLocalMemoryLeak.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"NB"}],"commitId":"c86e81934b00f44dfd034d808039e0e5b1d37935","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56530\nAdd a web application class loader implementation that supports the parallel loading of web application classes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1623360 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-08 19:13:06","modifiedFileCount":"9","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2017-06-06 04:07:56","codes":[{"authorDate":"2014-09-08 19:13:06","commitOrder":4,"curCode":"    private final void clearReferencesJdbc() {\n        \r\n        \r\n        byte[] classBytes = new byte[2048];\n        int offset = 0;\n        try (InputStream is = getResourceAsStream(\n                \"org/apache/catalina/loader/JdbcLeakPrevention.class\")) {\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass =\n                defineClass(\"org.apache.catalina.loader.JdbcLeakPrevention\",\n                    classBytes, 0, offset, this.getClass().getProtectionDomain());\n            Object obj = lpClass.newInstance();\n            @SuppressWarnings(\"unchecked\")\n            List<String> driverNames = (List<String>) obj.getClass().getMethod(\n                    \"clearJdbcDriverRegistrations\").invoke(obj);\n            for (String name : driverNames) {\n                log.warn(sm.getString(\"webappClassLoader.clearJdbc\",\n                        getContextName(), name));\n            }\n        } catch (Exception e) {\n            \r\n            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);\n            ExceptionUtils.handleThrowable(t);\n            log.warn(sm.getString(\n                    \"webappClassLoader.jdbcRemoveFailed\", getContextName()), t);\n        }\n    }\n","date":"2014-09-08 19:13:06","endLine":1615,"groupId":"16159","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"clearReferencesJdbc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/4c/8109cbc7e303b20d10db554f87e9f935abe184.src","preCode":"    private final void clearReferencesJdbc() {\n        \r\n        \r\n        byte[] classBytes = new byte[2048];\n        int offset = 0;\n        try (InputStream is = getResourceAsStream(\n                \"org/apache/catalina/loader/JdbcLeakPrevention.class\")) {\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass =\n                defineClass(\"org.apache.catalina.loader.JdbcLeakPrevention\",\n                    classBytes, 0, offset, this.getClass().getProtectionDomain());\n            Object obj = lpClass.newInstance();\n            @SuppressWarnings(\"unchecked\")\n            List<String> driverNames = (List<String>) obj.getClass().getMethod(\n                    \"clearJdbcDriverRegistrations\").invoke(obj);\n            for (String name : driverNames) {\n                log.warn(sm.getString(\"webappClassLoader.clearJdbc\",\n                        getContextName(), name));\n            }\n        } catch (Exception e) {\n            \r\n            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);\n            ExceptionUtils.handleThrowable(t);\n            log.warn(sm.getString(\n                    \"webappClassLoader.jdbcRemoveFailed\", getContextName()), t);\n        }\n    }\n","realPath":"java/org/apache/catalina/loader/WebappClassLoaderBase.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1579,"status":"N"},{"authorDate":"2017-06-06 04:07:56","commitOrder":4,"curCode":"    private void loadClass(String name, WebappClassLoaderBase cl) throws Exception {\n        try (InputStream is = cl.getResourceAsStream(\n                \"org/apache/tomcat/unittest/\" + name + \".class\")) {\n            \r\n            \r\n            byte[] classBytes = new byte[2048];\n            int offset = 0;\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass = cl.doDefineClass(\n                    \"org.apache.tomcat.unittest.\" + name, classBytes, 0,\n                    offset, cl.getClass().getProtectionDomain());\n            \r\n            Object obj = lpClass.newInstance();\n            obj.toString();\n        }\n    }\n","date":"2017-06-06 04:07:56","endLine":202,"groupId":"101","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadClass","params":"(Stringname@WebappClassLoaderBasecl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0a/89a505c1ac07f4bdd0f5f901565e39889e13fd.src","preCode":"    private void loadClass(String name, WebappClassLoader cl) throws Exception {\n        try (InputStream is = cl.getResourceAsStream(\n                \"org/apache/tomcat/unittest/\" + name + \".class\")) {\n            \r\n            \r\n            byte[] classBytes = new byte[2048];\n            int offset = 0;\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass = cl.doDefineClass(\n                    \"org.apache.tomcat.unittest.\" + name, classBytes, 0,\n                    offset, cl.getClass().getProtectionDomain());\n            \r\n            Object obj = lpClass.newInstance();\n            obj.toString();\n        }\n    }\n","realPath":"test/org/apache/catalina/loader/TestWebappClassLoaderThreadLocalMemoryLeak.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"}],"commitId":"2584bd60f6046083ce89af995533edbaee075638","commitMessage":"@@@Enable TesterLogValidationFilter to test log levels and throwables as well as messages.\nFix some test errors when running the disabled memory leak tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1797692 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-06-06 04:07:56","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2017-06-06 04:07:56","codes":[{"authorDate":"2017-10-05 20:44:21","commitOrder":5,"curCode":"    private final void clearReferencesJdbc() {\n        \r\n        \r\n        byte[] classBytes = new byte[2048];\n        int offset = 0;\n        try (InputStream is = getResourceAsStream(\n                \"org/apache/catalina/loader/JdbcLeakPrevention.class\")) {\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass =\n                defineClass(\"org.apache.catalina.loader.JdbcLeakPrevention\",\n                    classBytes, 0, offset, this.getClass().getProtectionDomain());\n            Object obj = lpClass.getDeclaredConstructor().newInstance();\n            @SuppressWarnings(\"unchecked\")\n            List<String> driverNames = (List<String>) obj.getClass().getMethod(\n                    \"clearJdbcDriverRegistrations\").invoke(obj);\n            for (String name : driverNames) {\n                log.warn(sm.getString(\"webappClassLoader.clearJdbc\",\n                        getContextName(), name));\n            }\n        } catch (Exception e) {\n            \r\n            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);\n            ExceptionUtils.handleThrowable(t);\n            log.warn(sm.getString(\n                    \"webappClassLoader.jdbcRemoveFailed\", getContextName()), t);\n        }\n    }\n","date":"2017-10-05 20:44:21","endLine":1594,"groupId":"16159","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"clearReferencesJdbc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/17/720d16ef2b9b4fe92fab5c5ad5da5ee724b337.src","preCode":"    private final void clearReferencesJdbc() {\n        \r\n        \r\n        byte[] classBytes = new byte[2048];\n        int offset = 0;\n        try (InputStream is = getResourceAsStream(\n                \"org/apache/catalina/loader/JdbcLeakPrevention.class\")) {\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass =\n                defineClass(\"org.apache.catalina.loader.JdbcLeakPrevention\",\n                    classBytes, 0, offset, this.getClass().getProtectionDomain());\n            Object obj = lpClass.newInstance();\n            @SuppressWarnings(\"unchecked\")\n            List<String> driverNames = (List<String>) obj.getClass().getMethod(\n                    \"clearJdbcDriverRegistrations\").invoke(obj);\n            for (String name : driverNames) {\n                log.warn(sm.getString(\"webappClassLoader.clearJdbc\",\n                        getContextName(), name));\n            }\n        } catch (Exception e) {\n            \r\n            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);\n            ExceptionUtils.handleThrowable(t);\n            log.warn(sm.getString(\n                    \"webappClassLoader.jdbcRemoveFailed\", getContextName()), t);\n        }\n    }\n","realPath":"java/org/apache/catalina/loader/WebappClassLoaderBase.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1558,"status":"M"},{"authorDate":"2017-06-06 04:07:56","commitOrder":5,"curCode":"    private void loadClass(String name, WebappClassLoaderBase cl) throws Exception {\n        try (InputStream is = cl.getResourceAsStream(\n                \"org/apache/tomcat/unittest/\" + name + \".class\")) {\n            \r\n            \r\n            byte[] classBytes = new byte[2048];\n            int offset = 0;\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass = cl.doDefineClass(\n                    \"org.apache.tomcat.unittest.\" + name, classBytes, 0,\n                    offset, cl.getClass().getProtectionDomain());\n            \r\n            Object obj = lpClass.newInstance();\n            obj.toString();\n        }\n    }\n","date":"2017-06-06 04:07:56","endLine":202,"groupId":"101","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"loadClass","params":"(Stringname@WebappClassLoaderBasecl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0a/89a505c1ac07f4bdd0f5f901565e39889e13fd.src","preCode":"    private void loadClass(String name, WebappClassLoaderBase cl) throws Exception {\n        try (InputStream is = cl.getResourceAsStream(\n                \"org/apache/tomcat/unittest/\" + name + \".class\")) {\n            \r\n            \r\n            byte[] classBytes = new byte[2048];\n            int offset = 0;\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass = cl.doDefineClass(\n                    \"org.apache.tomcat.unittest.\" + name, classBytes, 0,\n                    offset, cl.getClass().getProtectionDomain());\n            \r\n            Object obj = lpClass.newInstance();\n            obj.toString();\n        }\n    }\n","realPath":"test/org/apache/catalina/loader/TestWebappClassLoaderThreadLocalMemoryLeak.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"N"}],"commitId":"d6de67e099df7007dac7dfe266518ebb178ec440","commitMessage":"@@@Fix some more deprecation warnings when building with Java 9.\nUse of Class.newInstance() in o.a.catalina\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1811198 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-10-05 20:44:21","modifiedFileCount":"26","status":"M","submitter":"Mark Thomas"},{"authorTime":"2017-10-05 21:13:27","codes":[{"authorDate":"2017-10-05 20:44:21","commitOrder":6,"curCode":"    private final void clearReferencesJdbc() {\n        \r\n        \r\n        byte[] classBytes = new byte[2048];\n        int offset = 0;\n        try (InputStream is = getResourceAsStream(\n                \"org/apache/catalina/loader/JdbcLeakPrevention.class\")) {\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass =\n                defineClass(\"org.apache.catalina.loader.JdbcLeakPrevention\",\n                    classBytes, 0, offset, this.getClass().getProtectionDomain());\n            Object obj = lpClass.getDeclaredConstructor().newInstance();\n            @SuppressWarnings(\"unchecked\")\n            List<String> driverNames = (List<String>) obj.getClass().getMethod(\n                    \"clearJdbcDriverRegistrations\").invoke(obj);\n            for (String name : driverNames) {\n                log.warn(sm.getString(\"webappClassLoader.clearJdbc\",\n                        getContextName(), name));\n            }\n        } catch (Exception e) {\n            \r\n            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);\n            ExceptionUtils.handleThrowable(t);\n            log.warn(sm.getString(\n                    \"webappClassLoader.jdbcRemoveFailed\", getContextName()), t);\n        }\n    }\n","date":"2017-10-05 20:44:21","endLine":1594,"groupId":"16159","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"clearReferencesJdbc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/17/720d16ef2b9b4fe92fab5c5ad5da5ee724b337.src","preCode":"    private final void clearReferencesJdbc() {\n        \r\n        \r\n        byte[] classBytes = new byte[2048];\n        int offset = 0;\n        try (InputStream is = getResourceAsStream(\n                \"org/apache/catalina/loader/JdbcLeakPrevention.class\")) {\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass =\n                defineClass(\"org.apache.catalina.loader.JdbcLeakPrevention\",\n                    classBytes, 0, offset, this.getClass().getProtectionDomain());\n            Object obj = lpClass.getDeclaredConstructor().newInstance();\n            @SuppressWarnings(\"unchecked\")\n            List<String> driverNames = (List<String>) obj.getClass().getMethod(\n                    \"clearJdbcDriverRegistrations\").invoke(obj);\n            for (String name : driverNames) {\n                log.warn(sm.getString(\"webappClassLoader.clearJdbc\",\n                        getContextName(), name));\n            }\n        } catch (Exception e) {\n            \r\n            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);\n            ExceptionUtils.handleThrowable(t);\n            log.warn(sm.getString(\n                    \"webappClassLoader.jdbcRemoveFailed\", getContextName()), t);\n        }\n    }\n","realPath":"java/org/apache/catalina/loader/WebappClassLoaderBase.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1558,"status":"N"},{"authorDate":"2017-10-05 21:13:27","commitOrder":6,"curCode":"    private void loadClass(String name, WebappClassLoaderBase cl) throws Exception {\n        try (InputStream is = cl.getResourceAsStream(\n                \"org/apache/tomcat/unittest/\" + name + \".class\")) {\n            \r\n            \r\n            byte[] classBytes = new byte[2048];\n            int offset = 0;\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass = cl.doDefineClass(\n                    \"org.apache.tomcat.unittest.\" + name, classBytes, 0,\n                    offset, cl.getClass().getProtectionDomain());\n            \r\n            Object obj = lpClass.getDeclaredConstructor().newInstance();\n            obj.toString();\n        }\n    }\n","date":"2017-10-05 21:13:27","endLine":202,"groupId":"101","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"loadClass","params":"(Stringname@WebappClassLoaderBasecl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/41/9a8298f89df2848d07066919818131d2866c48.src","preCode":"    private void loadClass(String name, WebappClassLoaderBase cl) throws Exception {\n        try (InputStream is = cl.getResourceAsStream(\n                \"org/apache/tomcat/unittest/\" + name + \".class\")) {\n            \r\n            \r\n            byte[] classBytes = new byte[2048];\n            int offset = 0;\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass = cl.doDefineClass(\n                    \"org.apache.tomcat.unittest.\" + name, classBytes, 0,\n                    offset, cl.getClass().getProtectionDomain());\n            \r\n            Object obj = lpClass.newInstance();\n            obj.toString();\n        }\n    }\n","realPath":"test/org/apache/catalina/loader/TestWebappClassLoaderThreadLocalMemoryLeak.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"}],"commitId":"100a8088de3f1501e3e82546dc1d2114234199cc","commitMessage":"@@@Fix some more deprecation warnings when building with Java 9.\nUse of Class.newInstance() in test code\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1811204 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-10-05 21:13:27","modifiedFileCount":"4","status":"M","submitter":"Mark Thomas"},{"authorTime":"2017-10-06 02:19:57","codes":[{"authorDate":"2017-10-06 02:19:57","commitOrder":7,"curCode":"    private final void clearReferencesJdbc() {\n        \r\n        \r\n        byte[] classBytes = new byte[2048];\n        int offset = 0;\n        try (InputStream is = getResourceAsStream(\n                \"org/apache/catalina/loader/JdbcLeakPrevention.class\")) {\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass =\n                defineClass(\"org.apache.catalina.loader.JdbcLeakPrevention\",\n                    classBytes, 0, offset, this.getClass().getProtectionDomain());\n            Object obj = lpClass.getConstructor().newInstance();\n            @SuppressWarnings(\"unchecked\")\n            List<String> driverNames = (List<String>) obj.getClass().getMethod(\n                    \"clearJdbcDriverRegistrations\").invoke(obj);\n            for (String name : driverNames) {\n                log.warn(sm.getString(\"webappClassLoader.clearJdbc\",\n                        getContextName(), name));\n            }\n        } catch (Exception e) {\n            \r\n            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);\n            ExceptionUtils.handleThrowable(t);\n            log.warn(sm.getString(\n                    \"webappClassLoader.jdbcRemoveFailed\", getContextName()), t);\n        }\n    }\n","date":"2017-10-06 02:19:57","endLine":1594,"groupId":"16159","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"clearReferencesJdbc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/45/1b3762e092130c92965f9451bcf19af37ab29f.src","preCode":"    private final void clearReferencesJdbc() {\n        \r\n        \r\n        byte[] classBytes = new byte[2048];\n        int offset = 0;\n        try (InputStream is = getResourceAsStream(\n                \"org/apache/catalina/loader/JdbcLeakPrevention.class\")) {\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass =\n                defineClass(\"org.apache.catalina.loader.JdbcLeakPrevention\",\n                    classBytes, 0, offset, this.getClass().getProtectionDomain());\n            Object obj = lpClass.getDeclaredConstructor().newInstance();\n            @SuppressWarnings(\"unchecked\")\n            List<String> driverNames = (List<String>) obj.getClass().getMethod(\n                    \"clearJdbcDriverRegistrations\").invoke(obj);\n            for (String name : driverNames) {\n                log.warn(sm.getString(\"webappClassLoader.clearJdbc\",\n                        getContextName(), name));\n            }\n        } catch (Exception e) {\n            \r\n            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);\n            ExceptionUtils.handleThrowable(t);\n            log.warn(sm.getString(\n                    \"webappClassLoader.jdbcRemoveFailed\", getContextName()), t);\n        }\n    }\n","realPath":"java/org/apache/catalina/loader/WebappClassLoaderBase.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1558,"status":"M"},{"authorDate":"2017-10-06 02:19:57","commitOrder":7,"curCode":"    private void loadClass(String name, WebappClassLoaderBase cl) throws Exception {\n        try (InputStream is = cl.getResourceAsStream(\n                \"org/apache/tomcat/unittest/\" + name + \".class\")) {\n            \r\n            \r\n            byte[] classBytes = new byte[2048];\n            int offset = 0;\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass = cl.doDefineClass(\n                    \"org.apache.tomcat.unittest.\" + name, classBytes, 0,\n                    offset, cl.getClass().getProtectionDomain());\n            \r\n            Object obj = lpClass.getConstructor().newInstance();\n            obj.toString();\n        }\n    }\n","date":"2017-10-06 02:19:57","endLine":202,"groupId":"101","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"loadClass","params":"(Stringname@WebappClassLoaderBasecl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/34/e4d6edf267a919a3bb2551f4ed6eda35210bf8.src","preCode":"    private void loadClass(String name, WebappClassLoaderBase cl) throws Exception {\n        try (InputStream is = cl.getResourceAsStream(\n                \"org/apache/tomcat/unittest/\" + name + \".class\")) {\n            \r\n            \r\n            byte[] classBytes = new byte[2048];\n            int offset = 0;\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass = cl.doDefineClass(\n                    \"org.apache.tomcat.unittest.\" + name, classBytes, 0,\n                    offset, cl.getClass().getProtectionDomain());\n            \r\n            Object obj = lpClass.getDeclaredConstructor().newInstance();\n            obj.toString();\n        }\n    }\n","realPath":"test/org/apache/catalina/loader/TestWebappClassLoaderThreadLocalMemoryLeak.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"}],"commitId":"a707e35540bacabd943548469d88148d26c8d521","commitMessage":"@@@getDeclaredConstructor() -> getConstructor()\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1811220 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2017-10-06 02:19:57","modifiedFileCount":"65","status":"M","submitter":"Mark Thomas"},{"authorTime":"2018-05-22 19:12:25","codes":[{"authorDate":"2017-10-06 02:19:57","commitOrder":8,"curCode":"    private final void clearReferencesJdbc() {\n        \r\n        \r\n        byte[] classBytes = new byte[2048];\n        int offset = 0;\n        try (InputStream is = getResourceAsStream(\n                \"org/apache/catalina/loader/JdbcLeakPrevention.class\")) {\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass =\n                defineClass(\"org.apache.catalina.loader.JdbcLeakPrevention\",\n                    classBytes, 0, offset, this.getClass().getProtectionDomain());\n            Object obj = lpClass.getConstructor().newInstance();\n            @SuppressWarnings(\"unchecked\")\n            List<String> driverNames = (List<String>) obj.getClass().getMethod(\n                    \"clearJdbcDriverRegistrations\").invoke(obj);\n            for (String name : driverNames) {\n                log.warn(sm.getString(\"webappClassLoader.clearJdbc\",\n                        getContextName(), name));\n            }\n        } catch (Exception e) {\n            \r\n            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);\n            ExceptionUtils.handleThrowable(t);\n            log.warn(sm.getString(\n                    \"webappClassLoader.jdbcRemoveFailed\", getContextName()), t);\n        }\n    }\n","date":"2017-10-06 02:19:57","endLine":1594,"groupId":"10984","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"clearReferencesJdbc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/45/1b3762e092130c92965f9451bcf19af37ab29f.src","preCode":"    private final void clearReferencesJdbc() {\n        \r\n        \r\n        byte[] classBytes = new byte[2048];\n        int offset = 0;\n        try (InputStream is = getResourceAsStream(\n                \"org/apache/catalina/loader/JdbcLeakPrevention.class\")) {\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass =\n                defineClass(\"org.apache.catalina.loader.JdbcLeakPrevention\",\n                    classBytes, 0, offset, this.getClass().getProtectionDomain());\n            Object obj = lpClass.getConstructor().newInstance();\n            @SuppressWarnings(\"unchecked\")\n            List<String> driverNames = (List<String>) obj.getClass().getMethod(\n                    \"clearJdbcDriverRegistrations\").invoke(obj);\n            for (String name : driverNames) {\n                log.warn(sm.getString(\"webappClassLoader.clearJdbc\",\n                        getContextName(), name));\n            }\n        } catch (Exception e) {\n            \r\n            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);\n            ExceptionUtils.handleThrowable(t);\n            log.warn(sm.getString(\n                    \"webappClassLoader.jdbcRemoveFailed\", getContextName()), t);\n        }\n    }\n","realPath":"java/org/apache/catalina/loader/WebappClassLoaderBase.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1558,"status":"N"},{"authorDate":"2018-05-22 19:12:25","commitOrder":8,"curCode":"    private void loadClass(String name, WebappClassLoaderBase cl) throws Exception {\n        try (InputStream is = cl.getResourceAsStream(\n                \"org/apache/tomcat/unittest/\" + name + \".class\")) {\n            \r\n            \r\n            byte[] classBytes = new byte[2048];\n            int offset = 0;\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass = cl.doDefineClass(\n                    \"org.apache.tomcat.unittest.\" + name, classBytes, 0,\n                    offset, cl.getClass().getProtectionDomain());\n            \r\n            lpClass.getConstructor().newInstance();\n        }\n    }\n","date":"2018-05-22 19:12:25","endLine":201,"groupId":"10984","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"loadClass","params":"(Stringname@WebappClassLoaderBasecl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/45/1c8cfae19f4c3ab97db9df9d337e5ae09cafb2.src","preCode":"    private void loadClass(String name, WebappClassLoaderBase cl) throws Exception {\n        try (InputStream is = cl.getResourceAsStream(\n                \"org/apache/tomcat/unittest/\" + name + \".class\")) {\n            \r\n            \r\n            byte[] classBytes = new byte[2048];\n            int offset = 0;\n            int read = is.read(classBytes, offset, classBytes.length-offset);\n            while (read > -1) {\n                offset += read;\n                if (offset == classBytes.length) {\n                    \r\n                    byte[] tmp = new byte[classBytes.length * 2];\n                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);\n                    classBytes = tmp;\n                }\n                read = is.read(classBytes, offset, classBytes.length-offset);\n            }\n            Class<?> lpClass = cl.doDefineClass(\n                    \"org.apache.tomcat.unittest.\" + name, classBytes, 0,\n                    offset, cl.getClass().getProtectionDomain());\n            \r\n            Object obj = lpClass.getConstructor().newInstance();\n            obj.toString();\n        }\n    }\n","realPath":"test/org/apache/catalina/loader/TestWebappClassLoaderThreadLocalMemoryLeak.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"}],"commitId":"d84e0cdd8b441bb5e8f5543acc67f8c1b5a260fe","commitMessage":"@@@SpotBugs: simplify to avoid warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1832018 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-05-22 19:12:25","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"}]
